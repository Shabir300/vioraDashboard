
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.13.0
 * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
 */
Prisma.prismaVersion = {
  client: "6.13.0",
  engine: "361e86d0ea4987e9f53a565309b3eed797a6bcbd"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  password: 'password',
  image: 'image',
  emailVerified: 'emailVerified',
  role: 'role',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.OrganizationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  subdomain: 'subdomain',
  billingPlan: 'billingPlan',
  createdAt: 'createdAt'
};

exports.Prisma.OrganizationMembershipScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  userId: 'userId',
  role: 'role'
};

exports.Prisma.ClientScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  name: 'name',
  email: 'email',
  phone: 'phone',
  company: 'company',
  stage: 'stage',
  valueUsd: 'valueUsd',
  isPaid: 'isPaid',
  isOnboarded: 'isOnboarded',
  competitors: 'competitors',
  notes: 'notes',
  createdAt: 'createdAt',
  assignedToMembershipId: 'assignedToMembershipId'
};

exports.Prisma.InteractionScalarFieldEnum = {
  id: 'id',
  date: 'date',
  type: 'type',
  summary: 'summary',
  clientId: 'clientId'
};

exports.Prisma.PipelineScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  name: 'name',
  createdAt: 'createdAt'
};

exports.Prisma.PipelineStageModelScalarFieldEnum = {
  id: 'id',
  pipelineId: 'pipelineId',
  name: 'name',
  position: 'position'
};

exports.Prisma.PipelineCardScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  pipelineId: 'pipelineId',
  stageId: 'stageId',
  clientId: 'clientId',
  title: 'title',
  value: 'value',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EmailTemplateScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  name: 'name',
  subject: 'subject',
  html: 'html',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EmailSequenceScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  name: 'name',
  sent: 'sent',
  opens: 'opens',
  clicks: 'clicks',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EmailStepScalarFieldEnum = {
  id: 'id',
  subject: 'subject',
  body: 'body',
  delayDays: 'delayDays',
  sequenceId: 'sequenceId'
};

exports.Prisma.SequenceTargetScalarFieldEnum = {
  sequenceId: 'sequenceId',
  clientId: 'clientId'
};

exports.Prisma.EmailEventScalarFieldEnum = {
  id: 'id',
  sequenceId: 'sequenceId',
  clientId: 'clientId',
  type: 'type',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.InvoiceScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  clientId: 'clientId',
  amountUsd: 'amountUsd',
  status: 'status',
  dueDate: 'dueDate',
  createdAt: 'createdAt'
};

exports.Prisma.TransactionScalarFieldEnum = {
  id: 'id',
  invoiceId: 'invoiceId',
  organizationId: 'organizationId',
  amount: 'amount',
  currency: 'currency',
  gateway: 'gateway',
  gatewayPayload: 'gatewayPayload',
  createdAt: 'createdAt'
};

exports.Prisma.SubscriptionScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  clientId: 'clientId',
  status: 'status',
  priceId: 'priceId',
  subscriptionId: 'subscriptionId',
  currentPeriodEnd: 'currentPeriodEnd',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CalendarEventScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  title: 'title',
  start: 'start',
  end: 'end',
  level: 'level',
  description: 'description',
  createdById: 'createdById',
  createdAt: 'createdAt'
};

exports.Prisma.CampaignScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  name: 'name',
  startDate: 'startDate',
  endDate: 'endDate',
  status: 'status',
  metrics: 'metrics'
};

exports.Prisma.MindMapScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  ownerUserId: 'ownerUserId',
  data: 'data',
  createdAt: 'createdAt'
};

exports.Prisma.AffiliateLinkScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  userId: 'userId',
  code: 'code',
  commissionRate: 'commissionRate',
  createdAt: 'createdAt'
};

exports.Prisma.AffiliateClickScalarFieldEnum = {
  id: 'id',
  affiliateId: 'affiliateId',
  visitorIp: 'visitorIp',
  userAgent: 'userAgent',
  campaign: 'campaign',
  createdAt: 'createdAt'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  expires_at: 'expires_at',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  sessionToken: 'sessionToken',
  userId: 'userId',
  expires: 'expires'
};

exports.Prisma.VerificationTokenScalarFieldEnum = {
  identifier: 'identifier',
  token: 'token',
  expires: 'expires'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.UserRole = exports.$Enums.UserRole = {
  SUPER_ADMIN: 'SUPER_ADMIN',
  ORG_ADMIN: 'ORG_ADMIN',
  MANAGER: 'MANAGER',
  STAFF: 'STAFF',
  AMBASSADOR: 'AMBASSADOR'
};

exports.OrgRole = exports.$Enums.OrgRole = {
  Owner: 'Owner',
  Admin: 'Admin',
  Advertiser: 'Advertiser',
  Pipeline: 'Pipeline',
  EmailMarketer: 'EmailMarketer',
  Viewer: 'Viewer'
};

exports.PipelineStage = exports.$Enums.PipelineStage = {
  Lead: 'Lead',
  Contacted: 'Contacted',
  Negotiation: 'Negotiation',
  Closed: 'Closed'
};

exports.InteractionType = exports.$Enums.InteractionType = {
  call: 'call',
  email: 'email',
  meeting: 'meeting',
  note: 'note'
};

exports.InvoiceStatus = exports.$Enums.InvoiceStatus = {
  paid: 'paid',
  unpaid: 'unpaid'
};

exports.CampaignStatus = exports.$Enums.CampaignStatus = {
  ACTIVE: 'ACTIVE',
  PAUSED: 'PAUSED',
  COMPLETED: 'COMPLETED'
};

exports.Prisma.ModelName = {
  User: 'User',
  Organization: 'Organization',
  OrganizationMembership: 'OrganizationMembership',
  Client: 'Client',
  Interaction: 'Interaction',
  Pipeline: 'Pipeline',
  PipelineStageModel: 'PipelineStageModel',
  PipelineCard: 'PipelineCard',
  EmailTemplate: 'EmailTemplate',
  EmailSequence: 'EmailSequence',
  EmailStep: 'EmailStep',
  SequenceTarget: 'SequenceTarget',
  EmailEvent: 'EmailEvent',
  Invoice: 'Invoice',
  Transaction: 'Transaction',
  Subscription: 'Subscription',
  CalendarEvent: 'CalendarEvent',
  Campaign: 'Campaign',
  MindMap: 'MindMap',
  AffiliateLink: 'AffiliateLink',
  AffiliateClick: 'AffiliateClick',
  Account: 'Account',
  Session: 'Session',
  VerificationToken: 'VerificationToken'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
