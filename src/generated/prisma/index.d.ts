
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Organization
 * 
 */
export type Organization = $Result.DefaultSelection<Prisma.$OrganizationPayload>
/**
 * Model OrganizationMembership
 * 
 */
export type OrganizationMembership = $Result.DefaultSelection<Prisma.$OrganizationMembershipPayload>
/**
 * Model Client
 * 
 */
export type Client = $Result.DefaultSelection<Prisma.$ClientPayload>
/**
 * Model Interaction
 * 
 */
export type Interaction = $Result.DefaultSelection<Prisma.$InteractionPayload>
/**
 * Model Pipeline
 * 
 */
export type Pipeline = $Result.DefaultSelection<Prisma.$PipelinePayload>
/**
 * Model PipelineStageModel
 * 
 */
export type PipelineStageModel = $Result.DefaultSelection<Prisma.$PipelineStageModelPayload>
/**
 * Model PipelineCard
 * 
 */
export type PipelineCard = $Result.DefaultSelection<Prisma.$PipelineCardPayload>
/**
 * Model EmailTemplate
 * 
 */
export type EmailTemplate = $Result.DefaultSelection<Prisma.$EmailTemplatePayload>
/**
 * Model EmailSequence
 * 
 */
export type EmailSequence = $Result.DefaultSelection<Prisma.$EmailSequencePayload>
/**
 * Model EmailStep
 * 
 */
export type EmailStep = $Result.DefaultSelection<Prisma.$EmailStepPayload>
/**
 * Model SequenceTarget
 * 
 */
export type SequenceTarget = $Result.DefaultSelection<Prisma.$SequenceTargetPayload>
/**
 * Model EmailEvent
 * 
 */
export type EmailEvent = $Result.DefaultSelection<Prisma.$EmailEventPayload>
/**
 * Model Invoice
 * 
 */
export type Invoice = $Result.DefaultSelection<Prisma.$InvoicePayload>
/**
 * Model Transaction
 * 
 */
export type Transaction = $Result.DefaultSelection<Prisma.$TransactionPayload>
/**
 * Model Subscription
 * 
 */
export type Subscription = $Result.DefaultSelection<Prisma.$SubscriptionPayload>
/**
 * Model CalendarEvent
 * 
 */
export type CalendarEvent = $Result.DefaultSelection<Prisma.$CalendarEventPayload>
/**
 * Model Campaign
 * 
 */
export type Campaign = $Result.DefaultSelection<Prisma.$CampaignPayload>
/**
 * Model MindMap
 * 
 */
export type MindMap = $Result.DefaultSelection<Prisma.$MindMapPayload>
/**
 * Model AffiliateLink
 * 
 */
export type AffiliateLink = $Result.DefaultSelection<Prisma.$AffiliateLinkPayload>
/**
 * Model AffiliateClick
 * 
 */
export type AffiliateClick = $Result.DefaultSelection<Prisma.$AffiliateClickPayload>
/**
 * Model Account
 * 
 */
export type Account = $Result.DefaultSelection<Prisma.$AccountPayload>
/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>
/**
 * Model VerificationToken
 * 
 */
export type VerificationToken = $Result.DefaultSelection<Prisma.$VerificationTokenPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserRole: {
  SUPER_ADMIN: 'SUPER_ADMIN',
  ORG_ADMIN: 'ORG_ADMIN',
  MANAGER: 'MANAGER',
  STAFF: 'STAFF',
  AMBASSADOR: 'AMBASSADOR'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const OrgRole: {
  Owner: 'Owner',
  Admin: 'Admin',
  Advertiser: 'Advertiser',
  Pipeline: 'Pipeline',
  EmailMarketer: 'EmailMarketer',
  Viewer: 'Viewer'
};

export type OrgRole = (typeof OrgRole)[keyof typeof OrgRole]


export const PipelineStage: {
  Lead: 'Lead',
  Contacted: 'Contacted',
  Negotiation: 'Negotiation',
  Closed: 'Closed'
};

export type PipelineStage = (typeof PipelineStage)[keyof typeof PipelineStage]


export const InteractionType: {
  call: 'call',
  email: 'email',
  meeting: 'meeting',
  note: 'note'
};

export type InteractionType = (typeof InteractionType)[keyof typeof InteractionType]


export const InvoiceStatus: {
  paid: 'paid',
  unpaid: 'unpaid'
};

export type InvoiceStatus = (typeof InvoiceStatus)[keyof typeof InvoiceStatus]


export const CampaignStatus: {
  ACTIVE: 'ACTIVE',
  PAUSED: 'PAUSED',
  COMPLETED: 'COMPLETED'
};

export type CampaignStatus = (typeof CampaignStatus)[keyof typeof CampaignStatus]


export const CalendarItemType: {
  EVENT: 'EVENT',
  TASK: 'TASK',
  APPOINTMENT: 'APPOINTMENT'
};

export type CalendarItemType = (typeof CalendarItemType)[keyof typeof CalendarItemType]

}

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type OrgRole = $Enums.OrgRole

export const OrgRole: typeof $Enums.OrgRole

export type PipelineStage = $Enums.PipelineStage

export const PipelineStage: typeof $Enums.PipelineStage

export type InteractionType = $Enums.InteractionType

export const InteractionType: typeof $Enums.InteractionType

export type InvoiceStatus = $Enums.InvoiceStatus

export const InvoiceStatus: typeof $Enums.InvoiceStatus

export type CampaignStatus = $Enums.CampaignStatus

export const CampaignStatus: typeof $Enums.CampaignStatus

export type CalendarItemType = $Enums.CalendarItemType

export const CalendarItemType: typeof $Enums.CalendarItemType

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.organization`: Exposes CRUD operations for the **Organization** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Organizations
    * const organizations = await prisma.organization.findMany()
    * ```
    */
  get organization(): Prisma.OrganizationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.organizationMembership`: Exposes CRUD operations for the **OrganizationMembership** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OrganizationMemberships
    * const organizationMemberships = await prisma.organizationMembership.findMany()
    * ```
    */
  get organizationMembership(): Prisma.OrganizationMembershipDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.client`: Exposes CRUD operations for the **Client** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clients
    * const clients = await prisma.client.findMany()
    * ```
    */
  get client(): Prisma.ClientDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.interaction`: Exposes CRUD operations for the **Interaction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Interactions
    * const interactions = await prisma.interaction.findMany()
    * ```
    */
  get interaction(): Prisma.InteractionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.pipeline`: Exposes CRUD operations for the **Pipeline** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pipelines
    * const pipelines = await prisma.pipeline.findMany()
    * ```
    */
  get pipeline(): Prisma.PipelineDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.pipelineStageModel`: Exposes CRUD operations for the **PipelineStageModel** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PipelineStageModels
    * const pipelineStageModels = await prisma.pipelineStageModel.findMany()
    * ```
    */
  get pipelineStageModel(): Prisma.PipelineStageModelDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.pipelineCard`: Exposes CRUD operations for the **PipelineCard** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PipelineCards
    * const pipelineCards = await prisma.pipelineCard.findMany()
    * ```
    */
  get pipelineCard(): Prisma.PipelineCardDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.emailTemplate`: Exposes CRUD operations for the **EmailTemplate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EmailTemplates
    * const emailTemplates = await prisma.emailTemplate.findMany()
    * ```
    */
  get emailTemplate(): Prisma.EmailTemplateDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.emailSequence`: Exposes CRUD operations for the **EmailSequence** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EmailSequences
    * const emailSequences = await prisma.emailSequence.findMany()
    * ```
    */
  get emailSequence(): Prisma.EmailSequenceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.emailStep`: Exposes CRUD operations for the **EmailStep** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EmailSteps
    * const emailSteps = await prisma.emailStep.findMany()
    * ```
    */
  get emailStep(): Prisma.EmailStepDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.sequenceTarget`: Exposes CRUD operations for the **SequenceTarget** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SequenceTargets
    * const sequenceTargets = await prisma.sequenceTarget.findMany()
    * ```
    */
  get sequenceTarget(): Prisma.SequenceTargetDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.emailEvent`: Exposes CRUD operations for the **EmailEvent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EmailEvents
    * const emailEvents = await prisma.emailEvent.findMany()
    * ```
    */
  get emailEvent(): Prisma.EmailEventDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.invoice`: Exposes CRUD operations for the **Invoice** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Invoices
    * const invoices = await prisma.invoice.findMany()
    * ```
    */
  get invoice(): Prisma.InvoiceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.transaction`: Exposes CRUD operations for the **Transaction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Transactions
    * const transactions = await prisma.transaction.findMany()
    * ```
    */
  get transaction(): Prisma.TransactionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.subscription`: Exposes CRUD operations for the **Subscription** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Subscriptions
    * const subscriptions = await prisma.subscription.findMany()
    * ```
    */
  get subscription(): Prisma.SubscriptionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.calendarEvent`: Exposes CRUD operations for the **CalendarEvent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CalendarEvents
    * const calendarEvents = await prisma.calendarEvent.findMany()
    * ```
    */
  get calendarEvent(): Prisma.CalendarEventDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.campaign`: Exposes CRUD operations for the **Campaign** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Campaigns
    * const campaigns = await prisma.campaign.findMany()
    * ```
    */
  get campaign(): Prisma.CampaignDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.mindMap`: Exposes CRUD operations for the **MindMap** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MindMaps
    * const mindMaps = await prisma.mindMap.findMany()
    * ```
    */
  get mindMap(): Prisma.MindMapDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.affiliateLink`: Exposes CRUD operations for the **AffiliateLink** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AffiliateLinks
    * const affiliateLinks = await prisma.affiliateLink.findMany()
    * ```
    */
  get affiliateLink(): Prisma.AffiliateLinkDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.affiliateClick`: Exposes CRUD operations for the **AffiliateClick** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AffiliateClicks
    * const affiliateClicks = await prisma.affiliateClick.findMany()
    * ```
    */
  get affiliateClick(): Prisma.AffiliateClickDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.verificationToken`: Exposes CRUD operations for the **VerificationToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VerificationTokens
    * const verificationTokens = await prisma.verificationToken.findMany()
    * ```
    */
  get verificationToken(): Prisma.VerificationTokenDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.13.0
   * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Organization: 'Organization',
    OrganizationMembership: 'OrganizationMembership',
    Client: 'Client',
    Interaction: 'Interaction',
    Pipeline: 'Pipeline',
    PipelineStageModel: 'PipelineStageModel',
    PipelineCard: 'PipelineCard',
    EmailTemplate: 'EmailTemplate',
    EmailSequence: 'EmailSequence',
    EmailStep: 'EmailStep',
    SequenceTarget: 'SequenceTarget',
    EmailEvent: 'EmailEvent',
    Invoice: 'Invoice',
    Transaction: 'Transaction',
    Subscription: 'Subscription',
    CalendarEvent: 'CalendarEvent',
    Campaign: 'Campaign',
    MindMap: 'MindMap',
    AffiliateLink: 'AffiliateLink',
    AffiliateClick: 'AffiliateClick',
    Account: 'Account',
    Session: 'Session',
    VerificationToken: 'VerificationToken'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "organization" | "organizationMembership" | "client" | "interaction" | "pipeline" | "pipelineStageModel" | "pipelineCard" | "emailTemplate" | "emailSequence" | "emailStep" | "sequenceTarget" | "emailEvent" | "invoice" | "transaction" | "subscription" | "calendarEvent" | "campaign" | "mindMap" | "affiliateLink" | "affiliateClick" | "account" | "session" | "verificationToken"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Organization: {
        payload: Prisma.$OrganizationPayload<ExtArgs>
        fields: Prisma.OrganizationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrganizationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrganizationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          findFirst: {
            args: Prisma.OrganizationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrganizationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          findMany: {
            args: Prisma.OrganizationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>[]
          }
          create: {
            args: Prisma.OrganizationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          createMany: {
            args: Prisma.OrganizationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OrganizationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>[]
          }
          delete: {
            args: Prisma.OrganizationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          update: {
            args: Prisma.OrganizationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          deleteMany: {
            args: Prisma.OrganizationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrganizationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OrganizationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>[]
          }
          upsert: {
            args: Prisma.OrganizationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          aggregate: {
            args: Prisma.OrganizationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrganization>
          }
          groupBy: {
            args: Prisma.OrganizationGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrganizationGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrganizationCountArgs<ExtArgs>
            result: $Utils.Optional<OrganizationCountAggregateOutputType> | number
          }
        }
      }
      OrganizationMembership: {
        payload: Prisma.$OrganizationMembershipPayload<ExtArgs>
        fields: Prisma.OrganizationMembershipFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrganizationMembershipFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationMembershipPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrganizationMembershipFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationMembershipPayload>
          }
          findFirst: {
            args: Prisma.OrganizationMembershipFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationMembershipPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrganizationMembershipFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationMembershipPayload>
          }
          findMany: {
            args: Prisma.OrganizationMembershipFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationMembershipPayload>[]
          }
          create: {
            args: Prisma.OrganizationMembershipCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationMembershipPayload>
          }
          createMany: {
            args: Prisma.OrganizationMembershipCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OrganizationMembershipCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationMembershipPayload>[]
          }
          delete: {
            args: Prisma.OrganizationMembershipDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationMembershipPayload>
          }
          update: {
            args: Prisma.OrganizationMembershipUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationMembershipPayload>
          }
          deleteMany: {
            args: Prisma.OrganizationMembershipDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrganizationMembershipUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OrganizationMembershipUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationMembershipPayload>[]
          }
          upsert: {
            args: Prisma.OrganizationMembershipUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationMembershipPayload>
          }
          aggregate: {
            args: Prisma.OrganizationMembershipAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrganizationMembership>
          }
          groupBy: {
            args: Prisma.OrganizationMembershipGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrganizationMembershipGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrganizationMembershipCountArgs<ExtArgs>
            result: $Utils.Optional<OrganizationMembershipCountAggregateOutputType> | number
          }
        }
      }
      Client: {
        payload: Prisma.$ClientPayload<ExtArgs>
        fields: Prisma.ClientFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClientFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClientFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          findFirst: {
            args: Prisma.ClientFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClientFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          findMany: {
            args: Prisma.ClientFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>[]
          }
          create: {
            args: Prisma.ClientCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          createMany: {
            args: Prisma.ClientCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ClientCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>[]
          }
          delete: {
            args: Prisma.ClientDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          update: {
            args: Prisma.ClientUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          deleteMany: {
            args: Prisma.ClientDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClientUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ClientUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>[]
          }
          upsert: {
            args: Prisma.ClientUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          aggregate: {
            args: Prisma.ClientAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClient>
          }
          groupBy: {
            args: Prisma.ClientGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClientGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClientCountArgs<ExtArgs>
            result: $Utils.Optional<ClientCountAggregateOutputType> | number
          }
        }
      }
      Interaction: {
        payload: Prisma.$InteractionPayload<ExtArgs>
        fields: Prisma.InteractionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InteractionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InteractionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InteractionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InteractionPayload>
          }
          findFirst: {
            args: Prisma.InteractionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InteractionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InteractionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InteractionPayload>
          }
          findMany: {
            args: Prisma.InteractionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InteractionPayload>[]
          }
          create: {
            args: Prisma.InteractionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InteractionPayload>
          }
          createMany: {
            args: Prisma.InteractionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InteractionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InteractionPayload>[]
          }
          delete: {
            args: Prisma.InteractionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InteractionPayload>
          }
          update: {
            args: Prisma.InteractionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InteractionPayload>
          }
          deleteMany: {
            args: Prisma.InteractionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InteractionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.InteractionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InteractionPayload>[]
          }
          upsert: {
            args: Prisma.InteractionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InteractionPayload>
          }
          aggregate: {
            args: Prisma.InteractionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInteraction>
          }
          groupBy: {
            args: Prisma.InteractionGroupByArgs<ExtArgs>
            result: $Utils.Optional<InteractionGroupByOutputType>[]
          }
          count: {
            args: Prisma.InteractionCountArgs<ExtArgs>
            result: $Utils.Optional<InteractionCountAggregateOutputType> | number
          }
        }
      }
      Pipeline: {
        payload: Prisma.$PipelinePayload<ExtArgs>
        fields: Prisma.PipelineFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PipelineFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PipelinePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PipelineFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PipelinePayload>
          }
          findFirst: {
            args: Prisma.PipelineFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PipelinePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PipelineFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PipelinePayload>
          }
          findMany: {
            args: Prisma.PipelineFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PipelinePayload>[]
          }
          create: {
            args: Prisma.PipelineCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PipelinePayload>
          }
          createMany: {
            args: Prisma.PipelineCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PipelineCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PipelinePayload>[]
          }
          delete: {
            args: Prisma.PipelineDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PipelinePayload>
          }
          update: {
            args: Prisma.PipelineUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PipelinePayload>
          }
          deleteMany: {
            args: Prisma.PipelineDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PipelineUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PipelineUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PipelinePayload>[]
          }
          upsert: {
            args: Prisma.PipelineUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PipelinePayload>
          }
          aggregate: {
            args: Prisma.PipelineAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePipeline>
          }
          groupBy: {
            args: Prisma.PipelineGroupByArgs<ExtArgs>
            result: $Utils.Optional<PipelineGroupByOutputType>[]
          }
          count: {
            args: Prisma.PipelineCountArgs<ExtArgs>
            result: $Utils.Optional<PipelineCountAggregateOutputType> | number
          }
        }
      }
      PipelineStageModel: {
        payload: Prisma.$PipelineStageModelPayload<ExtArgs>
        fields: Prisma.PipelineStageModelFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PipelineStageModelFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PipelineStageModelPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PipelineStageModelFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PipelineStageModelPayload>
          }
          findFirst: {
            args: Prisma.PipelineStageModelFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PipelineStageModelPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PipelineStageModelFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PipelineStageModelPayload>
          }
          findMany: {
            args: Prisma.PipelineStageModelFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PipelineStageModelPayload>[]
          }
          create: {
            args: Prisma.PipelineStageModelCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PipelineStageModelPayload>
          }
          createMany: {
            args: Prisma.PipelineStageModelCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PipelineStageModelCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PipelineStageModelPayload>[]
          }
          delete: {
            args: Prisma.PipelineStageModelDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PipelineStageModelPayload>
          }
          update: {
            args: Prisma.PipelineStageModelUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PipelineStageModelPayload>
          }
          deleteMany: {
            args: Prisma.PipelineStageModelDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PipelineStageModelUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PipelineStageModelUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PipelineStageModelPayload>[]
          }
          upsert: {
            args: Prisma.PipelineStageModelUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PipelineStageModelPayload>
          }
          aggregate: {
            args: Prisma.PipelineStageModelAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePipelineStageModel>
          }
          groupBy: {
            args: Prisma.PipelineStageModelGroupByArgs<ExtArgs>
            result: $Utils.Optional<PipelineStageModelGroupByOutputType>[]
          }
          count: {
            args: Prisma.PipelineStageModelCountArgs<ExtArgs>
            result: $Utils.Optional<PipelineStageModelCountAggregateOutputType> | number
          }
        }
      }
      PipelineCard: {
        payload: Prisma.$PipelineCardPayload<ExtArgs>
        fields: Prisma.PipelineCardFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PipelineCardFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PipelineCardPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PipelineCardFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PipelineCardPayload>
          }
          findFirst: {
            args: Prisma.PipelineCardFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PipelineCardPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PipelineCardFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PipelineCardPayload>
          }
          findMany: {
            args: Prisma.PipelineCardFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PipelineCardPayload>[]
          }
          create: {
            args: Prisma.PipelineCardCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PipelineCardPayload>
          }
          createMany: {
            args: Prisma.PipelineCardCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PipelineCardCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PipelineCardPayload>[]
          }
          delete: {
            args: Prisma.PipelineCardDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PipelineCardPayload>
          }
          update: {
            args: Prisma.PipelineCardUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PipelineCardPayload>
          }
          deleteMany: {
            args: Prisma.PipelineCardDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PipelineCardUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PipelineCardUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PipelineCardPayload>[]
          }
          upsert: {
            args: Prisma.PipelineCardUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PipelineCardPayload>
          }
          aggregate: {
            args: Prisma.PipelineCardAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePipelineCard>
          }
          groupBy: {
            args: Prisma.PipelineCardGroupByArgs<ExtArgs>
            result: $Utils.Optional<PipelineCardGroupByOutputType>[]
          }
          count: {
            args: Prisma.PipelineCardCountArgs<ExtArgs>
            result: $Utils.Optional<PipelineCardCountAggregateOutputType> | number
          }
        }
      }
      EmailTemplate: {
        payload: Prisma.$EmailTemplatePayload<ExtArgs>
        fields: Prisma.EmailTemplateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmailTemplateFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailTemplatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmailTemplateFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailTemplatePayload>
          }
          findFirst: {
            args: Prisma.EmailTemplateFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailTemplatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmailTemplateFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailTemplatePayload>
          }
          findMany: {
            args: Prisma.EmailTemplateFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailTemplatePayload>[]
          }
          create: {
            args: Prisma.EmailTemplateCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailTemplatePayload>
          }
          createMany: {
            args: Prisma.EmailTemplateCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EmailTemplateCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailTemplatePayload>[]
          }
          delete: {
            args: Prisma.EmailTemplateDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailTemplatePayload>
          }
          update: {
            args: Prisma.EmailTemplateUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailTemplatePayload>
          }
          deleteMany: {
            args: Prisma.EmailTemplateDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmailTemplateUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EmailTemplateUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailTemplatePayload>[]
          }
          upsert: {
            args: Prisma.EmailTemplateUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailTemplatePayload>
          }
          aggregate: {
            args: Prisma.EmailTemplateAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmailTemplate>
          }
          groupBy: {
            args: Prisma.EmailTemplateGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmailTemplateGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmailTemplateCountArgs<ExtArgs>
            result: $Utils.Optional<EmailTemplateCountAggregateOutputType> | number
          }
        }
      }
      EmailSequence: {
        payload: Prisma.$EmailSequencePayload<ExtArgs>
        fields: Prisma.EmailSequenceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmailSequenceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailSequencePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmailSequenceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailSequencePayload>
          }
          findFirst: {
            args: Prisma.EmailSequenceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailSequencePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmailSequenceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailSequencePayload>
          }
          findMany: {
            args: Prisma.EmailSequenceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailSequencePayload>[]
          }
          create: {
            args: Prisma.EmailSequenceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailSequencePayload>
          }
          createMany: {
            args: Prisma.EmailSequenceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EmailSequenceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailSequencePayload>[]
          }
          delete: {
            args: Prisma.EmailSequenceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailSequencePayload>
          }
          update: {
            args: Prisma.EmailSequenceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailSequencePayload>
          }
          deleteMany: {
            args: Prisma.EmailSequenceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmailSequenceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EmailSequenceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailSequencePayload>[]
          }
          upsert: {
            args: Prisma.EmailSequenceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailSequencePayload>
          }
          aggregate: {
            args: Prisma.EmailSequenceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmailSequence>
          }
          groupBy: {
            args: Prisma.EmailSequenceGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmailSequenceGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmailSequenceCountArgs<ExtArgs>
            result: $Utils.Optional<EmailSequenceCountAggregateOutputType> | number
          }
        }
      }
      EmailStep: {
        payload: Prisma.$EmailStepPayload<ExtArgs>
        fields: Prisma.EmailStepFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmailStepFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailStepPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmailStepFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailStepPayload>
          }
          findFirst: {
            args: Prisma.EmailStepFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailStepPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmailStepFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailStepPayload>
          }
          findMany: {
            args: Prisma.EmailStepFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailStepPayload>[]
          }
          create: {
            args: Prisma.EmailStepCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailStepPayload>
          }
          createMany: {
            args: Prisma.EmailStepCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EmailStepCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailStepPayload>[]
          }
          delete: {
            args: Prisma.EmailStepDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailStepPayload>
          }
          update: {
            args: Prisma.EmailStepUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailStepPayload>
          }
          deleteMany: {
            args: Prisma.EmailStepDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmailStepUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EmailStepUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailStepPayload>[]
          }
          upsert: {
            args: Prisma.EmailStepUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailStepPayload>
          }
          aggregate: {
            args: Prisma.EmailStepAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmailStep>
          }
          groupBy: {
            args: Prisma.EmailStepGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmailStepGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmailStepCountArgs<ExtArgs>
            result: $Utils.Optional<EmailStepCountAggregateOutputType> | number
          }
        }
      }
      SequenceTarget: {
        payload: Prisma.$SequenceTargetPayload<ExtArgs>
        fields: Prisma.SequenceTargetFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SequenceTargetFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SequenceTargetPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SequenceTargetFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SequenceTargetPayload>
          }
          findFirst: {
            args: Prisma.SequenceTargetFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SequenceTargetPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SequenceTargetFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SequenceTargetPayload>
          }
          findMany: {
            args: Prisma.SequenceTargetFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SequenceTargetPayload>[]
          }
          create: {
            args: Prisma.SequenceTargetCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SequenceTargetPayload>
          }
          createMany: {
            args: Prisma.SequenceTargetCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SequenceTargetCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SequenceTargetPayload>[]
          }
          delete: {
            args: Prisma.SequenceTargetDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SequenceTargetPayload>
          }
          update: {
            args: Prisma.SequenceTargetUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SequenceTargetPayload>
          }
          deleteMany: {
            args: Prisma.SequenceTargetDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SequenceTargetUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SequenceTargetUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SequenceTargetPayload>[]
          }
          upsert: {
            args: Prisma.SequenceTargetUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SequenceTargetPayload>
          }
          aggregate: {
            args: Prisma.SequenceTargetAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSequenceTarget>
          }
          groupBy: {
            args: Prisma.SequenceTargetGroupByArgs<ExtArgs>
            result: $Utils.Optional<SequenceTargetGroupByOutputType>[]
          }
          count: {
            args: Prisma.SequenceTargetCountArgs<ExtArgs>
            result: $Utils.Optional<SequenceTargetCountAggregateOutputType> | number
          }
        }
      }
      EmailEvent: {
        payload: Prisma.$EmailEventPayload<ExtArgs>
        fields: Prisma.EmailEventFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmailEventFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailEventPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmailEventFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailEventPayload>
          }
          findFirst: {
            args: Prisma.EmailEventFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailEventPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmailEventFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailEventPayload>
          }
          findMany: {
            args: Prisma.EmailEventFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailEventPayload>[]
          }
          create: {
            args: Prisma.EmailEventCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailEventPayload>
          }
          createMany: {
            args: Prisma.EmailEventCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EmailEventCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailEventPayload>[]
          }
          delete: {
            args: Prisma.EmailEventDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailEventPayload>
          }
          update: {
            args: Prisma.EmailEventUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailEventPayload>
          }
          deleteMany: {
            args: Prisma.EmailEventDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmailEventUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EmailEventUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailEventPayload>[]
          }
          upsert: {
            args: Prisma.EmailEventUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailEventPayload>
          }
          aggregate: {
            args: Prisma.EmailEventAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmailEvent>
          }
          groupBy: {
            args: Prisma.EmailEventGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmailEventGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmailEventCountArgs<ExtArgs>
            result: $Utils.Optional<EmailEventCountAggregateOutputType> | number
          }
        }
      }
      Invoice: {
        payload: Prisma.$InvoicePayload<ExtArgs>
        fields: Prisma.InvoiceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InvoiceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InvoiceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>
          }
          findFirst: {
            args: Prisma.InvoiceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InvoiceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>
          }
          findMany: {
            args: Prisma.InvoiceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>[]
          }
          create: {
            args: Prisma.InvoiceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>
          }
          createMany: {
            args: Prisma.InvoiceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InvoiceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>[]
          }
          delete: {
            args: Prisma.InvoiceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>
          }
          update: {
            args: Prisma.InvoiceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>
          }
          deleteMany: {
            args: Prisma.InvoiceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InvoiceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.InvoiceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>[]
          }
          upsert: {
            args: Prisma.InvoiceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>
          }
          aggregate: {
            args: Prisma.InvoiceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInvoice>
          }
          groupBy: {
            args: Prisma.InvoiceGroupByArgs<ExtArgs>
            result: $Utils.Optional<InvoiceGroupByOutputType>[]
          }
          count: {
            args: Prisma.InvoiceCountArgs<ExtArgs>
            result: $Utils.Optional<InvoiceCountAggregateOutputType> | number
          }
        }
      }
      Transaction: {
        payload: Prisma.$TransactionPayload<ExtArgs>
        fields: Prisma.TransactionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TransactionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TransactionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          findFirst: {
            args: Prisma.TransactionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TransactionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          findMany: {
            args: Prisma.TransactionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>[]
          }
          create: {
            args: Prisma.TransactionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          createMany: {
            args: Prisma.TransactionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TransactionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>[]
          }
          delete: {
            args: Prisma.TransactionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          update: {
            args: Prisma.TransactionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          deleteMany: {
            args: Prisma.TransactionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TransactionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TransactionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>[]
          }
          upsert: {
            args: Prisma.TransactionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          aggregate: {
            args: Prisma.TransactionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTransaction>
          }
          groupBy: {
            args: Prisma.TransactionGroupByArgs<ExtArgs>
            result: $Utils.Optional<TransactionGroupByOutputType>[]
          }
          count: {
            args: Prisma.TransactionCountArgs<ExtArgs>
            result: $Utils.Optional<TransactionCountAggregateOutputType> | number
          }
        }
      }
      Subscription: {
        payload: Prisma.$SubscriptionPayload<ExtArgs>
        fields: Prisma.SubscriptionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubscriptionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubscriptionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          findFirst: {
            args: Prisma.SubscriptionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubscriptionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          findMany: {
            args: Prisma.SubscriptionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>[]
          }
          create: {
            args: Prisma.SubscriptionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          createMany: {
            args: Prisma.SubscriptionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SubscriptionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>[]
          }
          delete: {
            args: Prisma.SubscriptionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          update: {
            args: Prisma.SubscriptionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          deleteMany: {
            args: Prisma.SubscriptionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SubscriptionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SubscriptionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>[]
          }
          upsert: {
            args: Prisma.SubscriptionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          aggregate: {
            args: Prisma.SubscriptionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSubscription>
          }
          groupBy: {
            args: Prisma.SubscriptionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SubscriptionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubscriptionCountArgs<ExtArgs>
            result: $Utils.Optional<SubscriptionCountAggregateOutputType> | number
          }
        }
      }
      CalendarEvent: {
        payload: Prisma.$CalendarEventPayload<ExtArgs>
        fields: Prisma.CalendarEventFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CalendarEventFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalendarEventPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CalendarEventFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalendarEventPayload>
          }
          findFirst: {
            args: Prisma.CalendarEventFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalendarEventPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CalendarEventFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalendarEventPayload>
          }
          findMany: {
            args: Prisma.CalendarEventFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalendarEventPayload>[]
          }
          create: {
            args: Prisma.CalendarEventCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalendarEventPayload>
          }
          createMany: {
            args: Prisma.CalendarEventCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CalendarEventCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalendarEventPayload>[]
          }
          delete: {
            args: Prisma.CalendarEventDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalendarEventPayload>
          }
          update: {
            args: Prisma.CalendarEventUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalendarEventPayload>
          }
          deleteMany: {
            args: Prisma.CalendarEventDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CalendarEventUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CalendarEventUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalendarEventPayload>[]
          }
          upsert: {
            args: Prisma.CalendarEventUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalendarEventPayload>
          }
          aggregate: {
            args: Prisma.CalendarEventAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCalendarEvent>
          }
          groupBy: {
            args: Prisma.CalendarEventGroupByArgs<ExtArgs>
            result: $Utils.Optional<CalendarEventGroupByOutputType>[]
          }
          count: {
            args: Prisma.CalendarEventCountArgs<ExtArgs>
            result: $Utils.Optional<CalendarEventCountAggregateOutputType> | number
          }
        }
      }
      Campaign: {
        payload: Prisma.$CampaignPayload<ExtArgs>
        fields: Prisma.CampaignFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CampaignFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CampaignFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>
          }
          findFirst: {
            args: Prisma.CampaignFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CampaignFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>
          }
          findMany: {
            args: Prisma.CampaignFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>[]
          }
          create: {
            args: Prisma.CampaignCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>
          }
          createMany: {
            args: Prisma.CampaignCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CampaignCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>[]
          }
          delete: {
            args: Prisma.CampaignDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>
          }
          update: {
            args: Prisma.CampaignUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>
          }
          deleteMany: {
            args: Prisma.CampaignDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CampaignUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CampaignUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>[]
          }
          upsert: {
            args: Prisma.CampaignUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>
          }
          aggregate: {
            args: Prisma.CampaignAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCampaign>
          }
          groupBy: {
            args: Prisma.CampaignGroupByArgs<ExtArgs>
            result: $Utils.Optional<CampaignGroupByOutputType>[]
          }
          count: {
            args: Prisma.CampaignCountArgs<ExtArgs>
            result: $Utils.Optional<CampaignCountAggregateOutputType> | number
          }
        }
      }
      MindMap: {
        payload: Prisma.$MindMapPayload<ExtArgs>
        fields: Prisma.MindMapFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MindMapFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MindMapPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MindMapFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MindMapPayload>
          }
          findFirst: {
            args: Prisma.MindMapFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MindMapPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MindMapFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MindMapPayload>
          }
          findMany: {
            args: Prisma.MindMapFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MindMapPayload>[]
          }
          create: {
            args: Prisma.MindMapCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MindMapPayload>
          }
          createMany: {
            args: Prisma.MindMapCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MindMapCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MindMapPayload>[]
          }
          delete: {
            args: Prisma.MindMapDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MindMapPayload>
          }
          update: {
            args: Prisma.MindMapUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MindMapPayload>
          }
          deleteMany: {
            args: Prisma.MindMapDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MindMapUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MindMapUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MindMapPayload>[]
          }
          upsert: {
            args: Prisma.MindMapUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MindMapPayload>
          }
          aggregate: {
            args: Prisma.MindMapAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMindMap>
          }
          groupBy: {
            args: Prisma.MindMapGroupByArgs<ExtArgs>
            result: $Utils.Optional<MindMapGroupByOutputType>[]
          }
          count: {
            args: Prisma.MindMapCountArgs<ExtArgs>
            result: $Utils.Optional<MindMapCountAggregateOutputType> | number
          }
        }
      }
      AffiliateLink: {
        payload: Prisma.$AffiliateLinkPayload<ExtArgs>
        fields: Prisma.AffiliateLinkFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AffiliateLinkFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AffiliateLinkPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AffiliateLinkFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AffiliateLinkPayload>
          }
          findFirst: {
            args: Prisma.AffiliateLinkFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AffiliateLinkPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AffiliateLinkFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AffiliateLinkPayload>
          }
          findMany: {
            args: Prisma.AffiliateLinkFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AffiliateLinkPayload>[]
          }
          create: {
            args: Prisma.AffiliateLinkCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AffiliateLinkPayload>
          }
          createMany: {
            args: Prisma.AffiliateLinkCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AffiliateLinkCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AffiliateLinkPayload>[]
          }
          delete: {
            args: Prisma.AffiliateLinkDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AffiliateLinkPayload>
          }
          update: {
            args: Prisma.AffiliateLinkUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AffiliateLinkPayload>
          }
          deleteMany: {
            args: Prisma.AffiliateLinkDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AffiliateLinkUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AffiliateLinkUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AffiliateLinkPayload>[]
          }
          upsert: {
            args: Prisma.AffiliateLinkUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AffiliateLinkPayload>
          }
          aggregate: {
            args: Prisma.AffiliateLinkAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAffiliateLink>
          }
          groupBy: {
            args: Prisma.AffiliateLinkGroupByArgs<ExtArgs>
            result: $Utils.Optional<AffiliateLinkGroupByOutputType>[]
          }
          count: {
            args: Prisma.AffiliateLinkCountArgs<ExtArgs>
            result: $Utils.Optional<AffiliateLinkCountAggregateOutputType> | number
          }
        }
      }
      AffiliateClick: {
        payload: Prisma.$AffiliateClickPayload<ExtArgs>
        fields: Prisma.AffiliateClickFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AffiliateClickFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AffiliateClickPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AffiliateClickFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AffiliateClickPayload>
          }
          findFirst: {
            args: Prisma.AffiliateClickFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AffiliateClickPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AffiliateClickFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AffiliateClickPayload>
          }
          findMany: {
            args: Prisma.AffiliateClickFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AffiliateClickPayload>[]
          }
          create: {
            args: Prisma.AffiliateClickCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AffiliateClickPayload>
          }
          createMany: {
            args: Prisma.AffiliateClickCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AffiliateClickCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AffiliateClickPayload>[]
          }
          delete: {
            args: Prisma.AffiliateClickDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AffiliateClickPayload>
          }
          update: {
            args: Prisma.AffiliateClickUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AffiliateClickPayload>
          }
          deleteMany: {
            args: Prisma.AffiliateClickDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AffiliateClickUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AffiliateClickUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AffiliateClickPayload>[]
          }
          upsert: {
            args: Prisma.AffiliateClickUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AffiliateClickPayload>
          }
          aggregate: {
            args: Prisma.AffiliateClickAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAffiliateClick>
          }
          groupBy: {
            args: Prisma.AffiliateClickGroupByArgs<ExtArgs>
            result: $Utils.Optional<AffiliateClickGroupByOutputType>[]
          }
          count: {
            args: Prisma.AffiliateClickCountArgs<ExtArgs>
            result: $Utils.Optional<AffiliateClickCountAggregateOutputType> | number
          }
        }
      }
      Account: {
        payload: Prisma.$AccountPayload<ExtArgs>
        fields: Prisma.AccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findFirst: {
            args: Prisma.AccountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findMany: {
            args: Prisma.AccountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          create: {
            args: Prisma.AccountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          createMany: {
            args: Prisma.AccountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AccountCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          delete: {
            args: Prisma.AccountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          update: {
            args: Prisma.AccountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          deleteMany: {
            args: Prisma.AccountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AccountUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          upsert: {
            args: Prisma.AccountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          aggregate: {
            args: Prisma.AccountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccount>
          }
          groupBy: {
            args: Prisma.AccountGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountCountArgs<ExtArgs>
            result: $Utils.Optional<AccountCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      VerificationToken: {
        payload: Prisma.$VerificationTokenPayload<ExtArgs>
        fields: Prisma.VerificationTokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VerificationTokenFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VerificationTokenFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          findFirst: {
            args: Prisma.VerificationTokenFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VerificationTokenFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          findMany: {
            args: Prisma.VerificationTokenFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[]
          }
          create: {
            args: Prisma.VerificationTokenCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          createMany: {
            args: Prisma.VerificationTokenCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VerificationTokenCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[]
          }
          delete: {
            args: Prisma.VerificationTokenDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          update: {
            args: Prisma.VerificationTokenUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          deleteMany: {
            args: Prisma.VerificationTokenDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VerificationTokenUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.VerificationTokenUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[]
          }
          upsert: {
            args: Prisma.VerificationTokenUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          aggregate: {
            args: Prisma.VerificationTokenAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVerificationToken>
          }
          groupBy: {
            args: Prisma.VerificationTokenGroupByArgs<ExtArgs>
            result: $Utils.Optional<VerificationTokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.VerificationTokenCountArgs<ExtArgs>
            result: $Utils.Optional<VerificationTokenCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    organization?: OrganizationOmit
    organizationMembership?: OrganizationMembershipOmit
    client?: ClientOmit
    interaction?: InteractionOmit
    pipeline?: PipelineOmit
    pipelineStageModel?: PipelineStageModelOmit
    pipelineCard?: PipelineCardOmit
    emailTemplate?: EmailTemplateOmit
    emailSequence?: EmailSequenceOmit
    emailStep?: EmailStepOmit
    sequenceTarget?: SequenceTargetOmit
    emailEvent?: EmailEventOmit
    invoice?: InvoiceOmit
    transaction?: TransactionOmit
    subscription?: SubscriptionOmit
    calendarEvent?: CalendarEventOmit
    campaign?: CampaignOmit
    mindMap?: MindMapOmit
    affiliateLink?: AffiliateLinkOmit
    affiliateClick?: AffiliateClickOmit
    account?: AccountOmit
    session?: SessionOmit
    verificationToken?: VerificationTokenOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    accounts: number
    sessions: number
    memberships: number
    assignedClients: number
    mindmaps: number
    affiliateLinks: number
    calendarEvents: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accounts?: boolean | UserCountOutputTypeCountAccountsArgs
    sessions?: boolean | UserCountOutputTypeCountSessionsArgs
    memberships?: boolean | UserCountOutputTypeCountMembershipsArgs
    assignedClients?: boolean | UserCountOutputTypeCountAssignedClientsArgs
    mindmaps?: boolean | UserCountOutputTypeCountMindmapsArgs
    affiliateLinks?: boolean | UserCountOutputTypeCountAffiliateLinksArgs
    calendarEvents?: boolean | UserCountOutputTypeCountCalendarEventsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMembershipsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrganizationMembershipWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAssignedClientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClientWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMindmapsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MindMapWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAffiliateLinksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AffiliateLinkWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCalendarEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CalendarEventWhereInput
  }


  /**
   * Count Type OrganizationCountOutputType
   */

  export type OrganizationCountOutputType = {
    memberships: number
    clients: number
    pipelines: number
    invoices: number
    mindmaps: number
    affiliateLinks: number
    pipelineCards: number
    transactions: number
    subscriptions: number
    emailSequences: number
    emailTemplates: number
    calendarEvents: number
  }

  export type OrganizationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    memberships?: boolean | OrganizationCountOutputTypeCountMembershipsArgs
    clients?: boolean | OrganizationCountOutputTypeCountClientsArgs
    pipelines?: boolean | OrganizationCountOutputTypeCountPipelinesArgs
    invoices?: boolean | OrganizationCountOutputTypeCountInvoicesArgs
    mindmaps?: boolean | OrganizationCountOutputTypeCountMindmapsArgs
    affiliateLinks?: boolean | OrganizationCountOutputTypeCountAffiliateLinksArgs
    pipelineCards?: boolean | OrganizationCountOutputTypeCountPipelineCardsArgs
    transactions?: boolean | OrganizationCountOutputTypeCountTransactionsArgs
    subscriptions?: boolean | OrganizationCountOutputTypeCountSubscriptionsArgs
    emailSequences?: boolean | OrganizationCountOutputTypeCountEmailSequencesArgs
    emailTemplates?: boolean | OrganizationCountOutputTypeCountEmailTemplatesArgs
    calendarEvents?: boolean | OrganizationCountOutputTypeCountCalendarEventsArgs
  }

  // Custom InputTypes
  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrganizationCountOutputType
     */
    select?: OrganizationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountMembershipsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrganizationMembershipWhereInput
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountClientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClientWhereInput
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountPipelinesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PipelineWhereInput
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountInvoicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvoiceWhereInput
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountMindmapsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MindMapWhereInput
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountAffiliateLinksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AffiliateLinkWhereInput
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountPipelineCardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PipelineCardWhereInput
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountSubscriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubscriptionWhereInput
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountEmailSequencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmailSequenceWhereInput
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountEmailTemplatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmailTemplateWhereInput
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountCalendarEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CalendarEventWhereInput
  }


  /**
   * Count Type OrganizationMembershipCountOutputType
   */

  export type OrganizationMembershipCountOutputType = {
    Client: number
  }

  export type OrganizationMembershipCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Client?: boolean | OrganizationMembershipCountOutputTypeCountClientArgs
  }

  // Custom InputTypes
  /**
   * OrganizationMembershipCountOutputType without action
   */
  export type OrganizationMembershipCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrganizationMembershipCountOutputType
     */
    select?: OrganizationMembershipCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OrganizationMembershipCountOutputType without action
   */
  export type OrganizationMembershipCountOutputTypeCountClientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClientWhereInput
  }


  /**
   * Count Type ClientCountOutputType
   */

  export type ClientCountOutputType = {
    assignedUsers: number
    interactions: number
    invoices: number
    sequences: number
    pipelineCards: number
    campaigns: number
    EmailEvent: number
    Subscription: number
  }

  export type ClientCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignedUsers?: boolean | ClientCountOutputTypeCountAssignedUsersArgs
    interactions?: boolean | ClientCountOutputTypeCountInteractionsArgs
    invoices?: boolean | ClientCountOutputTypeCountInvoicesArgs
    sequences?: boolean | ClientCountOutputTypeCountSequencesArgs
    pipelineCards?: boolean | ClientCountOutputTypeCountPipelineCardsArgs
    campaigns?: boolean | ClientCountOutputTypeCountCampaignsArgs
    EmailEvent?: boolean | ClientCountOutputTypeCountEmailEventArgs
    Subscription?: boolean | ClientCountOutputTypeCountSubscriptionArgs
  }

  // Custom InputTypes
  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientCountOutputType
     */
    select?: ClientCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeCountAssignedUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeCountInteractionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InteractionWhereInput
  }

  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeCountInvoicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvoiceWhereInput
  }

  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeCountSequencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SequenceTargetWhereInput
  }

  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeCountPipelineCardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PipelineCardWhereInput
  }

  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeCountCampaignsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CampaignWhereInput
  }

  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeCountEmailEventArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmailEventWhereInput
  }

  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeCountSubscriptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubscriptionWhereInput
  }


  /**
   * Count Type PipelineCountOutputType
   */

  export type PipelineCountOutputType = {
    stages: number
    pipelineCards: number
  }

  export type PipelineCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stages?: boolean | PipelineCountOutputTypeCountStagesArgs
    pipelineCards?: boolean | PipelineCountOutputTypeCountPipelineCardsArgs
  }

  // Custom InputTypes
  /**
   * PipelineCountOutputType without action
   */
  export type PipelineCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PipelineCountOutputType
     */
    select?: PipelineCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PipelineCountOutputType without action
   */
  export type PipelineCountOutputTypeCountStagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PipelineStageModelWhereInput
  }

  /**
   * PipelineCountOutputType without action
   */
  export type PipelineCountOutputTypeCountPipelineCardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PipelineCardWhereInput
  }


  /**
   * Count Type PipelineStageModelCountOutputType
   */

  export type PipelineStageModelCountOutputType = {
    cards: number
  }

  export type PipelineStageModelCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cards?: boolean | PipelineStageModelCountOutputTypeCountCardsArgs
  }

  // Custom InputTypes
  /**
   * PipelineStageModelCountOutputType without action
   */
  export type PipelineStageModelCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PipelineStageModelCountOutputType
     */
    select?: PipelineStageModelCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PipelineStageModelCountOutputType without action
   */
  export type PipelineStageModelCountOutputTypeCountCardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PipelineCardWhereInput
  }


  /**
   * Count Type EmailSequenceCountOutputType
   */

  export type EmailSequenceCountOutputType = {
    steps: number
    targets: number
    events: number
  }

  export type EmailSequenceCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    steps?: boolean | EmailSequenceCountOutputTypeCountStepsArgs
    targets?: boolean | EmailSequenceCountOutputTypeCountTargetsArgs
    events?: boolean | EmailSequenceCountOutputTypeCountEventsArgs
  }

  // Custom InputTypes
  /**
   * EmailSequenceCountOutputType without action
   */
  export type EmailSequenceCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailSequenceCountOutputType
     */
    select?: EmailSequenceCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EmailSequenceCountOutputType without action
   */
  export type EmailSequenceCountOutputTypeCountStepsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmailStepWhereInput
  }

  /**
   * EmailSequenceCountOutputType without action
   */
  export type EmailSequenceCountOutputTypeCountTargetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SequenceTargetWhereInput
  }

  /**
   * EmailSequenceCountOutputType without action
   */
  export type EmailSequenceCountOutputTypeCountEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmailEventWhereInput
  }


  /**
   * Count Type InvoiceCountOutputType
   */

  export type InvoiceCountOutputType = {
    transactions: number
  }

  export type InvoiceCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    transactions?: boolean | InvoiceCountOutputTypeCountTransactionsArgs
  }

  // Custom InputTypes
  /**
   * InvoiceCountOutputType without action
   */
  export type InvoiceCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceCountOutputType
     */
    select?: InvoiceCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * InvoiceCountOutputType without action
   */
  export type InvoiceCountOutputTypeCountTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
  }


  /**
   * Count Type AffiliateLinkCountOutputType
   */

  export type AffiliateLinkCountOutputType = {
    clicks: number
  }

  export type AffiliateLinkCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clicks?: boolean | AffiliateLinkCountOutputTypeCountClicksArgs
  }

  // Custom InputTypes
  /**
   * AffiliateLinkCountOutputType without action
   */
  export type AffiliateLinkCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AffiliateLinkCountOutputType
     */
    select?: AffiliateLinkCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AffiliateLinkCountOutputType without action
   */
  export type AffiliateLinkCountOutputTypeCountClicksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AffiliateClickWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    password: string | null
    image: string | null
    emailVerified: Date | null
    role: $Enums.UserRole | null
    createdAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    password: string | null
    image: string | null
    emailVerified: Date | null
    role: $Enums.UserRole | null
    createdAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    password: number
    image: number
    emailVerified: number
    role: number
    metadata: number
    createdAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    image?: true
    emailVerified?: true
    role?: true
    createdAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    image?: true
    emailVerified?: true
    role?: true
    createdAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    image?: true
    emailVerified?: true
    role?: true
    metadata?: true
    createdAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    name: string | null
    email: string
    password: string | null
    image: string | null
    emailVerified: Date | null
    role: $Enums.UserRole
    metadata: JsonValue | null
    createdAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    image?: boolean
    emailVerified?: boolean
    role?: boolean
    metadata?: boolean
    createdAt?: boolean
    accounts?: boolean | User$accountsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    memberships?: boolean | User$membershipsArgs<ExtArgs>
    assignedClients?: boolean | User$assignedClientsArgs<ExtArgs>
    mindmaps?: boolean | User$mindmapsArgs<ExtArgs>
    affiliateLinks?: boolean | User$affiliateLinksArgs<ExtArgs>
    calendarEvents?: boolean | User$calendarEventsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    image?: boolean
    emailVerified?: boolean
    role?: boolean
    metadata?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    image?: boolean
    emailVerified?: boolean
    role?: boolean
    metadata?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    image?: boolean
    emailVerified?: boolean
    role?: boolean
    metadata?: boolean
    createdAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "password" | "image" | "emailVerified" | "role" | "metadata" | "createdAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accounts?: boolean | User$accountsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    memberships?: boolean | User$membershipsArgs<ExtArgs>
    assignedClients?: boolean | User$assignedClientsArgs<ExtArgs>
    mindmaps?: boolean | User$mindmapsArgs<ExtArgs>
    affiliateLinks?: boolean | User$affiliateLinksArgs<ExtArgs>
    calendarEvents?: boolean | User$calendarEventsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      accounts: Prisma.$AccountPayload<ExtArgs>[]
      sessions: Prisma.$SessionPayload<ExtArgs>[]
      memberships: Prisma.$OrganizationMembershipPayload<ExtArgs>[]
      assignedClients: Prisma.$ClientPayload<ExtArgs>[]
      mindmaps: Prisma.$MindMapPayload<ExtArgs>[]
      affiliateLinks: Prisma.$AffiliateLinkPayload<ExtArgs>[]
      calendarEvents: Prisma.$CalendarEventPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string | null
      email: string
      password: string | null
      image: string | null
      emailVerified: Date | null
      role: $Enums.UserRole
      metadata: Prisma.JsonValue | null
      createdAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    accounts<T extends User$accountsArgs<ExtArgs> = {}>(args?: Subset<T, User$accountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sessions<T extends User$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    memberships<T extends User$membershipsArgs<ExtArgs> = {}>(args?: Subset<T, User$membershipsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrganizationMembershipPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    assignedClients<T extends User$assignedClientsArgs<ExtArgs> = {}>(args?: Subset<T, User$assignedClientsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    mindmaps<T extends User$mindmapsArgs<ExtArgs> = {}>(args?: Subset<T, User$mindmapsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MindMapPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    affiliateLinks<T extends User$affiliateLinksArgs<ExtArgs> = {}>(args?: Subset<T, User$affiliateLinksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AffiliateLinkPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    calendarEvents<T extends User$calendarEventsArgs<ExtArgs> = {}>(args?: Subset<T, User$calendarEventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CalendarEventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly image: FieldRef<"User", 'String'>
    readonly emailVerified: FieldRef<"User", 'DateTime'>
    readonly role: FieldRef<"User", 'UserRole'>
    readonly metadata: FieldRef<"User", 'Json'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.accounts
   */
  export type User$accountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    cursor?: AccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * User.sessions
   */
  export type User$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * User.memberships
   */
  export type User$membershipsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrganizationMembership
     */
    select?: OrganizationMembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrganizationMembership
     */
    omit?: OrganizationMembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationMembershipInclude<ExtArgs> | null
    where?: OrganizationMembershipWhereInput
    orderBy?: OrganizationMembershipOrderByWithRelationInput | OrganizationMembershipOrderByWithRelationInput[]
    cursor?: OrganizationMembershipWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrganizationMembershipScalarFieldEnum | OrganizationMembershipScalarFieldEnum[]
  }

  /**
   * User.assignedClients
   */
  export type User$assignedClientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    where?: ClientWhereInput
    orderBy?: ClientOrderByWithRelationInput | ClientOrderByWithRelationInput[]
    cursor?: ClientWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClientScalarFieldEnum | ClientScalarFieldEnum[]
  }

  /**
   * User.mindmaps
   */
  export type User$mindmapsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MindMap
     */
    select?: MindMapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MindMap
     */
    omit?: MindMapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MindMapInclude<ExtArgs> | null
    where?: MindMapWhereInput
    orderBy?: MindMapOrderByWithRelationInput | MindMapOrderByWithRelationInput[]
    cursor?: MindMapWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MindMapScalarFieldEnum | MindMapScalarFieldEnum[]
  }

  /**
   * User.affiliateLinks
   */
  export type User$affiliateLinksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AffiliateLink
     */
    select?: AffiliateLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AffiliateLink
     */
    omit?: AffiliateLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AffiliateLinkInclude<ExtArgs> | null
    where?: AffiliateLinkWhereInput
    orderBy?: AffiliateLinkOrderByWithRelationInput | AffiliateLinkOrderByWithRelationInput[]
    cursor?: AffiliateLinkWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AffiliateLinkScalarFieldEnum | AffiliateLinkScalarFieldEnum[]
  }

  /**
   * User.calendarEvents
   */
  export type User$calendarEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalendarEvent
     */
    select?: CalendarEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalendarEvent
     */
    omit?: CalendarEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalendarEventInclude<ExtArgs> | null
    where?: CalendarEventWhereInput
    orderBy?: CalendarEventOrderByWithRelationInput | CalendarEventOrderByWithRelationInput[]
    cursor?: CalendarEventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CalendarEventScalarFieldEnum | CalendarEventScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Organization
   */

  export type AggregateOrganization = {
    _count: OrganizationCountAggregateOutputType | null
    _min: OrganizationMinAggregateOutputType | null
    _max: OrganizationMaxAggregateOutputType | null
  }

  export type OrganizationMinAggregateOutputType = {
    id: string | null
    name: string | null
    subdomain: string | null
    billingPlan: string | null
    createdAt: Date | null
  }

  export type OrganizationMaxAggregateOutputType = {
    id: string | null
    name: string | null
    subdomain: string | null
    billingPlan: string | null
    createdAt: Date | null
  }

  export type OrganizationCountAggregateOutputType = {
    id: number
    name: number
    subdomain: number
    billingPlan: number
    createdAt: number
    _all: number
  }


  export type OrganizationMinAggregateInputType = {
    id?: true
    name?: true
    subdomain?: true
    billingPlan?: true
    createdAt?: true
  }

  export type OrganizationMaxAggregateInputType = {
    id?: true
    name?: true
    subdomain?: true
    billingPlan?: true
    createdAt?: true
  }

  export type OrganizationCountAggregateInputType = {
    id?: true
    name?: true
    subdomain?: true
    billingPlan?: true
    createdAt?: true
    _all?: true
  }

  export type OrganizationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Organization to aggregate.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Organizations
    **/
    _count?: true | OrganizationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrganizationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrganizationMaxAggregateInputType
  }

  export type GetOrganizationAggregateType<T extends OrganizationAggregateArgs> = {
        [P in keyof T & keyof AggregateOrganization]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrganization[P]>
      : GetScalarType<T[P], AggregateOrganization[P]>
  }




  export type OrganizationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrganizationWhereInput
    orderBy?: OrganizationOrderByWithAggregationInput | OrganizationOrderByWithAggregationInput[]
    by: OrganizationScalarFieldEnum[] | OrganizationScalarFieldEnum
    having?: OrganizationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrganizationCountAggregateInputType | true
    _min?: OrganizationMinAggregateInputType
    _max?: OrganizationMaxAggregateInputType
  }

  export type OrganizationGroupByOutputType = {
    id: string
    name: string
    subdomain: string | null
    billingPlan: string | null
    createdAt: Date
    _count: OrganizationCountAggregateOutputType | null
    _min: OrganizationMinAggregateOutputType | null
    _max: OrganizationMaxAggregateOutputType | null
  }

  type GetOrganizationGroupByPayload<T extends OrganizationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrganizationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrganizationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrganizationGroupByOutputType[P]>
            : GetScalarType<T[P], OrganizationGroupByOutputType[P]>
        }
      >
    >


  export type OrganizationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    subdomain?: boolean
    billingPlan?: boolean
    createdAt?: boolean
    memberships?: boolean | Organization$membershipsArgs<ExtArgs>
    clients?: boolean | Organization$clientsArgs<ExtArgs>
    pipelines?: boolean | Organization$pipelinesArgs<ExtArgs>
    invoices?: boolean | Organization$invoicesArgs<ExtArgs>
    mindmaps?: boolean | Organization$mindmapsArgs<ExtArgs>
    affiliateLinks?: boolean | Organization$affiliateLinksArgs<ExtArgs>
    pipelineCards?: boolean | Organization$pipelineCardsArgs<ExtArgs>
    transactions?: boolean | Organization$transactionsArgs<ExtArgs>
    subscriptions?: boolean | Organization$subscriptionsArgs<ExtArgs>
    emailSequences?: boolean | Organization$emailSequencesArgs<ExtArgs>
    emailTemplates?: boolean | Organization$emailTemplatesArgs<ExtArgs>
    calendarEvents?: boolean | Organization$calendarEventsArgs<ExtArgs>
    _count?: boolean | OrganizationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["organization"]>

  export type OrganizationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    subdomain?: boolean
    billingPlan?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["organization"]>

  export type OrganizationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    subdomain?: boolean
    billingPlan?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["organization"]>

  export type OrganizationSelectScalar = {
    id?: boolean
    name?: boolean
    subdomain?: boolean
    billingPlan?: boolean
    createdAt?: boolean
  }

  export type OrganizationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "subdomain" | "billingPlan" | "createdAt", ExtArgs["result"]["organization"]>
  export type OrganizationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    memberships?: boolean | Organization$membershipsArgs<ExtArgs>
    clients?: boolean | Organization$clientsArgs<ExtArgs>
    pipelines?: boolean | Organization$pipelinesArgs<ExtArgs>
    invoices?: boolean | Organization$invoicesArgs<ExtArgs>
    mindmaps?: boolean | Organization$mindmapsArgs<ExtArgs>
    affiliateLinks?: boolean | Organization$affiliateLinksArgs<ExtArgs>
    pipelineCards?: boolean | Organization$pipelineCardsArgs<ExtArgs>
    transactions?: boolean | Organization$transactionsArgs<ExtArgs>
    subscriptions?: boolean | Organization$subscriptionsArgs<ExtArgs>
    emailSequences?: boolean | Organization$emailSequencesArgs<ExtArgs>
    emailTemplates?: boolean | Organization$emailTemplatesArgs<ExtArgs>
    calendarEvents?: boolean | Organization$calendarEventsArgs<ExtArgs>
    _count?: boolean | OrganizationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type OrganizationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type OrganizationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $OrganizationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Organization"
    objects: {
      memberships: Prisma.$OrganizationMembershipPayload<ExtArgs>[]
      clients: Prisma.$ClientPayload<ExtArgs>[]
      pipelines: Prisma.$PipelinePayload<ExtArgs>[]
      invoices: Prisma.$InvoicePayload<ExtArgs>[]
      mindmaps: Prisma.$MindMapPayload<ExtArgs>[]
      affiliateLinks: Prisma.$AffiliateLinkPayload<ExtArgs>[]
      pipelineCards: Prisma.$PipelineCardPayload<ExtArgs>[]
      transactions: Prisma.$TransactionPayload<ExtArgs>[]
      subscriptions: Prisma.$SubscriptionPayload<ExtArgs>[]
      emailSequences: Prisma.$EmailSequencePayload<ExtArgs>[]
      emailTemplates: Prisma.$EmailTemplatePayload<ExtArgs>[]
      calendarEvents: Prisma.$CalendarEventPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      subdomain: string | null
      billingPlan: string | null
      createdAt: Date
    }, ExtArgs["result"]["organization"]>
    composites: {}
  }

  type OrganizationGetPayload<S extends boolean | null | undefined | OrganizationDefaultArgs> = $Result.GetResult<Prisma.$OrganizationPayload, S>

  type OrganizationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OrganizationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OrganizationCountAggregateInputType | true
    }

  export interface OrganizationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Organization'], meta: { name: 'Organization' } }
    /**
     * Find zero or one Organization that matches the filter.
     * @param {OrganizationFindUniqueArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrganizationFindUniqueArgs>(args: SelectSubset<T, OrganizationFindUniqueArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Organization that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OrganizationFindUniqueOrThrowArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrganizationFindUniqueOrThrowArgs>(args: SelectSubset<T, OrganizationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Organization that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationFindFirstArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrganizationFindFirstArgs>(args?: SelectSubset<T, OrganizationFindFirstArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Organization that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationFindFirstOrThrowArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrganizationFindFirstOrThrowArgs>(args?: SelectSubset<T, OrganizationFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Organizations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Organizations
     * const organizations = await prisma.organization.findMany()
     * 
     * // Get first 10 Organizations
     * const organizations = await prisma.organization.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const organizationWithIdOnly = await prisma.organization.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OrganizationFindManyArgs>(args?: SelectSubset<T, OrganizationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Organization.
     * @param {OrganizationCreateArgs} args - Arguments to create a Organization.
     * @example
     * // Create one Organization
     * const Organization = await prisma.organization.create({
     *   data: {
     *     // ... data to create a Organization
     *   }
     * })
     * 
     */
    create<T extends OrganizationCreateArgs>(args: SelectSubset<T, OrganizationCreateArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Organizations.
     * @param {OrganizationCreateManyArgs} args - Arguments to create many Organizations.
     * @example
     * // Create many Organizations
     * const organization = await prisma.organization.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrganizationCreateManyArgs>(args?: SelectSubset<T, OrganizationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Organizations and returns the data saved in the database.
     * @param {OrganizationCreateManyAndReturnArgs} args - Arguments to create many Organizations.
     * @example
     * // Create many Organizations
     * const organization = await prisma.organization.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Organizations and only return the `id`
     * const organizationWithIdOnly = await prisma.organization.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OrganizationCreateManyAndReturnArgs>(args?: SelectSubset<T, OrganizationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Organization.
     * @param {OrganizationDeleteArgs} args - Arguments to delete one Organization.
     * @example
     * // Delete one Organization
     * const Organization = await prisma.organization.delete({
     *   where: {
     *     // ... filter to delete one Organization
     *   }
     * })
     * 
     */
    delete<T extends OrganizationDeleteArgs>(args: SelectSubset<T, OrganizationDeleteArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Organization.
     * @param {OrganizationUpdateArgs} args - Arguments to update one Organization.
     * @example
     * // Update one Organization
     * const organization = await prisma.organization.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrganizationUpdateArgs>(args: SelectSubset<T, OrganizationUpdateArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Organizations.
     * @param {OrganizationDeleteManyArgs} args - Arguments to filter Organizations to delete.
     * @example
     * // Delete a few Organizations
     * const { count } = await prisma.organization.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrganizationDeleteManyArgs>(args?: SelectSubset<T, OrganizationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Organizations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Organizations
     * const organization = await prisma.organization.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrganizationUpdateManyArgs>(args: SelectSubset<T, OrganizationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Organizations and returns the data updated in the database.
     * @param {OrganizationUpdateManyAndReturnArgs} args - Arguments to update many Organizations.
     * @example
     * // Update many Organizations
     * const organization = await prisma.organization.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Organizations and only return the `id`
     * const organizationWithIdOnly = await prisma.organization.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OrganizationUpdateManyAndReturnArgs>(args: SelectSubset<T, OrganizationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Organization.
     * @param {OrganizationUpsertArgs} args - Arguments to update or create a Organization.
     * @example
     * // Update or create a Organization
     * const organization = await prisma.organization.upsert({
     *   create: {
     *     // ... data to create a Organization
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Organization we want to update
     *   }
     * })
     */
    upsert<T extends OrganizationUpsertArgs>(args: SelectSubset<T, OrganizationUpsertArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Organizations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationCountArgs} args - Arguments to filter Organizations to count.
     * @example
     * // Count the number of Organizations
     * const count = await prisma.organization.count({
     *   where: {
     *     // ... the filter for the Organizations we want to count
     *   }
     * })
    **/
    count<T extends OrganizationCountArgs>(
      args?: Subset<T, OrganizationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrganizationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Organization.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrganizationAggregateArgs>(args: Subset<T, OrganizationAggregateArgs>): Prisma.PrismaPromise<GetOrganizationAggregateType<T>>

    /**
     * Group by Organization.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrganizationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrganizationGroupByArgs['orderBy'] }
        : { orderBy?: OrganizationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrganizationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrganizationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Organization model
   */
  readonly fields: OrganizationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Organization.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrganizationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    memberships<T extends Organization$membershipsArgs<ExtArgs> = {}>(args?: Subset<T, Organization$membershipsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrganizationMembershipPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    clients<T extends Organization$clientsArgs<ExtArgs> = {}>(args?: Subset<T, Organization$clientsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    pipelines<T extends Organization$pipelinesArgs<ExtArgs> = {}>(args?: Subset<T, Organization$pipelinesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PipelinePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    invoices<T extends Organization$invoicesArgs<ExtArgs> = {}>(args?: Subset<T, Organization$invoicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    mindmaps<T extends Organization$mindmapsArgs<ExtArgs> = {}>(args?: Subset<T, Organization$mindmapsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MindMapPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    affiliateLinks<T extends Organization$affiliateLinksArgs<ExtArgs> = {}>(args?: Subset<T, Organization$affiliateLinksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AffiliateLinkPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    pipelineCards<T extends Organization$pipelineCardsArgs<ExtArgs> = {}>(args?: Subset<T, Organization$pipelineCardsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PipelineCardPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    transactions<T extends Organization$transactionsArgs<ExtArgs> = {}>(args?: Subset<T, Organization$transactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    subscriptions<T extends Organization$subscriptionsArgs<ExtArgs> = {}>(args?: Subset<T, Organization$subscriptionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    emailSequences<T extends Organization$emailSequencesArgs<ExtArgs> = {}>(args?: Subset<T, Organization$emailSequencesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailSequencePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    emailTemplates<T extends Organization$emailTemplatesArgs<ExtArgs> = {}>(args?: Subset<T, Organization$emailTemplatesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailTemplatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    calendarEvents<T extends Organization$calendarEventsArgs<ExtArgs> = {}>(args?: Subset<T, Organization$calendarEventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CalendarEventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Organization model
   */
  interface OrganizationFieldRefs {
    readonly id: FieldRef<"Organization", 'String'>
    readonly name: FieldRef<"Organization", 'String'>
    readonly subdomain: FieldRef<"Organization", 'String'>
    readonly billingPlan: FieldRef<"Organization", 'String'>
    readonly createdAt: FieldRef<"Organization", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Organization findUnique
   */
  export type OrganizationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organization to fetch.
     */
    where: OrganizationWhereUniqueInput
  }

  /**
   * Organization findUniqueOrThrow
   */
  export type OrganizationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organization to fetch.
     */
    where: OrganizationWhereUniqueInput
  }

  /**
   * Organization findFirst
   */
  export type OrganizationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organization to fetch.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Organizations.
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Organizations.
     */
    distinct?: OrganizationScalarFieldEnum | OrganizationScalarFieldEnum[]
  }

  /**
   * Organization findFirstOrThrow
   */
  export type OrganizationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organization to fetch.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Organizations.
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Organizations.
     */
    distinct?: OrganizationScalarFieldEnum | OrganizationScalarFieldEnum[]
  }

  /**
   * Organization findMany
   */
  export type OrganizationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organizations to fetch.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Organizations.
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    distinct?: OrganizationScalarFieldEnum | OrganizationScalarFieldEnum[]
  }

  /**
   * Organization create
   */
  export type OrganizationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * The data needed to create a Organization.
     */
    data: XOR<OrganizationCreateInput, OrganizationUncheckedCreateInput>
  }

  /**
   * Organization createMany
   */
  export type OrganizationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Organizations.
     */
    data: OrganizationCreateManyInput | OrganizationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Organization createManyAndReturn
   */
  export type OrganizationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * The data used to create many Organizations.
     */
    data: OrganizationCreateManyInput | OrganizationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Organization update
   */
  export type OrganizationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * The data needed to update a Organization.
     */
    data: XOR<OrganizationUpdateInput, OrganizationUncheckedUpdateInput>
    /**
     * Choose, which Organization to update.
     */
    where: OrganizationWhereUniqueInput
  }

  /**
   * Organization updateMany
   */
  export type OrganizationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Organizations.
     */
    data: XOR<OrganizationUpdateManyMutationInput, OrganizationUncheckedUpdateManyInput>
    /**
     * Filter which Organizations to update
     */
    where?: OrganizationWhereInput
    /**
     * Limit how many Organizations to update.
     */
    limit?: number
  }

  /**
   * Organization updateManyAndReturn
   */
  export type OrganizationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * The data used to update Organizations.
     */
    data: XOR<OrganizationUpdateManyMutationInput, OrganizationUncheckedUpdateManyInput>
    /**
     * Filter which Organizations to update
     */
    where?: OrganizationWhereInput
    /**
     * Limit how many Organizations to update.
     */
    limit?: number
  }

  /**
   * Organization upsert
   */
  export type OrganizationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * The filter to search for the Organization to update in case it exists.
     */
    where: OrganizationWhereUniqueInput
    /**
     * In case the Organization found by the `where` argument doesn't exist, create a new Organization with this data.
     */
    create: XOR<OrganizationCreateInput, OrganizationUncheckedCreateInput>
    /**
     * In case the Organization was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrganizationUpdateInput, OrganizationUncheckedUpdateInput>
  }

  /**
   * Organization delete
   */
  export type OrganizationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter which Organization to delete.
     */
    where: OrganizationWhereUniqueInput
  }

  /**
   * Organization deleteMany
   */
  export type OrganizationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Organizations to delete
     */
    where?: OrganizationWhereInput
    /**
     * Limit how many Organizations to delete.
     */
    limit?: number
  }

  /**
   * Organization.memberships
   */
  export type Organization$membershipsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrganizationMembership
     */
    select?: OrganizationMembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrganizationMembership
     */
    omit?: OrganizationMembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationMembershipInclude<ExtArgs> | null
    where?: OrganizationMembershipWhereInput
    orderBy?: OrganizationMembershipOrderByWithRelationInput | OrganizationMembershipOrderByWithRelationInput[]
    cursor?: OrganizationMembershipWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrganizationMembershipScalarFieldEnum | OrganizationMembershipScalarFieldEnum[]
  }

  /**
   * Organization.clients
   */
  export type Organization$clientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    where?: ClientWhereInput
    orderBy?: ClientOrderByWithRelationInput | ClientOrderByWithRelationInput[]
    cursor?: ClientWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClientScalarFieldEnum | ClientScalarFieldEnum[]
  }

  /**
   * Organization.pipelines
   */
  export type Organization$pipelinesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pipeline
     */
    select?: PipelineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pipeline
     */
    omit?: PipelineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PipelineInclude<ExtArgs> | null
    where?: PipelineWhereInput
    orderBy?: PipelineOrderByWithRelationInput | PipelineOrderByWithRelationInput[]
    cursor?: PipelineWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PipelineScalarFieldEnum | PipelineScalarFieldEnum[]
  }

  /**
   * Organization.invoices
   */
  export type Organization$invoicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    where?: InvoiceWhereInput
    orderBy?: InvoiceOrderByWithRelationInput | InvoiceOrderByWithRelationInput[]
    cursor?: InvoiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InvoiceScalarFieldEnum | InvoiceScalarFieldEnum[]
  }

  /**
   * Organization.mindmaps
   */
  export type Organization$mindmapsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MindMap
     */
    select?: MindMapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MindMap
     */
    omit?: MindMapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MindMapInclude<ExtArgs> | null
    where?: MindMapWhereInput
    orderBy?: MindMapOrderByWithRelationInput | MindMapOrderByWithRelationInput[]
    cursor?: MindMapWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MindMapScalarFieldEnum | MindMapScalarFieldEnum[]
  }

  /**
   * Organization.affiliateLinks
   */
  export type Organization$affiliateLinksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AffiliateLink
     */
    select?: AffiliateLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AffiliateLink
     */
    omit?: AffiliateLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AffiliateLinkInclude<ExtArgs> | null
    where?: AffiliateLinkWhereInput
    orderBy?: AffiliateLinkOrderByWithRelationInput | AffiliateLinkOrderByWithRelationInput[]
    cursor?: AffiliateLinkWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AffiliateLinkScalarFieldEnum | AffiliateLinkScalarFieldEnum[]
  }

  /**
   * Organization.pipelineCards
   */
  export type Organization$pipelineCardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PipelineCard
     */
    select?: PipelineCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PipelineCard
     */
    omit?: PipelineCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PipelineCardInclude<ExtArgs> | null
    where?: PipelineCardWhereInput
    orderBy?: PipelineCardOrderByWithRelationInput | PipelineCardOrderByWithRelationInput[]
    cursor?: PipelineCardWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PipelineCardScalarFieldEnum | PipelineCardScalarFieldEnum[]
  }

  /**
   * Organization.transactions
   */
  export type Organization$transactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    cursor?: TransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Organization.subscriptions
   */
  export type Organization$subscriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    where?: SubscriptionWhereInput
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    cursor?: SubscriptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }

  /**
   * Organization.emailSequences
   */
  export type Organization$emailSequencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailSequence
     */
    select?: EmailSequenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailSequence
     */
    omit?: EmailSequenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailSequenceInclude<ExtArgs> | null
    where?: EmailSequenceWhereInput
    orderBy?: EmailSequenceOrderByWithRelationInput | EmailSequenceOrderByWithRelationInput[]
    cursor?: EmailSequenceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmailSequenceScalarFieldEnum | EmailSequenceScalarFieldEnum[]
  }

  /**
   * Organization.emailTemplates
   */
  export type Organization$emailTemplatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailTemplate
     */
    select?: EmailTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailTemplate
     */
    omit?: EmailTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailTemplateInclude<ExtArgs> | null
    where?: EmailTemplateWhereInput
    orderBy?: EmailTemplateOrderByWithRelationInput | EmailTemplateOrderByWithRelationInput[]
    cursor?: EmailTemplateWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmailTemplateScalarFieldEnum | EmailTemplateScalarFieldEnum[]
  }

  /**
   * Organization.calendarEvents
   */
  export type Organization$calendarEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalendarEvent
     */
    select?: CalendarEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalendarEvent
     */
    omit?: CalendarEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalendarEventInclude<ExtArgs> | null
    where?: CalendarEventWhereInput
    orderBy?: CalendarEventOrderByWithRelationInput | CalendarEventOrderByWithRelationInput[]
    cursor?: CalendarEventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CalendarEventScalarFieldEnum | CalendarEventScalarFieldEnum[]
  }

  /**
   * Organization without action
   */
  export type OrganizationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
  }


  /**
   * Model OrganizationMembership
   */

  export type AggregateOrganizationMembership = {
    _count: OrganizationMembershipCountAggregateOutputType | null
    _min: OrganizationMembershipMinAggregateOutputType | null
    _max: OrganizationMembershipMaxAggregateOutputType | null
  }

  export type OrganizationMembershipMinAggregateOutputType = {
    id: string | null
    organizationId: string | null
    userId: string | null
    role: $Enums.OrgRole | null
  }

  export type OrganizationMembershipMaxAggregateOutputType = {
    id: string | null
    organizationId: string | null
    userId: string | null
    role: $Enums.OrgRole | null
  }

  export type OrganizationMembershipCountAggregateOutputType = {
    id: number
    organizationId: number
    userId: number
    role: number
    _all: number
  }


  export type OrganizationMembershipMinAggregateInputType = {
    id?: true
    organizationId?: true
    userId?: true
    role?: true
  }

  export type OrganizationMembershipMaxAggregateInputType = {
    id?: true
    organizationId?: true
    userId?: true
    role?: true
  }

  export type OrganizationMembershipCountAggregateInputType = {
    id?: true
    organizationId?: true
    userId?: true
    role?: true
    _all?: true
  }

  export type OrganizationMembershipAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrganizationMembership to aggregate.
     */
    where?: OrganizationMembershipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrganizationMemberships to fetch.
     */
    orderBy?: OrganizationMembershipOrderByWithRelationInput | OrganizationMembershipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrganizationMembershipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrganizationMemberships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrganizationMemberships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OrganizationMemberships
    **/
    _count?: true | OrganizationMembershipCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrganizationMembershipMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrganizationMembershipMaxAggregateInputType
  }

  export type GetOrganizationMembershipAggregateType<T extends OrganizationMembershipAggregateArgs> = {
        [P in keyof T & keyof AggregateOrganizationMembership]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrganizationMembership[P]>
      : GetScalarType<T[P], AggregateOrganizationMembership[P]>
  }




  export type OrganizationMembershipGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrganizationMembershipWhereInput
    orderBy?: OrganizationMembershipOrderByWithAggregationInput | OrganizationMembershipOrderByWithAggregationInput[]
    by: OrganizationMembershipScalarFieldEnum[] | OrganizationMembershipScalarFieldEnum
    having?: OrganizationMembershipScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrganizationMembershipCountAggregateInputType | true
    _min?: OrganizationMembershipMinAggregateInputType
    _max?: OrganizationMembershipMaxAggregateInputType
  }

  export type OrganizationMembershipGroupByOutputType = {
    id: string
    organizationId: string
    userId: string
    role: $Enums.OrgRole
    _count: OrganizationMembershipCountAggregateOutputType | null
    _min: OrganizationMembershipMinAggregateOutputType | null
    _max: OrganizationMembershipMaxAggregateOutputType | null
  }

  type GetOrganizationMembershipGroupByPayload<T extends OrganizationMembershipGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrganizationMembershipGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrganizationMembershipGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrganizationMembershipGroupByOutputType[P]>
            : GetScalarType<T[P], OrganizationMembershipGroupByOutputType[P]>
        }
      >
    >


  export type OrganizationMembershipSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    userId?: boolean
    role?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    Client?: boolean | OrganizationMembership$ClientArgs<ExtArgs>
    _count?: boolean | OrganizationMembershipCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["organizationMembership"]>

  export type OrganizationMembershipSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    userId?: boolean
    role?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["organizationMembership"]>

  export type OrganizationMembershipSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    userId?: boolean
    role?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["organizationMembership"]>

  export type OrganizationMembershipSelectScalar = {
    id?: boolean
    organizationId?: boolean
    userId?: boolean
    role?: boolean
  }

  export type OrganizationMembershipOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "organizationId" | "userId" | "role", ExtArgs["result"]["organizationMembership"]>
  export type OrganizationMembershipInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    Client?: boolean | OrganizationMembership$ClientArgs<ExtArgs>
    _count?: boolean | OrganizationMembershipCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type OrganizationMembershipIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type OrganizationMembershipIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $OrganizationMembershipPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OrganizationMembership"
    objects: {
      organization: Prisma.$OrganizationPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
      Client: Prisma.$ClientPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      organizationId: string
      userId: string
      role: $Enums.OrgRole
    }, ExtArgs["result"]["organizationMembership"]>
    composites: {}
  }

  type OrganizationMembershipGetPayload<S extends boolean | null | undefined | OrganizationMembershipDefaultArgs> = $Result.GetResult<Prisma.$OrganizationMembershipPayload, S>

  type OrganizationMembershipCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OrganizationMembershipFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OrganizationMembershipCountAggregateInputType | true
    }

  export interface OrganizationMembershipDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OrganizationMembership'], meta: { name: 'OrganizationMembership' } }
    /**
     * Find zero or one OrganizationMembership that matches the filter.
     * @param {OrganizationMembershipFindUniqueArgs} args - Arguments to find a OrganizationMembership
     * @example
     * // Get one OrganizationMembership
     * const organizationMembership = await prisma.organizationMembership.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrganizationMembershipFindUniqueArgs>(args: SelectSubset<T, OrganizationMembershipFindUniqueArgs<ExtArgs>>): Prisma__OrganizationMembershipClient<$Result.GetResult<Prisma.$OrganizationMembershipPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one OrganizationMembership that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OrganizationMembershipFindUniqueOrThrowArgs} args - Arguments to find a OrganizationMembership
     * @example
     * // Get one OrganizationMembership
     * const organizationMembership = await prisma.organizationMembership.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrganizationMembershipFindUniqueOrThrowArgs>(args: SelectSubset<T, OrganizationMembershipFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrganizationMembershipClient<$Result.GetResult<Prisma.$OrganizationMembershipPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OrganizationMembership that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationMembershipFindFirstArgs} args - Arguments to find a OrganizationMembership
     * @example
     * // Get one OrganizationMembership
     * const organizationMembership = await prisma.organizationMembership.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrganizationMembershipFindFirstArgs>(args?: SelectSubset<T, OrganizationMembershipFindFirstArgs<ExtArgs>>): Prisma__OrganizationMembershipClient<$Result.GetResult<Prisma.$OrganizationMembershipPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OrganizationMembership that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationMembershipFindFirstOrThrowArgs} args - Arguments to find a OrganizationMembership
     * @example
     * // Get one OrganizationMembership
     * const organizationMembership = await prisma.organizationMembership.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrganizationMembershipFindFirstOrThrowArgs>(args?: SelectSubset<T, OrganizationMembershipFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrganizationMembershipClient<$Result.GetResult<Prisma.$OrganizationMembershipPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more OrganizationMemberships that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationMembershipFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OrganizationMemberships
     * const organizationMemberships = await prisma.organizationMembership.findMany()
     * 
     * // Get first 10 OrganizationMemberships
     * const organizationMemberships = await prisma.organizationMembership.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const organizationMembershipWithIdOnly = await prisma.organizationMembership.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OrganizationMembershipFindManyArgs>(args?: SelectSubset<T, OrganizationMembershipFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrganizationMembershipPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a OrganizationMembership.
     * @param {OrganizationMembershipCreateArgs} args - Arguments to create a OrganizationMembership.
     * @example
     * // Create one OrganizationMembership
     * const OrganizationMembership = await prisma.organizationMembership.create({
     *   data: {
     *     // ... data to create a OrganizationMembership
     *   }
     * })
     * 
     */
    create<T extends OrganizationMembershipCreateArgs>(args: SelectSubset<T, OrganizationMembershipCreateArgs<ExtArgs>>): Prisma__OrganizationMembershipClient<$Result.GetResult<Prisma.$OrganizationMembershipPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many OrganizationMemberships.
     * @param {OrganizationMembershipCreateManyArgs} args - Arguments to create many OrganizationMemberships.
     * @example
     * // Create many OrganizationMemberships
     * const organizationMembership = await prisma.organizationMembership.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrganizationMembershipCreateManyArgs>(args?: SelectSubset<T, OrganizationMembershipCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many OrganizationMemberships and returns the data saved in the database.
     * @param {OrganizationMembershipCreateManyAndReturnArgs} args - Arguments to create many OrganizationMemberships.
     * @example
     * // Create many OrganizationMemberships
     * const organizationMembership = await prisma.organizationMembership.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many OrganizationMemberships and only return the `id`
     * const organizationMembershipWithIdOnly = await prisma.organizationMembership.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OrganizationMembershipCreateManyAndReturnArgs>(args?: SelectSubset<T, OrganizationMembershipCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrganizationMembershipPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a OrganizationMembership.
     * @param {OrganizationMembershipDeleteArgs} args - Arguments to delete one OrganizationMembership.
     * @example
     * // Delete one OrganizationMembership
     * const OrganizationMembership = await prisma.organizationMembership.delete({
     *   where: {
     *     // ... filter to delete one OrganizationMembership
     *   }
     * })
     * 
     */
    delete<T extends OrganizationMembershipDeleteArgs>(args: SelectSubset<T, OrganizationMembershipDeleteArgs<ExtArgs>>): Prisma__OrganizationMembershipClient<$Result.GetResult<Prisma.$OrganizationMembershipPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one OrganizationMembership.
     * @param {OrganizationMembershipUpdateArgs} args - Arguments to update one OrganizationMembership.
     * @example
     * // Update one OrganizationMembership
     * const organizationMembership = await prisma.organizationMembership.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrganizationMembershipUpdateArgs>(args: SelectSubset<T, OrganizationMembershipUpdateArgs<ExtArgs>>): Prisma__OrganizationMembershipClient<$Result.GetResult<Prisma.$OrganizationMembershipPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more OrganizationMemberships.
     * @param {OrganizationMembershipDeleteManyArgs} args - Arguments to filter OrganizationMemberships to delete.
     * @example
     * // Delete a few OrganizationMemberships
     * const { count } = await prisma.organizationMembership.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrganizationMembershipDeleteManyArgs>(args?: SelectSubset<T, OrganizationMembershipDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrganizationMemberships.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationMembershipUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OrganizationMemberships
     * const organizationMembership = await prisma.organizationMembership.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrganizationMembershipUpdateManyArgs>(args: SelectSubset<T, OrganizationMembershipUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrganizationMemberships and returns the data updated in the database.
     * @param {OrganizationMembershipUpdateManyAndReturnArgs} args - Arguments to update many OrganizationMemberships.
     * @example
     * // Update many OrganizationMemberships
     * const organizationMembership = await prisma.organizationMembership.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more OrganizationMemberships and only return the `id`
     * const organizationMembershipWithIdOnly = await prisma.organizationMembership.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OrganizationMembershipUpdateManyAndReturnArgs>(args: SelectSubset<T, OrganizationMembershipUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrganizationMembershipPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one OrganizationMembership.
     * @param {OrganizationMembershipUpsertArgs} args - Arguments to update or create a OrganizationMembership.
     * @example
     * // Update or create a OrganizationMembership
     * const organizationMembership = await prisma.organizationMembership.upsert({
     *   create: {
     *     // ... data to create a OrganizationMembership
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OrganizationMembership we want to update
     *   }
     * })
     */
    upsert<T extends OrganizationMembershipUpsertArgs>(args: SelectSubset<T, OrganizationMembershipUpsertArgs<ExtArgs>>): Prisma__OrganizationMembershipClient<$Result.GetResult<Prisma.$OrganizationMembershipPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of OrganizationMemberships.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationMembershipCountArgs} args - Arguments to filter OrganizationMemberships to count.
     * @example
     * // Count the number of OrganizationMemberships
     * const count = await prisma.organizationMembership.count({
     *   where: {
     *     // ... the filter for the OrganizationMemberships we want to count
     *   }
     * })
    **/
    count<T extends OrganizationMembershipCountArgs>(
      args?: Subset<T, OrganizationMembershipCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrganizationMembershipCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OrganizationMembership.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationMembershipAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrganizationMembershipAggregateArgs>(args: Subset<T, OrganizationMembershipAggregateArgs>): Prisma.PrismaPromise<GetOrganizationMembershipAggregateType<T>>

    /**
     * Group by OrganizationMembership.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationMembershipGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrganizationMembershipGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrganizationMembershipGroupByArgs['orderBy'] }
        : { orderBy?: OrganizationMembershipGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrganizationMembershipGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrganizationMembershipGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OrganizationMembership model
   */
  readonly fields: OrganizationMembershipFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OrganizationMembership.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrganizationMembershipClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    Client<T extends OrganizationMembership$ClientArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationMembership$ClientArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OrganizationMembership model
   */
  interface OrganizationMembershipFieldRefs {
    readonly id: FieldRef<"OrganizationMembership", 'String'>
    readonly organizationId: FieldRef<"OrganizationMembership", 'String'>
    readonly userId: FieldRef<"OrganizationMembership", 'String'>
    readonly role: FieldRef<"OrganizationMembership", 'OrgRole'>
  }
    

  // Custom InputTypes
  /**
   * OrganizationMembership findUnique
   */
  export type OrganizationMembershipFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrganizationMembership
     */
    select?: OrganizationMembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrganizationMembership
     */
    omit?: OrganizationMembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationMembershipInclude<ExtArgs> | null
    /**
     * Filter, which OrganizationMembership to fetch.
     */
    where: OrganizationMembershipWhereUniqueInput
  }

  /**
   * OrganizationMembership findUniqueOrThrow
   */
  export type OrganizationMembershipFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrganizationMembership
     */
    select?: OrganizationMembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrganizationMembership
     */
    omit?: OrganizationMembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationMembershipInclude<ExtArgs> | null
    /**
     * Filter, which OrganizationMembership to fetch.
     */
    where: OrganizationMembershipWhereUniqueInput
  }

  /**
   * OrganizationMembership findFirst
   */
  export type OrganizationMembershipFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrganizationMembership
     */
    select?: OrganizationMembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrganizationMembership
     */
    omit?: OrganizationMembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationMembershipInclude<ExtArgs> | null
    /**
     * Filter, which OrganizationMembership to fetch.
     */
    where?: OrganizationMembershipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrganizationMemberships to fetch.
     */
    orderBy?: OrganizationMembershipOrderByWithRelationInput | OrganizationMembershipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrganizationMemberships.
     */
    cursor?: OrganizationMembershipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrganizationMemberships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrganizationMemberships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrganizationMemberships.
     */
    distinct?: OrganizationMembershipScalarFieldEnum | OrganizationMembershipScalarFieldEnum[]
  }

  /**
   * OrganizationMembership findFirstOrThrow
   */
  export type OrganizationMembershipFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrganizationMembership
     */
    select?: OrganizationMembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrganizationMembership
     */
    omit?: OrganizationMembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationMembershipInclude<ExtArgs> | null
    /**
     * Filter, which OrganizationMembership to fetch.
     */
    where?: OrganizationMembershipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrganizationMemberships to fetch.
     */
    orderBy?: OrganizationMembershipOrderByWithRelationInput | OrganizationMembershipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrganizationMemberships.
     */
    cursor?: OrganizationMembershipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrganizationMemberships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrganizationMemberships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrganizationMemberships.
     */
    distinct?: OrganizationMembershipScalarFieldEnum | OrganizationMembershipScalarFieldEnum[]
  }

  /**
   * OrganizationMembership findMany
   */
  export type OrganizationMembershipFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrganizationMembership
     */
    select?: OrganizationMembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrganizationMembership
     */
    omit?: OrganizationMembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationMembershipInclude<ExtArgs> | null
    /**
     * Filter, which OrganizationMemberships to fetch.
     */
    where?: OrganizationMembershipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrganizationMemberships to fetch.
     */
    orderBy?: OrganizationMembershipOrderByWithRelationInput | OrganizationMembershipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OrganizationMemberships.
     */
    cursor?: OrganizationMembershipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrganizationMemberships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrganizationMemberships.
     */
    skip?: number
    distinct?: OrganizationMembershipScalarFieldEnum | OrganizationMembershipScalarFieldEnum[]
  }

  /**
   * OrganizationMembership create
   */
  export type OrganizationMembershipCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrganizationMembership
     */
    select?: OrganizationMembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrganizationMembership
     */
    omit?: OrganizationMembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationMembershipInclude<ExtArgs> | null
    /**
     * The data needed to create a OrganizationMembership.
     */
    data: XOR<OrganizationMembershipCreateInput, OrganizationMembershipUncheckedCreateInput>
  }

  /**
   * OrganizationMembership createMany
   */
  export type OrganizationMembershipCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OrganizationMemberships.
     */
    data: OrganizationMembershipCreateManyInput | OrganizationMembershipCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OrganizationMembership createManyAndReturn
   */
  export type OrganizationMembershipCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrganizationMembership
     */
    select?: OrganizationMembershipSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OrganizationMembership
     */
    omit?: OrganizationMembershipOmit<ExtArgs> | null
    /**
     * The data used to create many OrganizationMemberships.
     */
    data: OrganizationMembershipCreateManyInput | OrganizationMembershipCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationMembershipIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * OrganizationMembership update
   */
  export type OrganizationMembershipUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrganizationMembership
     */
    select?: OrganizationMembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrganizationMembership
     */
    omit?: OrganizationMembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationMembershipInclude<ExtArgs> | null
    /**
     * The data needed to update a OrganizationMembership.
     */
    data: XOR<OrganizationMembershipUpdateInput, OrganizationMembershipUncheckedUpdateInput>
    /**
     * Choose, which OrganizationMembership to update.
     */
    where: OrganizationMembershipWhereUniqueInput
  }

  /**
   * OrganizationMembership updateMany
   */
  export type OrganizationMembershipUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OrganizationMemberships.
     */
    data: XOR<OrganizationMembershipUpdateManyMutationInput, OrganizationMembershipUncheckedUpdateManyInput>
    /**
     * Filter which OrganizationMemberships to update
     */
    where?: OrganizationMembershipWhereInput
    /**
     * Limit how many OrganizationMemberships to update.
     */
    limit?: number
  }

  /**
   * OrganizationMembership updateManyAndReturn
   */
  export type OrganizationMembershipUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrganizationMembership
     */
    select?: OrganizationMembershipSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OrganizationMembership
     */
    omit?: OrganizationMembershipOmit<ExtArgs> | null
    /**
     * The data used to update OrganizationMemberships.
     */
    data: XOR<OrganizationMembershipUpdateManyMutationInput, OrganizationMembershipUncheckedUpdateManyInput>
    /**
     * Filter which OrganizationMemberships to update
     */
    where?: OrganizationMembershipWhereInput
    /**
     * Limit how many OrganizationMemberships to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationMembershipIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * OrganizationMembership upsert
   */
  export type OrganizationMembershipUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrganizationMembership
     */
    select?: OrganizationMembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrganizationMembership
     */
    omit?: OrganizationMembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationMembershipInclude<ExtArgs> | null
    /**
     * The filter to search for the OrganizationMembership to update in case it exists.
     */
    where: OrganizationMembershipWhereUniqueInput
    /**
     * In case the OrganizationMembership found by the `where` argument doesn't exist, create a new OrganizationMembership with this data.
     */
    create: XOR<OrganizationMembershipCreateInput, OrganizationMembershipUncheckedCreateInput>
    /**
     * In case the OrganizationMembership was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrganizationMembershipUpdateInput, OrganizationMembershipUncheckedUpdateInput>
  }

  /**
   * OrganizationMembership delete
   */
  export type OrganizationMembershipDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrganizationMembership
     */
    select?: OrganizationMembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrganizationMembership
     */
    omit?: OrganizationMembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationMembershipInclude<ExtArgs> | null
    /**
     * Filter which OrganizationMembership to delete.
     */
    where: OrganizationMembershipWhereUniqueInput
  }

  /**
   * OrganizationMembership deleteMany
   */
  export type OrganizationMembershipDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrganizationMemberships to delete
     */
    where?: OrganizationMembershipWhereInput
    /**
     * Limit how many OrganizationMemberships to delete.
     */
    limit?: number
  }

  /**
   * OrganizationMembership.Client
   */
  export type OrganizationMembership$ClientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    where?: ClientWhereInput
    orderBy?: ClientOrderByWithRelationInput | ClientOrderByWithRelationInput[]
    cursor?: ClientWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClientScalarFieldEnum | ClientScalarFieldEnum[]
  }

  /**
   * OrganizationMembership without action
   */
  export type OrganizationMembershipDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrganizationMembership
     */
    select?: OrganizationMembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrganizationMembership
     */
    omit?: OrganizationMembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationMembershipInclude<ExtArgs> | null
  }


  /**
   * Model Client
   */

  export type AggregateClient = {
    _count: ClientCountAggregateOutputType | null
    _avg: ClientAvgAggregateOutputType | null
    _sum: ClientSumAggregateOutputType | null
    _min: ClientMinAggregateOutputType | null
    _max: ClientMaxAggregateOutputType | null
  }

  export type ClientAvgAggregateOutputType = {
    valueUsd: number | null
  }

  export type ClientSumAggregateOutputType = {
    valueUsd: number | null
  }

  export type ClientMinAggregateOutputType = {
    id: string | null
    organizationId: string | null
    name: string | null
    email: string | null
    phone: string | null
    company: string | null
    stage: $Enums.PipelineStage | null
    valueUsd: number | null
    isPaid: boolean | null
    isOnboarded: boolean | null
    createdAt: Date | null
    assignedToMembershipId: string | null
  }

  export type ClientMaxAggregateOutputType = {
    id: string | null
    organizationId: string | null
    name: string | null
    email: string | null
    phone: string | null
    company: string | null
    stage: $Enums.PipelineStage | null
    valueUsd: number | null
    isPaid: boolean | null
    isOnboarded: boolean | null
    createdAt: Date | null
    assignedToMembershipId: string | null
  }

  export type ClientCountAggregateOutputType = {
    id: number
    organizationId: number
    name: number
    email: number
    phone: number
    company: number
    stage: number
    valueUsd: number
    isPaid: number
    isOnboarded: number
    competitors: number
    notes: number
    createdAt: number
    assignedToMembershipId: number
    _all: number
  }


  export type ClientAvgAggregateInputType = {
    valueUsd?: true
  }

  export type ClientSumAggregateInputType = {
    valueUsd?: true
  }

  export type ClientMinAggregateInputType = {
    id?: true
    organizationId?: true
    name?: true
    email?: true
    phone?: true
    company?: true
    stage?: true
    valueUsd?: true
    isPaid?: true
    isOnboarded?: true
    createdAt?: true
    assignedToMembershipId?: true
  }

  export type ClientMaxAggregateInputType = {
    id?: true
    organizationId?: true
    name?: true
    email?: true
    phone?: true
    company?: true
    stage?: true
    valueUsd?: true
    isPaid?: true
    isOnboarded?: true
    createdAt?: true
    assignedToMembershipId?: true
  }

  export type ClientCountAggregateInputType = {
    id?: true
    organizationId?: true
    name?: true
    email?: true
    phone?: true
    company?: true
    stage?: true
    valueUsd?: true
    isPaid?: true
    isOnboarded?: true
    competitors?: true
    notes?: true
    createdAt?: true
    assignedToMembershipId?: true
    _all?: true
  }

  export type ClientAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Client to aggregate.
     */
    where?: ClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: ClientOrderByWithRelationInput | ClientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Clients
    **/
    _count?: true | ClientCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClientAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClientSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClientMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClientMaxAggregateInputType
  }

  export type GetClientAggregateType<T extends ClientAggregateArgs> = {
        [P in keyof T & keyof AggregateClient]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClient[P]>
      : GetScalarType<T[P], AggregateClient[P]>
  }




  export type ClientGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClientWhereInput
    orderBy?: ClientOrderByWithAggregationInput | ClientOrderByWithAggregationInput[]
    by: ClientScalarFieldEnum[] | ClientScalarFieldEnum
    having?: ClientScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClientCountAggregateInputType | true
    _avg?: ClientAvgAggregateInputType
    _sum?: ClientSumAggregateInputType
    _min?: ClientMinAggregateInputType
    _max?: ClientMaxAggregateInputType
  }

  export type ClientGroupByOutputType = {
    id: string
    organizationId: string
    name: string
    email: string
    phone: string | null
    company: string | null
    stage: $Enums.PipelineStage
    valueUsd: number
    isPaid: boolean
    isOnboarded: boolean
    competitors: JsonValue | null
    notes: JsonValue | null
    createdAt: Date
    assignedToMembershipId: string | null
    _count: ClientCountAggregateOutputType | null
    _avg: ClientAvgAggregateOutputType | null
    _sum: ClientSumAggregateOutputType | null
    _min: ClientMinAggregateOutputType | null
    _max: ClientMaxAggregateOutputType | null
  }

  type GetClientGroupByPayload<T extends ClientGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClientGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClientGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClientGroupByOutputType[P]>
            : GetScalarType<T[P], ClientGroupByOutputType[P]>
        }
      >
    >


  export type ClientSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    company?: boolean
    stage?: boolean
    valueUsd?: boolean
    isPaid?: boolean
    isOnboarded?: boolean
    competitors?: boolean
    notes?: boolean
    createdAt?: boolean
    assignedToMembershipId?: boolean
    assignedTo?: boolean | Client$assignedToArgs<ExtArgs>
    assignedUsers?: boolean | Client$assignedUsersArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    interactions?: boolean | Client$interactionsArgs<ExtArgs>
    invoices?: boolean | Client$invoicesArgs<ExtArgs>
    sequences?: boolean | Client$sequencesArgs<ExtArgs>
    pipelineCards?: boolean | Client$pipelineCardsArgs<ExtArgs>
    campaigns?: boolean | Client$campaignsArgs<ExtArgs>
    EmailEvent?: boolean | Client$EmailEventArgs<ExtArgs>
    Subscription?: boolean | Client$SubscriptionArgs<ExtArgs>
    _count?: boolean | ClientCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["client"]>

  export type ClientSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    company?: boolean
    stage?: boolean
    valueUsd?: boolean
    isPaid?: boolean
    isOnboarded?: boolean
    competitors?: boolean
    notes?: boolean
    createdAt?: boolean
    assignedToMembershipId?: boolean
    assignedTo?: boolean | Client$assignedToArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["client"]>

  export type ClientSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    company?: boolean
    stage?: boolean
    valueUsd?: boolean
    isPaid?: boolean
    isOnboarded?: boolean
    competitors?: boolean
    notes?: boolean
    createdAt?: boolean
    assignedToMembershipId?: boolean
    assignedTo?: boolean | Client$assignedToArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["client"]>

  export type ClientSelectScalar = {
    id?: boolean
    organizationId?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    company?: boolean
    stage?: boolean
    valueUsd?: boolean
    isPaid?: boolean
    isOnboarded?: boolean
    competitors?: boolean
    notes?: boolean
    createdAt?: boolean
    assignedToMembershipId?: boolean
  }

  export type ClientOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "organizationId" | "name" | "email" | "phone" | "company" | "stage" | "valueUsd" | "isPaid" | "isOnboarded" | "competitors" | "notes" | "createdAt" | "assignedToMembershipId", ExtArgs["result"]["client"]>
  export type ClientInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignedTo?: boolean | Client$assignedToArgs<ExtArgs>
    assignedUsers?: boolean | Client$assignedUsersArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    interactions?: boolean | Client$interactionsArgs<ExtArgs>
    invoices?: boolean | Client$invoicesArgs<ExtArgs>
    sequences?: boolean | Client$sequencesArgs<ExtArgs>
    pipelineCards?: boolean | Client$pipelineCardsArgs<ExtArgs>
    campaigns?: boolean | Client$campaignsArgs<ExtArgs>
    EmailEvent?: boolean | Client$EmailEventArgs<ExtArgs>
    Subscription?: boolean | Client$SubscriptionArgs<ExtArgs>
    _count?: boolean | ClientCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ClientIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignedTo?: boolean | Client$assignedToArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }
  export type ClientIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignedTo?: boolean | Client$assignedToArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }

  export type $ClientPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Client"
    objects: {
      assignedTo: Prisma.$OrganizationMembershipPayload<ExtArgs> | null
      assignedUsers: Prisma.$UserPayload<ExtArgs>[]
      organization: Prisma.$OrganizationPayload<ExtArgs>
      interactions: Prisma.$InteractionPayload<ExtArgs>[]
      invoices: Prisma.$InvoicePayload<ExtArgs>[]
      sequences: Prisma.$SequenceTargetPayload<ExtArgs>[]
      pipelineCards: Prisma.$PipelineCardPayload<ExtArgs>[]
      campaigns: Prisma.$CampaignPayload<ExtArgs>[]
      EmailEvent: Prisma.$EmailEventPayload<ExtArgs>[]
      Subscription: Prisma.$SubscriptionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      organizationId: string
      name: string
      email: string
      phone: string | null
      company: string | null
      stage: $Enums.PipelineStage
      valueUsd: number
      isPaid: boolean
      isOnboarded: boolean
      competitors: Prisma.JsonValue | null
      notes: Prisma.JsonValue | null
      createdAt: Date
      assignedToMembershipId: string | null
    }, ExtArgs["result"]["client"]>
    composites: {}
  }

  type ClientGetPayload<S extends boolean | null | undefined | ClientDefaultArgs> = $Result.GetResult<Prisma.$ClientPayload, S>

  type ClientCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ClientFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ClientCountAggregateInputType | true
    }

  export interface ClientDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Client'], meta: { name: 'Client' } }
    /**
     * Find zero or one Client that matches the filter.
     * @param {ClientFindUniqueArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClientFindUniqueArgs>(args: SelectSubset<T, ClientFindUniqueArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Client that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ClientFindUniqueOrThrowArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClientFindUniqueOrThrowArgs>(args: SelectSubset<T, ClientFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Client that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientFindFirstArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClientFindFirstArgs>(args?: SelectSubset<T, ClientFindFirstArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Client that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientFindFirstOrThrowArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClientFindFirstOrThrowArgs>(args?: SelectSubset<T, ClientFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Clients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clients
     * const clients = await prisma.client.findMany()
     * 
     * // Get first 10 Clients
     * const clients = await prisma.client.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clientWithIdOnly = await prisma.client.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClientFindManyArgs>(args?: SelectSubset<T, ClientFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Client.
     * @param {ClientCreateArgs} args - Arguments to create a Client.
     * @example
     * // Create one Client
     * const Client = await prisma.client.create({
     *   data: {
     *     // ... data to create a Client
     *   }
     * })
     * 
     */
    create<T extends ClientCreateArgs>(args: SelectSubset<T, ClientCreateArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Clients.
     * @param {ClientCreateManyArgs} args - Arguments to create many Clients.
     * @example
     * // Create many Clients
     * const client = await prisma.client.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClientCreateManyArgs>(args?: SelectSubset<T, ClientCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Clients and returns the data saved in the database.
     * @param {ClientCreateManyAndReturnArgs} args - Arguments to create many Clients.
     * @example
     * // Create many Clients
     * const client = await prisma.client.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Clients and only return the `id`
     * const clientWithIdOnly = await prisma.client.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ClientCreateManyAndReturnArgs>(args?: SelectSubset<T, ClientCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Client.
     * @param {ClientDeleteArgs} args - Arguments to delete one Client.
     * @example
     * // Delete one Client
     * const Client = await prisma.client.delete({
     *   where: {
     *     // ... filter to delete one Client
     *   }
     * })
     * 
     */
    delete<T extends ClientDeleteArgs>(args: SelectSubset<T, ClientDeleteArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Client.
     * @param {ClientUpdateArgs} args - Arguments to update one Client.
     * @example
     * // Update one Client
     * const client = await prisma.client.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClientUpdateArgs>(args: SelectSubset<T, ClientUpdateArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Clients.
     * @param {ClientDeleteManyArgs} args - Arguments to filter Clients to delete.
     * @example
     * // Delete a few Clients
     * const { count } = await prisma.client.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClientDeleteManyArgs>(args?: SelectSubset<T, ClientDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clients
     * const client = await prisma.client.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClientUpdateManyArgs>(args: SelectSubset<T, ClientUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clients and returns the data updated in the database.
     * @param {ClientUpdateManyAndReturnArgs} args - Arguments to update many Clients.
     * @example
     * // Update many Clients
     * const client = await prisma.client.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Clients and only return the `id`
     * const clientWithIdOnly = await prisma.client.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ClientUpdateManyAndReturnArgs>(args: SelectSubset<T, ClientUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Client.
     * @param {ClientUpsertArgs} args - Arguments to update or create a Client.
     * @example
     * // Update or create a Client
     * const client = await prisma.client.upsert({
     *   create: {
     *     // ... data to create a Client
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Client we want to update
     *   }
     * })
     */
    upsert<T extends ClientUpsertArgs>(args: SelectSubset<T, ClientUpsertArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientCountArgs} args - Arguments to filter Clients to count.
     * @example
     * // Count the number of Clients
     * const count = await prisma.client.count({
     *   where: {
     *     // ... the filter for the Clients we want to count
     *   }
     * })
    **/
    count<T extends ClientCountArgs>(
      args?: Subset<T, ClientCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClientCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Client.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClientAggregateArgs>(args: Subset<T, ClientAggregateArgs>): Prisma.PrismaPromise<GetClientAggregateType<T>>

    /**
     * Group by Client.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClientGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClientGroupByArgs['orderBy'] }
        : { orderBy?: ClientGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClientGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClientGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Client model
   */
  readonly fields: ClientFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Client.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClientClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    assignedTo<T extends Client$assignedToArgs<ExtArgs> = {}>(args?: Subset<T, Client$assignedToArgs<ExtArgs>>): Prisma__OrganizationMembershipClient<$Result.GetResult<Prisma.$OrganizationMembershipPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    assignedUsers<T extends Client$assignedUsersArgs<ExtArgs> = {}>(args?: Subset<T, Client$assignedUsersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    interactions<T extends Client$interactionsArgs<ExtArgs> = {}>(args?: Subset<T, Client$interactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InteractionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    invoices<T extends Client$invoicesArgs<ExtArgs> = {}>(args?: Subset<T, Client$invoicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sequences<T extends Client$sequencesArgs<ExtArgs> = {}>(args?: Subset<T, Client$sequencesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SequenceTargetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    pipelineCards<T extends Client$pipelineCardsArgs<ExtArgs> = {}>(args?: Subset<T, Client$pipelineCardsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PipelineCardPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    campaigns<T extends Client$campaignsArgs<ExtArgs> = {}>(args?: Subset<T, Client$campaignsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    EmailEvent<T extends Client$EmailEventArgs<ExtArgs> = {}>(args?: Subset<T, Client$EmailEventArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailEventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Subscription<T extends Client$SubscriptionArgs<ExtArgs> = {}>(args?: Subset<T, Client$SubscriptionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Client model
   */
  interface ClientFieldRefs {
    readonly id: FieldRef<"Client", 'String'>
    readonly organizationId: FieldRef<"Client", 'String'>
    readonly name: FieldRef<"Client", 'String'>
    readonly email: FieldRef<"Client", 'String'>
    readonly phone: FieldRef<"Client", 'String'>
    readonly company: FieldRef<"Client", 'String'>
    readonly stage: FieldRef<"Client", 'PipelineStage'>
    readonly valueUsd: FieldRef<"Client", 'Int'>
    readonly isPaid: FieldRef<"Client", 'Boolean'>
    readonly isOnboarded: FieldRef<"Client", 'Boolean'>
    readonly competitors: FieldRef<"Client", 'Json'>
    readonly notes: FieldRef<"Client", 'Json'>
    readonly createdAt: FieldRef<"Client", 'DateTime'>
    readonly assignedToMembershipId: FieldRef<"Client", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Client findUnique
   */
  export type ClientFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Client to fetch.
     */
    where: ClientWhereUniqueInput
  }

  /**
   * Client findUniqueOrThrow
   */
  export type ClientFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Client to fetch.
     */
    where: ClientWhereUniqueInput
  }

  /**
   * Client findFirst
   */
  export type ClientFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Client to fetch.
     */
    where?: ClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: ClientOrderByWithRelationInput | ClientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clients.
     */
    cursor?: ClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clients.
     */
    distinct?: ClientScalarFieldEnum | ClientScalarFieldEnum[]
  }

  /**
   * Client findFirstOrThrow
   */
  export type ClientFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Client to fetch.
     */
    where?: ClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: ClientOrderByWithRelationInput | ClientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clients.
     */
    cursor?: ClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clients.
     */
    distinct?: ClientScalarFieldEnum | ClientScalarFieldEnum[]
  }

  /**
   * Client findMany
   */
  export type ClientFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Clients to fetch.
     */
    where?: ClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: ClientOrderByWithRelationInput | ClientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Clients.
     */
    cursor?: ClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    distinct?: ClientScalarFieldEnum | ClientScalarFieldEnum[]
  }

  /**
   * Client create
   */
  export type ClientCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * The data needed to create a Client.
     */
    data: XOR<ClientCreateInput, ClientUncheckedCreateInput>
  }

  /**
   * Client createMany
   */
  export type ClientCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Clients.
     */
    data: ClientCreateManyInput | ClientCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Client createManyAndReturn
   */
  export type ClientCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * The data used to create many Clients.
     */
    data: ClientCreateManyInput | ClientCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Client update
   */
  export type ClientUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * The data needed to update a Client.
     */
    data: XOR<ClientUpdateInput, ClientUncheckedUpdateInput>
    /**
     * Choose, which Client to update.
     */
    where: ClientWhereUniqueInput
  }

  /**
   * Client updateMany
   */
  export type ClientUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Clients.
     */
    data: XOR<ClientUpdateManyMutationInput, ClientUncheckedUpdateManyInput>
    /**
     * Filter which Clients to update
     */
    where?: ClientWhereInput
    /**
     * Limit how many Clients to update.
     */
    limit?: number
  }

  /**
   * Client updateManyAndReturn
   */
  export type ClientUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * The data used to update Clients.
     */
    data: XOR<ClientUpdateManyMutationInput, ClientUncheckedUpdateManyInput>
    /**
     * Filter which Clients to update
     */
    where?: ClientWhereInput
    /**
     * Limit how many Clients to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Client upsert
   */
  export type ClientUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * The filter to search for the Client to update in case it exists.
     */
    where: ClientWhereUniqueInput
    /**
     * In case the Client found by the `where` argument doesn't exist, create a new Client with this data.
     */
    create: XOR<ClientCreateInput, ClientUncheckedCreateInput>
    /**
     * In case the Client was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClientUpdateInput, ClientUncheckedUpdateInput>
  }

  /**
   * Client delete
   */
  export type ClientDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter which Client to delete.
     */
    where: ClientWhereUniqueInput
  }

  /**
   * Client deleteMany
   */
  export type ClientDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Clients to delete
     */
    where?: ClientWhereInput
    /**
     * Limit how many Clients to delete.
     */
    limit?: number
  }

  /**
   * Client.assignedTo
   */
  export type Client$assignedToArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrganizationMembership
     */
    select?: OrganizationMembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrganizationMembership
     */
    omit?: OrganizationMembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationMembershipInclude<ExtArgs> | null
    where?: OrganizationMembershipWhereInput
  }

  /**
   * Client.assignedUsers
   */
  export type Client$assignedUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Client.interactions
   */
  export type Client$interactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interaction
     */
    select?: InteractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Interaction
     */
    omit?: InteractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InteractionInclude<ExtArgs> | null
    where?: InteractionWhereInput
    orderBy?: InteractionOrderByWithRelationInput | InteractionOrderByWithRelationInput[]
    cursor?: InteractionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InteractionScalarFieldEnum | InteractionScalarFieldEnum[]
  }

  /**
   * Client.invoices
   */
  export type Client$invoicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    where?: InvoiceWhereInput
    orderBy?: InvoiceOrderByWithRelationInput | InvoiceOrderByWithRelationInput[]
    cursor?: InvoiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InvoiceScalarFieldEnum | InvoiceScalarFieldEnum[]
  }

  /**
   * Client.sequences
   */
  export type Client$sequencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SequenceTarget
     */
    select?: SequenceTargetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SequenceTarget
     */
    omit?: SequenceTargetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SequenceTargetInclude<ExtArgs> | null
    where?: SequenceTargetWhereInput
    orderBy?: SequenceTargetOrderByWithRelationInput | SequenceTargetOrderByWithRelationInput[]
    cursor?: SequenceTargetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SequenceTargetScalarFieldEnum | SequenceTargetScalarFieldEnum[]
  }

  /**
   * Client.pipelineCards
   */
  export type Client$pipelineCardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PipelineCard
     */
    select?: PipelineCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PipelineCard
     */
    omit?: PipelineCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PipelineCardInclude<ExtArgs> | null
    where?: PipelineCardWhereInput
    orderBy?: PipelineCardOrderByWithRelationInput | PipelineCardOrderByWithRelationInput[]
    cursor?: PipelineCardWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PipelineCardScalarFieldEnum | PipelineCardScalarFieldEnum[]
  }

  /**
   * Client.campaigns
   */
  export type Client$campaignsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Campaign
     */
    omit?: CampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    where?: CampaignWhereInput
    orderBy?: CampaignOrderByWithRelationInput | CampaignOrderByWithRelationInput[]
    cursor?: CampaignWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CampaignScalarFieldEnum | CampaignScalarFieldEnum[]
  }

  /**
   * Client.EmailEvent
   */
  export type Client$EmailEventArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailEvent
     */
    select?: EmailEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailEvent
     */
    omit?: EmailEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailEventInclude<ExtArgs> | null
    where?: EmailEventWhereInput
    orderBy?: EmailEventOrderByWithRelationInput | EmailEventOrderByWithRelationInput[]
    cursor?: EmailEventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmailEventScalarFieldEnum | EmailEventScalarFieldEnum[]
  }

  /**
   * Client.Subscription
   */
  export type Client$SubscriptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    where?: SubscriptionWhereInput
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    cursor?: SubscriptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }

  /**
   * Client without action
   */
  export type ClientDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
  }


  /**
   * Model Interaction
   */

  export type AggregateInteraction = {
    _count: InteractionCountAggregateOutputType | null
    _min: InteractionMinAggregateOutputType | null
    _max: InteractionMaxAggregateOutputType | null
  }

  export type InteractionMinAggregateOutputType = {
    id: string | null
    date: Date | null
    type: $Enums.InteractionType | null
    summary: string | null
    clientId: string | null
  }

  export type InteractionMaxAggregateOutputType = {
    id: string | null
    date: Date | null
    type: $Enums.InteractionType | null
    summary: string | null
    clientId: string | null
  }

  export type InteractionCountAggregateOutputType = {
    id: number
    date: number
    type: number
    summary: number
    clientId: number
    _all: number
  }


  export type InteractionMinAggregateInputType = {
    id?: true
    date?: true
    type?: true
    summary?: true
    clientId?: true
  }

  export type InteractionMaxAggregateInputType = {
    id?: true
    date?: true
    type?: true
    summary?: true
    clientId?: true
  }

  export type InteractionCountAggregateInputType = {
    id?: true
    date?: true
    type?: true
    summary?: true
    clientId?: true
    _all?: true
  }

  export type InteractionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Interaction to aggregate.
     */
    where?: InteractionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Interactions to fetch.
     */
    orderBy?: InteractionOrderByWithRelationInput | InteractionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InteractionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Interactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Interactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Interactions
    **/
    _count?: true | InteractionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InteractionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InteractionMaxAggregateInputType
  }

  export type GetInteractionAggregateType<T extends InteractionAggregateArgs> = {
        [P in keyof T & keyof AggregateInteraction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInteraction[P]>
      : GetScalarType<T[P], AggregateInteraction[P]>
  }




  export type InteractionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InteractionWhereInput
    orderBy?: InteractionOrderByWithAggregationInput | InteractionOrderByWithAggregationInput[]
    by: InteractionScalarFieldEnum[] | InteractionScalarFieldEnum
    having?: InteractionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InteractionCountAggregateInputType | true
    _min?: InteractionMinAggregateInputType
    _max?: InteractionMaxAggregateInputType
  }

  export type InteractionGroupByOutputType = {
    id: string
    date: Date
    type: $Enums.InteractionType
    summary: string
    clientId: string
    _count: InteractionCountAggregateOutputType | null
    _min: InteractionMinAggregateOutputType | null
    _max: InteractionMaxAggregateOutputType | null
  }

  type GetInteractionGroupByPayload<T extends InteractionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InteractionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InteractionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InteractionGroupByOutputType[P]>
            : GetScalarType<T[P], InteractionGroupByOutputType[P]>
        }
      >
    >


  export type InteractionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    type?: boolean
    summary?: boolean
    clientId?: boolean
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["interaction"]>

  export type InteractionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    type?: boolean
    summary?: boolean
    clientId?: boolean
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["interaction"]>

  export type InteractionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    type?: boolean
    summary?: boolean
    clientId?: boolean
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["interaction"]>

  export type InteractionSelectScalar = {
    id?: boolean
    date?: boolean
    type?: boolean
    summary?: boolean
    clientId?: boolean
  }

  export type InteractionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "date" | "type" | "summary" | "clientId", ExtArgs["result"]["interaction"]>
  export type InteractionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }
  export type InteractionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }
  export type InteractionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }

  export type $InteractionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Interaction"
    objects: {
      client: Prisma.$ClientPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      date: Date
      type: $Enums.InteractionType
      summary: string
      clientId: string
    }, ExtArgs["result"]["interaction"]>
    composites: {}
  }

  type InteractionGetPayload<S extends boolean | null | undefined | InteractionDefaultArgs> = $Result.GetResult<Prisma.$InteractionPayload, S>

  type InteractionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InteractionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InteractionCountAggregateInputType | true
    }

  export interface InteractionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Interaction'], meta: { name: 'Interaction' } }
    /**
     * Find zero or one Interaction that matches the filter.
     * @param {InteractionFindUniqueArgs} args - Arguments to find a Interaction
     * @example
     * // Get one Interaction
     * const interaction = await prisma.interaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InteractionFindUniqueArgs>(args: SelectSubset<T, InteractionFindUniqueArgs<ExtArgs>>): Prisma__InteractionClient<$Result.GetResult<Prisma.$InteractionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Interaction that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InteractionFindUniqueOrThrowArgs} args - Arguments to find a Interaction
     * @example
     * // Get one Interaction
     * const interaction = await prisma.interaction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InteractionFindUniqueOrThrowArgs>(args: SelectSubset<T, InteractionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InteractionClient<$Result.GetResult<Prisma.$InteractionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Interaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InteractionFindFirstArgs} args - Arguments to find a Interaction
     * @example
     * // Get one Interaction
     * const interaction = await prisma.interaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InteractionFindFirstArgs>(args?: SelectSubset<T, InteractionFindFirstArgs<ExtArgs>>): Prisma__InteractionClient<$Result.GetResult<Prisma.$InteractionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Interaction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InteractionFindFirstOrThrowArgs} args - Arguments to find a Interaction
     * @example
     * // Get one Interaction
     * const interaction = await prisma.interaction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InteractionFindFirstOrThrowArgs>(args?: SelectSubset<T, InteractionFindFirstOrThrowArgs<ExtArgs>>): Prisma__InteractionClient<$Result.GetResult<Prisma.$InteractionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Interactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InteractionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Interactions
     * const interactions = await prisma.interaction.findMany()
     * 
     * // Get first 10 Interactions
     * const interactions = await prisma.interaction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const interactionWithIdOnly = await prisma.interaction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InteractionFindManyArgs>(args?: SelectSubset<T, InteractionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InteractionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Interaction.
     * @param {InteractionCreateArgs} args - Arguments to create a Interaction.
     * @example
     * // Create one Interaction
     * const Interaction = await prisma.interaction.create({
     *   data: {
     *     // ... data to create a Interaction
     *   }
     * })
     * 
     */
    create<T extends InteractionCreateArgs>(args: SelectSubset<T, InteractionCreateArgs<ExtArgs>>): Prisma__InteractionClient<$Result.GetResult<Prisma.$InteractionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Interactions.
     * @param {InteractionCreateManyArgs} args - Arguments to create many Interactions.
     * @example
     * // Create many Interactions
     * const interaction = await prisma.interaction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InteractionCreateManyArgs>(args?: SelectSubset<T, InteractionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Interactions and returns the data saved in the database.
     * @param {InteractionCreateManyAndReturnArgs} args - Arguments to create many Interactions.
     * @example
     * // Create many Interactions
     * const interaction = await prisma.interaction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Interactions and only return the `id`
     * const interactionWithIdOnly = await prisma.interaction.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InteractionCreateManyAndReturnArgs>(args?: SelectSubset<T, InteractionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InteractionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Interaction.
     * @param {InteractionDeleteArgs} args - Arguments to delete one Interaction.
     * @example
     * // Delete one Interaction
     * const Interaction = await prisma.interaction.delete({
     *   where: {
     *     // ... filter to delete one Interaction
     *   }
     * })
     * 
     */
    delete<T extends InteractionDeleteArgs>(args: SelectSubset<T, InteractionDeleteArgs<ExtArgs>>): Prisma__InteractionClient<$Result.GetResult<Prisma.$InteractionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Interaction.
     * @param {InteractionUpdateArgs} args - Arguments to update one Interaction.
     * @example
     * // Update one Interaction
     * const interaction = await prisma.interaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InteractionUpdateArgs>(args: SelectSubset<T, InteractionUpdateArgs<ExtArgs>>): Prisma__InteractionClient<$Result.GetResult<Prisma.$InteractionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Interactions.
     * @param {InteractionDeleteManyArgs} args - Arguments to filter Interactions to delete.
     * @example
     * // Delete a few Interactions
     * const { count } = await prisma.interaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InteractionDeleteManyArgs>(args?: SelectSubset<T, InteractionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Interactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InteractionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Interactions
     * const interaction = await prisma.interaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InteractionUpdateManyArgs>(args: SelectSubset<T, InteractionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Interactions and returns the data updated in the database.
     * @param {InteractionUpdateManyAndReturnArgs} args - Arguments to update many Interactions.
     * @example
     * // Update many Interactions
     * const interaction = await prisma.interaction.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Interactions and only return the `id`
     * const interactionWithIdOnly = await prisma.interaction.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends InteractionUpdateManyAndReturnArgs>(args: SelectSubset<T, InteractionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InteractionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Interaction.
     * @param {InteractionUpsertArgs} args - Arguments to update or create a Interaction.
     * @example
     * // Update or create a Interaction
     * const interaction = await prisma.interaction.upsert({
     *   create: {
     *     // ... data to create a Interaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Interaction we want to update
     *   }
     * })
     */
    upsert<T extends InteractionUpsertArgs>(args: SelectSubset<T, InteractionUpsertArgs<ExtArgs>>): Prisma__InteractionClient<$Result.GetResult<Prisma.$InteractionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Interactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InteractionCountArgs} args - Arguments to filter Interactions to count.
     * @example
     * // Count the number of Interactions
     * const count = await prisma.interaction.count({
     *   where: {
     *     // ... the filter for the Interactions we want to count
     *   }
     * })
    **/
    count<T extends InteractionCountArgs>(
      args?: Subset<T, InteractionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InteractionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Interaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InteractionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InteractionAggregateArgs>(args: Subset<T, InteractionAggregateArgs>): Prisma.PrismaPromise<GetInteractionAggregateType<T>>

    /**
     * Group by Interaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InteractionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InteractionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InteractionGroupByArgs['orderBy'] }
        : { orderBy?: InteractionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InteractionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInteractionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Interaction model
   */
  readonly fields: InteractionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Interaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InteractionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    client<T extends ClientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClientDefaultArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Interaction model
   */
  interface InteractionFieldRefs {
    readonly id: FieldRef<"Interaction", 'String'>
    readonly date: FieldRef<"Interaction", 'DateTime'>
    readonly type: FieldRef<"Interaction", 'InteractionType'>
    readonly summary: FieldRef<"Interaction", 'String'>
    readonly clientId: FieldRef<"Interaction", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Interaction findUnique
   */
  export type InteractionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interaction
     */
    select?: InteractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Interaction
     */
    omit?: InteractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InteractionInclude<ExtArgs> | null
    /**
     * Filter, which Interaction to fetch.
     */
    where: InteractionWhereUniqueInput
  }

  /**
   * Interaction findUniqueOrThrow
   */
  export type InteractionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interaction
     */
    select?: InteractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Interaction
     */
    omit?: InteractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InteractionInclude<ExtArgs> | null
    /**
     * Filter, which Interaction to fetch.
     */
    where: InteractionWhereUniqueInput
  }

  /**
   * Interaction findFirst
   */
  export type InteractionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interaction
     */
    select?: InteractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Interaction
     */
    omit?: InteractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InteractionInclude<ExtArgs> | null
    /**
     * Filter, which Interaction to fetch.
     */
    where?: InteractionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Interactions to fetch.
     */
    orderBy?: InteractionOrderByWithRelationInput | InteractionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Interactions.
     */
    cursor?: InteractionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Interactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Interactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Interactions.
     */
    distinct?: InteractionScalarFieldEnum | InteractionScalarFieldEnum[]
  }

  /**
   * Interaction findFirstOrThrow
   */
  export type InteractionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interaction
     */
    select?: InteractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Interaction
     */
    omit?: InteractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InteractionInclude<ExtArgs> | null
    /**
     * Filter, which Interaction to fetch.
     */
    where?: InteractionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Interactions to fetch.
     */
    orderBy?: InteractionOrderByWithRelationInput | InteractionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Interactions.
     */
    cursor?: InteractionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Interactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Interactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Interactions.
     */
    distinct?: InteractionScalarFieldEnum | InteractionScalarFieldEnum[]
  }

  /**
   * Interaction findMany
   */
  export type InteractionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interaction
     */
    select?: InteractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Interaction
     */
    omit?: InteractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InteractionInclude<ExtArgs> | null
    /**
     * Filter, which Interactions to fetch.
     */
    where?: InteractionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Interactions to fetch.
     */
    orderBy?: InteractionOrderByWithRelationInput | InteractionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Interactions.
     */
    cursor?: InteractionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Interactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Interactions.
     */
    skip?: number
    distinct?: InteractionScalarFieldEnum | InteractionScalarFieldEnum[]
  }

  /**
   * Interaction create
   */
  export type InteractionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interaction
     */
    select?: InteractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Interaction
     */
    omit?: InteractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InteractionInclude<ExtArgs> | null
    /**
     * The data needed to create a Interaction.
     */
    data: XOR<InteractionCreateInput, InteractionUncheckedCreateInput>
  }

  /**
   * Interaction createMany
   */
  export type InteractionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Interactions.
     */
    data: InteractionCreateManyInput | InteractionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Interaction createManyAndReturn
   */
  export type InteractionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interaction
     */
    select?: InteractionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Interaction
     */
    omit?: InteractionOmit<ExtArgs> | null
    /**
     * The data used to create many Interactions.
     */
    data: InteractionCreateManyInput | InteractionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InteractionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Interaction update
   */
  export type InteractionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interaction
     */
    select?: InteractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Interaction
     */
    omit?: InteractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InteractionInclude<ExtArgs> | null
    /**
     * The data needed to update a Interaction.
     */
    data: XOR<InteractionUpdateInput, InteractionUncheckedUpdateInput>
    /**
     * Choose, which Interaction to update.
     */
    where: InteractionWhereUniqueInput
  }

  /**
   * Interaction updateMany
   */
  export type InteractionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Interactions.
     */
    data: XOR<InteractionUpdateManyMutationInput, InteractionUncheckedUpdateManyInput>
    /**
     * Filter which Interactions to update
     */
    where?: InteractionWhereInput
    /**
     * Limit how many Interactions to update.
     */
    limit?: number
  }

  /**
   * Interaction updateManyAndReturn
   */
  export type InteractionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interaction
     */
    select?: InteractionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Interaction
     */
    omit?: InteractionOmit<ExtArgs> | null
    /**
     * The data used to update Interactions.
     */
    data: XOR<InteractionUpdateManyMutationInput, InteractionUncheckedUpdateManyInput>
    /**
     * Filter which Interactions to update
     */
    where?: InteractionWhereInput
    /**
     * Limit how many Interactions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InteractionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Interaction upsert
   */
  export type InteractionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interaction
     */
    select?: InteractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Interaction
     */
    omit?: InteractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InteractionInclude<ExtArgs> | null
    /**
     * The filter to search for the Interaction to update in case it exists.
     */
    where: InteractionWhereUniqueInput
    /**
     * In case the Interaction found by the `where` argument doesn't exist, create a new Interaction with this data.
     */
    create: XOR<InteractionCreateInput, InteractionUncheckedCreateInput>
    /**
     * In case the Interaction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InteractionUpdateInput, InteractionUncheckedUpdateInput>
  }

  /**
   * Interaction delete
   */
  export type InteractionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interaction
     */
    select?: InteractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Interaction
     */
    omit?: InteractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InteractionInclude<ExtArgs> | null
    /**
     * Filter which Interaction to delete.
     */
    where: InteractionWhereUniqueInput
  }

  /**
   * Interaction deleteMany
   */
  export type InteractionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Interactions to delete
     */
    where?: InteractionWhereInput
    /**
     * Limit how many Interactions to delete.
     */
    limit?: number
  }

  /**
   * Interaction without action
   */
  export type InteractionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interaction
     */
    select?: InteractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Interaction
     */
    omit?: InteractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InteractionInclude<ExtArgs> | null
  }


  /**
   * Model Pipeline
   */

  export type AggregatePipeline = {
    _count: PipelineCountAggregateOutputType | null
    _min: PipelineMinAggregateOutputType | null
    _max: PipelineMaxAggregateOutputType | null
  }

  export type PipelineMinAggregateOutputType = {
    id: string | null
    organizationId: string | null
    name: string | null
    createdAt: Date | null
  }

  export type PipelineMaxAggregateOutputType = {
    id: string | null
    organizationId: string | null
    name: string | null
    createdAt: Date | null
  }

  export type PipelineCountAggregateOutputType = {
    id: number
    organizationId: number
    name: number
    createdAt: number
    _all: number
  }


  export type PipelineMinAggregateInputType = {
    id?: true
    organizationId?: true
    name?: true
    createdAt?: true
  }

  export type PipelineMaxAggregateInputType = {
    id?: true
    organizationId?: true
    name?: true
    createdAt?: true
  }

  export type PipelineCountAggregateInputType = {
    id?: true
    organizationId?: true
    name?: true
    createdAt?: true
    _all?: true
  }

  export type PipelineAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pipeline to aggregate.
     */
    where?: PipelineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pipelines to fetch.
     */
    orderBy?: PipelineOrderByWithRelationInput | PipelineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PipelineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pipelines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pipelines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Pipelines
    **/
    _count?: true | PipelineCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PipelineMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PipelineMaxAggregateInputType
  }

  export type GetPipelineAggregateType<T extends PipelineAggregateArgs> = {
        [P in keyof T & keyof AggregatePipeline]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePipeline[P]>
      : GetScalarType<T[P], AggregatePipeline[P]>
  }




  export type PipelineGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PipelineWhereInput
    orderBy?: PipelineOrderByWithAggregationInput | PipelineOrderByWithAggregationInput[]
    by: PipelineScalarFieldEnum[] | PipelineScalarFieldEnum
    having?: PipelineScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PipelineCountAggregateInputType | true
    _min?: PipelineMinAggregateInputType
    _max?: PipelineMaxAggregateInputType
  }

  export type PipelineGroupByOutputType = {
    id: string
    organizationId: string
    name: string
    createdAt: Date
    _count: PipelineCountAggregateOutputType | null
    _min: PipelineMinAggregateOutputType | null
    _max: PipelineMaxAggregateOutputType | null
  }

  type GetPipelineGroupByPayload<T extends PipelineGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PipelineGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PipelineGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PipelineGroupByOutputType[P]>
            : GetScalarType<T[P], PipelineGroupByOutputType[P]>
        }
      >
    >


  export type PipelineSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    name?: boolean
    createdAt?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    stages?: boolean | Pipeline$stagesArgs<ExtArgs>
    pipelineCards?: boolean | Pipeline$pipelineCardsArgs<ExtArgs>
    _count?: boolean | PipelineCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pipeline"]>

  export type PipelineSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    name?: boolean
    createdAt?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pipeline"]>

  export type PipelineSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    name?: boolean
    createdAt?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pipeline"]>

  export type PipelineSelectScalar = {
    id?: boolean
    organizationId?: boolean
    name?: boolean
    createdAt?: boolean
  }

  export type PipelineOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "organizationId" | "name" | "createdAt", ExtArgs["result"]["pipeline"]>
  export type PipelineInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    stages?: boolean | Pipeline$stagesArgs<ExtArgs>
    pipelineCards?: boolean | Pipeline$pipelineCardsArgs<ExtArgs>
    _count?: boolean | PipelineCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PipelineIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }
  export type PipelineIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }

  export type $PipelinePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Pipeline"
    objects: {
      organization: Prisma.$OrganizationPayload<ExtArgs>
      stages: Prisma.$PipelineStageModelPayload<ExtArgs>[]
      pipelineCards: Prisma.$PipelineCardPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      organizationId: string
      name: string
      createdAt: Date
    }, ExtArgs["result"]["pipeline"]>
    composites: {}
  }

  type PipelineGetPayload<S extends boolean | null | undefined | PipelineDefaultArgs> = $Result.GetResult<Prisma.$PipelinePayload, S>

  type PipelineCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PipelineFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PipelineCountAggregateInputType | true
    }

  export interface PipelineDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Pipeline'], meta: { name: 'Pipeline' } }
    /**
     * Find zero or one Pipeline that matches the filter.
     * @param {PipelineFindUniqueArgs} args - Arguments to find a Pipeline
     * @example
     * // Get one Pipeline
     * const pipeline = await prisma.pipeline.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PipelineFindUniqueArgs>(args: SelectSubset<T, PipelineFindUniqueArgs<ExtArgs>>): Prisma__PipelineClient<$Result.GetResult<Prisma.$PipelinePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Pipeline that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PipelineFindUniqueOrThrowArgs} args - Arguments to find a Pipeline
     * @example
     * // Get one Pipeline
     * const pipeline = await prisma.pipeline.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PipelineFindUniqueOrThrowArgs>(args: SelectSubset<T, PipelineFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PipelineClient<$Result.GetResult<Prisma.$PipelinePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Pipeline that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PipelineFindFirstArgs} args - Arguments to find a Pipeline
     * @example
     * // Get one Pipeline
     * const pipeline = await prisma.pipeline.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PipelineFindFirstArgs>(args?: SelectSubset<T, PipelineFindFirstArgs<ExtArgs>>): Prisma__PipelineClient<$Result.GetResult<Prisma.$PipelinePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Pipeline that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PipelineFindFirstOrThrowArgs} args - Arguments to find a Pipeline
     * @example
     * // Get one Pipeline
     * const pipeline = await prisma.pipeline.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PipelineFindFirstOrThrowArgs>(args?: SelectSubset<T, PipelineFindFirstOrThrowArgs<ExtArgs>>): Prisma__PipelineClient<$Result.GetResult<Prisma.$PipelinePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Pipelines that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PipelineFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pipelines
     * const pipelines = await prisma.pipeline.findMany()
     * 
     * // Get first 10 Pipelines
     * const pipelines = await prisma.pipeline.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pipelineWithIdOnly = await prisma.pipeline.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PipelineFindManyArgs>(args?: SelectSubset<T, PipelineFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PipelinePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Pipeline.
     * @param {PipelineCreateArgs} args - Arguments to create a Pipeline.
     * @example
     * // Create one Pipeline
     * const Pipeline = await prisma.pipeline.create({
     *   data: {
     *     // ... data to create a Pipeline
     *   }
     * })
     * 
     */
    create<T extends PipelineCreateArgs>(args: SelectSubset<T, PipelineCreateArgs<ExtArgs>>): Prisma__PipelineClient<$Result.GetResult<Prisma.$PipelinePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Pipelines.
     * @param {PipelineCreateManyArgs} args - Arguments to create many Pipelines.
     * @example
     * // Create many Pipelines
     * const pipeline = await prisma.pipeline.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PipelineCreateManyArgs>(args?: SelectSubset<T, PipelineCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Pipelines and returns the data saved in the database.
     * @param {PipelineCreateManyAndReturnArgs} args - Arguments to create many Pipelines.
     * @example
     * // Create many Pipelines
     * const pipeline = await prisma.pipeline.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Pipelines and only return the `id`
     * const pipelineWithIdOnly = await prisma.pipeline.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PipelineCreateManyAndReturnArgs>(args?: SelectSubset<T, PipelineCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PipelinePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Pipeline.
     * @param {PipelineDeleteArgs} args - Arguments to delete one Pipeline.
     * @example
     * // Delete one Pipeline
     * const Pipeline = await prisma.pipeline.delete({
     *   where: {
     *     // ... filter to delete one Pipeline
     *   }
     * })
     * 
     */
    delete<T extends PipelineDeleteArgs>(args: SelectSubset<T, PipelineDeleteArgs<ExtArgs>>): Prisma__PipelineClient<$Result.GetResult<Prisma.$PipelinePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Pipeline.
     * @param {PipelineUpdateArgs} args - Arguments to update one Pipeline.
     * @example
     * // Update one Pipeline
     * const pipeline = await prisma.pipeline.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PipelineUpdateArgs>(args: SelectSubset<T, PipelineUpdateArgs<ExtArgs>>): Prisma__PipelineClient<$Result.GetResult<Prisma.$PipelinePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Pipelines.
     * @param {PipelineDeleteManyArgs} args - Arguments to filter Pipelines to delete.
     * @example
     * // Delete a few Pipelines
     * const { count } = await prisma.pipeline.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PipelineDeleteManyArgs>(args?: SelectSubset<T, PipelineDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pipelines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PipelineUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pipelines
     * const pipeline = await prisma.pipeline.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PipelineUpdateManyArgs>(args: SelectSubset<T, PipelineUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pipelines and returns the data updated in the database.
     * @param {PipelineUpdateManyAndReturnArgs} args - Arguments to update many Pipelines.
     * @example
     * // Update many Pipelines
     * const pipeline = await prisma.pipeline.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Pipelines and only return the `id`
     * const pipelineWithIdOnly = await prisma.pipeline.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PipelineUpdateManyAndReturnArgs>(args: SelectSubset<T, PipelineUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PipelinePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Pipeline.
     * @param {PipelineUpsertArgs} args - Arguments to update or create a Pipeline.
     * @example
     * // Update or create a Pipeline
     * const pipeline = await prisma.pipeline.upsert({
     *   create: {
     *     // ... data to create a Pipeline
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Pipeline we want to update
     *   }
     * })
     */
    upsert<T extends PipelineUpsertArgs>(args: SelectSubset<T, PipelineUpsertArgs<ExtArgs>>): Prisma__PipelineClient<$Result.GetResult<Prisma.$PipelinePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Pipelines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PipelineCountArgs} args - Arguments to filter Pipelines to count.
     * @example
     * // Count the number of Pipelines
     * const count = await prisma.pipeline.count({
     *   where: {
     *     // ... the filter for the Pipelines we want to count
     *   }
     * })
    **/
    count<T extends PipelineCountArgs>(
      args?: Subset<T, PipelineCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PipelineCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Pipeline.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PipelineAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PipelineAggregateArgs>(args: Subset<T, PipelineAggregateArgs>): Prisma.PrismaPromise<GetPipelineAggregateType<T>>

    /**
     * Group by Pipeline.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PipelineGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PipelineGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PipelineGroupByArgs['orderBy'] }
        : { orderBy?: PipelineGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PipelineGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPipelineGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Pipeline model
   */
  readonly fields: PipelineFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Pipeline.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PipelineClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    stages<T extends Pipeline$stagesArgs<ExtArgs> = {}>(args?: Subset<T, Pipeline$stagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PipelineStageModelPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    pipelineCards<T extends Pipeline$pipelineCardsArgs<ExtArgs> = {}>(args?: Subset<T, Pipeline$pipelineCardsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PipelineCardPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Pipeline model
   */
  interface PipelineFieldRefs {
    readonly id: FieldRef<"Pipeline", 'String'>
    readonly organizationId: FieldRef<"Pipeline", 'String'>
    readonly name: FieldRef<"Pipeline", 'String'>
    readonly createdAt: FieldRef<"Pipeline", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Pipeline findUnique
   */
  export type PipelineFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pipeline
     */
    select?: PipelineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pipeline
     */
    omit?: PipelineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PipelineInclude<ExtArgs> | null
    /**
     * Filter, which Pipeline to fetch.
     */
    where: PipelineWhereUniqueInput
  }

  /**
   * Pipeline findUniqueOrThrow
   */
  export type PipelineFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pipeline
     */
    select?: PipelineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pipeline
     */
    omit?: PipelineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PipelineInclude<ExtArgs> | null
    /**
     * Filter, which Pipeline to fetch.
     */
    where: PipelineWhereUniqueInput
  }

  /**
   * Pipeline findFirst
   */
  export type PipelineFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pipeline
     */
    select?: PipelineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pipeline
     */
    omit?: PipelineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PipelineInclude<ExtArgs> | null
    /**
     * Filter, which Pipeline to fetch.
     */
    where?: PipelineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pipelines to fetch.
     */
    orderBy?: PipelineOrderByWithRelationInput | PipelineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pipelines.
     */
    cursor?: PipelineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pipelines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pipelines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pipelines.
     */
    distinct?: PipelineScalarFieldEnum | PipelineScalarFieldEnum[]
  }

  /**
   * Pipeline findFirstOrThrow
   */
  export type PipelineFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pipeline
     */
    select?: PipelineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pipeline
     */
    omit?: PipelineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PipelineInclude<ExtArgs> | null
    /**
     * Filter, which Pipeline to fetch.
     */
    where?: PipelineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pipelines to fetch.
     */
    orderBy?: PipelineOrderByWithRelationInput | PipelineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pipelines.
     */
    cursor?: PipelineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pipelines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pipelines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pipelines.
     */
    distinct?: PipelineScalarFieldEnum | PipelineScalarFieldEnum[]
  }

  /**
   * Pipeline findMany
   */
  export type PipelineFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pipeline
     */
    select?: PipelineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pipeline
     */
    omit?: PipelineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PipelineInclude<ExtArgs> | null
    /**
     * Filter, which Pipelines to fetch.
     */
    where?: PipelineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pipelines to fetch.
     */
    orderBy?: PipelineOrderByWithRelationInput | PipelineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Pipelines.
     */
    cursor?: PipelineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pipelines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pipelines.
     */
    skip?: number
    distinct?: PipelineScalarFieldEnum | PipelineScalarFieldEnum[]
  }

  /**
   * Pipeline create
   */
  export type PipelineCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pipeline
     */
    select?: PipelineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pipeline
     */
    omit?: PipelineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PipelineInclude<ExtArgs> | null
    /**
     * The data needed to create a Pipeline.
     */
    data: XOR<PipelineCreateInput, PipelineUncheckedCreateInput>
  }

  /**
   * Pipeline createMany
   */
  export type PipelineCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Pipelines.
     */
    data: PipelineCreateManyInput | PipelineCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Pipeline createManyAndReturn
   */
  export type PipelineCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pipeline
     */
    select?: PipelineSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Pipeline
     */
    omit?: PipelineOmit<ExtArgs> | null
    /**
     * The data used to create many Pipelines.
     */
    data: PipelineCreateManyInput | PipelineCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PipelineIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Pipeline update
   */
  export type PipelineUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pipeline
     */
    select?: PipelineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pipeline
     */
    omit?: PipelineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PipelineInclude<ExtArgs> | null
    /**
     * The data needed to update a Pipeline.
     */
    data: XOR<PipelineUpdateInput, PipelineUncheckedUpdateInput>
    /**
     * Choose, which Pipeline to update.
     */
    where: PipelineWhereUniqueInput
  }

  /**
   * Pipeline updateMany
   */
  export type PipelineUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Pipelines.
     */
    data: XOR<PipelineUpdateManyMutationInput, PipelineUncheckedUpdateManyInput>
    /**
     * Filter which Pipelines to update
     */
    where?: PipelineWhereInput
    /**
     * Limit how many Pipelines to update.
     */
    limit?: number
  }

  /**
   * Pipeline updateManyAndReturn
   */
  export type PipelineUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pipeline
     */
    select?: PipelineSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Pipeline
     */
    omit?: PipelineOmit<ExtArgs> | null
    /**
     * The data used to update Pipelines.
     */
    data: XOR<PipelineUpdateManyMutationInput, PipelineUncheckedUpdateManyInput>
    /**
     * Filter which Pipelines to update
     */
    where?: PipelineWhereInput
    /**
     * Limit how many Pipelines to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PipelineIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Pipeline upsert
   */
  export type PipelineUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pipeline
     */
    select?: PipelineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pipeline
     */
    omit?: PipelineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PipelineInclude<ExtArgs> | null
    /**
     * The filter to search for the Pipeline to update in case it exists.
     */
    where: PipelineWhereUniqueInput
    /**
     * In case the Pipeline found by the `where` argument doesn't exist, create a new Pipeline with this data.
     */
    create: XOR<PipelineCreateInput, PipelineUncheckedCreateInput>
    /**
     * In case the Pipeline was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PipelineUpdateInput, PipelineUncheckedUpdateInput>
  }

  /**
   * Pipeline delete
   */
  export type PipelineDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pipeline
     */
    select?: PipelineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pipeline
     */
    omit?: PipelineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PipelineInclude<ExtArgs> | null
    /**
     * Filter which Pipeline to delete.
     */
    where: PipelineWhereUniqueInput
  }

  /**
   * Pipeline deleteMany
   */
  export type PipelineDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pipelines to delete
     */
    where?: PipelineWhereInput
    /**
     * Limit how many Pipelines to delete.
     */
    limit?: number
  }

  /**
   * Pipeline.stages
   */
  export type Pipeline$stagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PipelineStageModel
     */
    select?: PipelineStageModelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PipelineStageModel
     */
    omit?: PipelineStageModelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PipelineStageModelInclude<ExtArgs> | null
    where?: PipelineStageModelWhereInput
    orderBy?: PipelineStageModelOrderByWithRelationInput | PipelineStageModelOrderByWithRelationInput[]
    cursor?: PipelineStageModelWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PipelineStageModelScalarFieldEnum | PipelineStageModelScalarFieldEnum[]
  }

  /**
   * Pipeline.pipelineCards
   */
  export type Pipeline$pipelineCardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PipelineCard
     */
    select?: PipelineCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PipelineCard
     */
    omit?: PipelineCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PipelineCardInclude<ExtArgs> | null
    where?: PipelineCardWhereInput
    orderBy?: PipelineCardOrderByWithRelationInput | PipelineCardOrderByWithRelationInput[]
    cursor?: PipelineCardWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PipelineCardScalarFieldEnum | PipelineCardScalarFieldEnum[]
  }

  /**
   * Pipeline without action
   */
  export type PipelineDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pipeline
     */
    select?: PipelineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pipeline
     */
    omit?: PipelineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PipelineInclude<ExtArgs> | null
  }


  /**
   * Model PipelineStageModel
   */

  export type AggregatePipelineStageModel = {
    _count: PipelineStageModelCountAggregateOutputType | null
    _avg: PipelineStageModelAvgAggregateOutputType | null
    _sum: PipelineStageModelSumAggregateOutputType | null
    _min: PipelineStageModelMinAggregateOutputType | null
    _max: PipelineStageModelMaxAggregateOutputType | null
  }

  export type PipelineStageModelAvgAggregateOutputType = {
    position: number | null
  }

  export type PipelineStageModelSumAggregateOutputType = {
    position: number | null
  }

  export type PipelineStageModelMinAggregateOutputType = {
    id: string | null
    pipelineId: string | null
    name: string | null
    position: number | null
  }

  export type PipelineStageModelMaxAggregateOutputType = {
    id: string | null
    pipelineId: string | null
    name: string | null
    position: number | null
  }

  export type PipelineStageModelCountAggregateOutputType = {
    id: number
    pipelineId: number
    name: number
    position: number
    _all: number
  }


  export type PipelineStageModelAvgAggregateInputType = {
    position?: true
  }

  export type PipelineStageModelSumAggregateInputType = {
    position?: true
  }

  export type PipelineStageModelMinAggregateInputType = {
    id?: true
    pipelineId?: true
    name?: true
    position?: true
  }

  export type PipelineStageModelMaxAggregateInputType = {
    id?: true
    pipelineId?: true
    name?: true
    position?: true
  }

  export type PipelineStageModelCountAggregateInputType = {
    id?: true
    pipelineId?: true
    name?: true
    position?: true
    _all?: true
  }

  export type PipelineStageModelAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PipelineStageModel to aggregate.
     */
    where?: PipelineStageModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PipelineStageModels to fetch.
     */
    orderBy?: PipelineStageModelOrderByWithRelationInput | PipelineStageModelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PipelineStageModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PipelineStageModels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PipelineStageModels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PipelineStageModels
    **/
    _count?: true | PipelineStageModelCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PipelineStageModelAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PipelineStageModelSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PipelineStageModelMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PipelineStageModelMaxAggregateInputType
  }

  export type GetPipelineStageModelAggregateType<T extends PipelineStageModelAggregateArgs> = {
        [P in keyof T & keyof AggregatePipelineStageModel]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePipelineStageModel[P]>
      : GetScalarType<T[P], AggregatePipelineStageModel[P]>
  }




  export type PipelineStageModelGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PipelineStageModelWhereInput
    orderBy?: PipelineStageModelOrderByWithAggregationInput | PipelineStageModelOrderByWithAggregationInput[]
    by: PipelineStageModelScalarFieldEnum[] | PipelineStageModelScalarFieldEnum
    having?: PipelineStageModelScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PipelineStageModelCountAggregateInputType | true
    _avg?: PipelineStageModelAvgAggregateInputType
    _sum?: PipelineStageModelSumAggregateInputType
    _min?: PipelineStageModelMinAggregateInputType
    _max?: PipelineStageModelMaxAggregateInputType
  }

  export type PipelineStageModelGroupByOutputType = {
    id: string
    pipelineId: string
    name: string
    position: number
    _count: PipelineStageModelCountAggregateOutputType | null
    _avg: PipelineStageModelAvgAggregateOutputType | null
    _sum: PipelineStageModelSumAggregateOutputType | null
    _min: PipelineStageModelMinAggregateOutputType | null
    _max: PipelineStageModelMaxAggregateOutputType | null
  }

  type GetPipelineStageModelGroupByPayload<T extends PipelineStageModelGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PipelineStageModelGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PipelineStageModelGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PipelineStageModelGroupByOutputType[P]>
            : GetScalarType<T[P], PipelineStageModelGroupByOutputType[P]>
        }
      >
    >


  export type PipelineStageModelSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    pipelineId?: boolean
    name?: boolean
    position?: boolean
    pipeline?: boolean | PipelineDefaultArgs<ExtArgs>
    cards?: boolean | PipelineStageModel$cardsArgs<ExtArgs>
    _count?: boolean | PipelineStageModelCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pipelineStageModel"]>

  export type PipelineStageModelSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    pipelineId?: boolean
    name?: boolean
    position?: boolean
    pipeline?: boolean | PipelineDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pipelineStageModel"]>

  export type PipelineStageModelSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    pipelineId?: boolean
    name?: boolean
    position?: boolean
    pipeline?: boolean | PipelineDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pipelineStageModel"]>

  export type PipelineStageModelSelectScalar = {
    id?: boolean
    pipelineId?: boolean
    name?: boolean
    position?: boolean
  }

  export type PipelineStageModelOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "pipelineId" | "name" | "position", ExtArgs["result"]["pipelineStageModel"]>
  export type PipelineStageModelInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pipeline?: boolean | PipelineDefaultArgs<ExtArgs>
    cards?: boolean | PipelineStageModel$cardsArgs<ExtArgs>
    _count?: boolean | PipelineStageModelCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PipelineStageModelIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pipeline?: boolean | PipelineDefaultArgs<ExtArgs>
  }
  export type PipelineStageModelIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pipeline?: boolean | PipelineDefaultArgs<ExtArgs>
  }

  export type $PipelineStageModelPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PipelineStageModel"
    objects: {
      pipeline: Prisma.$PipelinePayload<ExtArgs>
      cards: Prisma.$PipelineCardPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      pipelineId: string
      name: string
      position: number
    }, ExtArgs["result"]["pipelineStageModel"]>
    composites: {}
  }

  type PipelineStageModelGetPayload<S extends boolean | null | undefined | PipelineStageModelDefaultArgs> = $Result.GetResult<Prisma.$PipelineStageModelPayload, S>

  type PipelineStageModelCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PipelineStageModelFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PipelineStageModelCountAggregateInputType | true
    }

  export interface PipelineStageModelDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PipelineStageModel'], meta: { name: 'PipelineStageModel' } }
    /**
     * Find zero or one PipelineStageModel that matches the filter.
     * @param {PipelineStageModelFindUniqueArgs} args - Arguments to find a PipelineStageModel
     * @example
     * // Get one PipelineStageModel
     * const pipelineStageModel = await prisma.pipelineStageModel.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PipelineStageModelFindUniqueArgs>(args: SelectSubset<T, PipelineStageModelFindUniqueArgs<ExtArgs>>): Prisma__PipelineStageModelClient<$Result.GetResult<Prisma.$PipelineStageModelPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PipelineStageModel that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PipelineStageModelFindUniqueOrThrowArgs} args - Arguments to find a PipelineStageModel
     * @example
     * // Get one PipelineStageModel
     * const pipelineStageModel = await prisma.pipelineStageModel.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PipelineStageModelFindUniqueOrThrowArgs>(args: SelectSubset<T, PipelineStageModelFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PipelineStageModelClient<$Result.GetResult<Prisma.$PipelineStageModelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PipelineStageModel that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PipelineStageModelFindFirstArgs} args - Arguments to find a PipelineStageModel
     * @example
     * // Get one PipelineStageModel
     * const pipelineStageModel = await prisma.pipelineStageModel.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PipelineStageModelFindFirstArgs>(args?: SelectSubset<T, PipelineStageModelFindFirstArgs<ExtArgs>>): Prisma__PipelineStageModelClient<$Result.GetResult<Prisma.$PipelineStageModelPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PipelineStageModel that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PipelineStageModelFindFirstOrThrowArgs} args - Arguments to find a PipelineStageModel
     * @example
     * // Get one PipelineStageModel
     * const pipelineStageModel = await prisma.pipelineStageModel.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PipelineStageModelFindFirstOrThrowArgs>(args?: SelectSubset<T, PipelineStageModelFindFirstOrThrowArgs<ExtArgs>>): Prisma__PipelineStageModelClient<$Result.GetResult<Prisma.$PipelineStageModelPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PipelineStageModels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PipelineStageModelFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PipelineStageModels
     * const pipelineStageModels = await prisma.pipelineStageModel.findMany()
     * 
     * // Get first 10 PipelineStageModels
     * const pipelineStageModels = await prisma.pipelineStageModel.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pipelineStageModelWithIdOnly = await prisma.pipelineStageModel.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PipelineStageModelFindManyArgs>(args?: SelectSubset<T, PipelineStageModelFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PipelineStageModelPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PipelineStageModel.
     * @param {PipelineStageModelCreateArgs} args - Arguments to create a PipelineStageModel.
     * @example
     * // Create one PipelineStageModel
     * const PipelineStageModel = await prisma.pipelineStageModel.create({
     *   data: {
     *     // ... data to create a PipelineStageModel
     *   }
     * })
     * 
     */
    create<T extends PipelineStageModelCreateArgs>(args: SelectSubset<T, PipelineStageModelCreateArgs<ExtArgs>>): Prisma__PipelineStageModelClient<$Result.GetResult<Prisma.$PipelineStageModelPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PipelineStageModels.
     * @param {PipelineStageModelCreateManyArgs} args - Arguments to create many PipelineStageModels.
     * @example
     * // Create many PipelineStageModels
     * const pipelineStageModel = await prisma.pipelineStageModel.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PipelineStageModelCreateManyArgs>(args?: SelectSubset<T, PipelineStageModelCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PipelineStageModels and returns the data saved in the database.
     * @param {PipelineStageModelCreateManyAndReturnArgs} args - Arguments to create many PipelineStageModels.
     * @example
     * // Create many PipelineStageModels
     * const pipelineStageModel = await prisma.pipelineStageModel.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PipelineStageModels and only return the `id`
     * const pipelineStageModelWithIdOnly = await prisma.pipelineStageModel.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PipelineStageModelCreateManyAndReturnArgs>(args?: SelectSubset<T, PipelineStageModelCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PipelineStageModelPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PipelineStageModel.
     * @param {PipelineStageModelDeleteArgs} args - Arguments to delete one PipelineStageModel.
     * @example
     * // Delete one PipelineStageModel
     * const PipelineStageModel = await prisma.pipelineStageModel.delete({
     *   where: {
     *     // ... filter to delete one PipelineStageModel
     *   }
     * })
     * 
     */
    delete<T extends PipelineStageModelDeleteArgs>(args: SelectSubset<T, PipelineStageModelDeleteArgs<ExtArgs>>): Prisma__PipelineStageModelClient<$Result.GetResult<Prisma.$PipelineStageModelPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PipelineStageModel.
     * @param {PipelineStageModelUpdateArgs} args - Arguments to update one PipelineStageModel.
     * @example
     * // Update one PipelineStageModel
     * const pipelineStageModel = await prisma.pipelineStageModel.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PipelineStageModelUpdateArgs>(args: SelectSubset<T, PipelineStageModelUpdateArgs<ExtArgs>>): Prisma__PipelineStageModelClient<$Result.GetResult<Prisma.$PipelineStageModelPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PipelineStageModels.
     * @param {PipelineStageModelDeleteManyArgs} args - Arguments to filter PipelineStageModels to delete.
     * @example
     * // Delete a few PipelineStageModels
     * const { count } = await prisma.pipelineStageModel.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PipelineStageModelDeleteManyArgs>(args?: SelectSubset<T, PipelineStageModelDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PipelineStageModels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PipelineStageModelUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PipelineStageModels
     * const pipelineStageModel = await prisma.pipelineStageModel.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PipelineStageModelUpdateManyArgs>(args: SelectSubset<T, PipelineStageModelUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PipelineStageModels and returns the data updated in the database.
     * @param {PipelineStageModelUpdateManyAndReturnArgs} args - Arguments to update many PipelineStageModels.
     * @example
     * // Update many PipelineStageModels
     * const pipelineStageModel = await prisma.pipelineStageModel.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PipelineStageModels and only return the `id`
     * const pipelineStageModelWithIdOnly = await prisma.pipelineStageModel.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PipelineStageModelUpdateManyAndReturnArgs>(args: SelectSubset<T, PipelineStageModelUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PipelineStageModelPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PipelineStageModel.
     * @param {PipelineStageModelUpsertArgs} args - Arguments to update or create a PipelineStageModel.
     * @example
     * // Update or create a PipelineStageModel
     * const pipelineStageModel = await prisma.pipelineStageModel.upsert({
     *   create: {
     *     // ... data to create a PipelineStageModel
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PipelineStageModel we want to update
     *   }
     * })
     */
    upsert<T extends PipelineStageModelUpsertArgs>(args: SelectSubset<T, PipelineStageModelUpsertArgs<ExtArgs>>): Prisma__PipelineStageModelClient<$Result.GetResult<Prisma.$PipelineStageModelPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PipelineStageModels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PipelineStageModelCountArgs} args - Arguments to filter PipelineStageModels to count.
     * @example
     * // Count the number of PipelineStageModels
     * const count = await prisma.pipelineStageModel.count({
     *   where: {
     *     // ... the filter for the PipelineStageModels we want to count
     *   }
     * })
    **/
    count<T extends PipelineStageModelCountArgs>(
      args?: Subset<T, PipelineStageModelCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PipelineStageModelCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PipelineStageModel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PipelineStageModelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PipelineStageModelAggregateArgs>(args: Subset<T, PipelineStageModelAggregateArgs>): Prisma.PrismaPromise<GetPipelineStageModelAggregateType<T>>

    /**
     * Group by PipelineStageModel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PipelineStageModelGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PipelineStageModelGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PipelineStageModelGroupByArgs['orderBy'] }
        : { orderBy?: PipelineStageModelGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PipelineStageModelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPipelineStageModelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PipelineStageModel model
   */
  readonly fields: PipelineStageModelFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PipelineStageModel.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PipelineStageModelClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    pipeline<T extends PipelineDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PipelineDefaultArgs<ExtArgs>>): Prisma__PipelineClient<$Result.GetResult<Prisma.$PipelinePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    cards<T extends PipelineStageModel$cardsArgs<ExtArgs> = {}>(args?: Subset<T, PipelineStageModel$cardsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PipelineCardPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PipelineStageModel model
   */
  interface PipelineStageModelFieldRefs {
    readonly id: FieldRef<"PipelineStageModel", 'String'>
    readonly pipelineId: FieldRef<"PipelineStageModel", 'String'>
    readonly name: FieldRef<"PipelineStageModel", 'String'>
    readonly position: FieldRef<"PipelineStageModel", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * PipelineStageModel findUnique
   */
  export type PipelineStageModelFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PipelineStageModel
     */
    select?: PipelineStageModelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PipelineStageModel
     */
    omit?: PipelineStageModelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PipelineStageModelInclude<ExtArgs> | null
    /**
     * Filter, which PipelineStageModel to fetch.
     */
    where: PipelineStageModelWhereUniqueInput
  }

  /**
   * PipelineStageModel findUniqueOrThrow
   */
  export type PipelineStageModelFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PipelineStageModel
     */
    select?: PipelineStageModelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PipelineStageModel
     */
    omit?: PipelineStageModelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PipelineStageModelInclude<ExtArgs> | null
    /**
     * Filter, which PipelineStageModel to fetch.
     */
    where: PipelineStageModelWhereUniqueInput
  }

  /**
   * PipelineStageModel findFirst
   */
  export type PipelineStageModelFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PipelineStageModel
     */
    select?: PipelineStageModelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PipelineStageModel
     */
    omit?: PipelineStageModelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PipelineStageModelInclude<ExtArgs> | null
    /**
     * Filter, which PipelineStageModel to fetch.
     */
    where?: PipelineStageModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PipelineStageModels to fetch.
     */
    orderBy?: PipelineStageModelOrderByWithRelationInput | PipelineStageModelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PipelineStageModels.
     */
    cursor?: PipelineStageModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PipelineStageModels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PipelineStageModels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PipelineStageModels.
     */
    distinct?: PipelineStageModelScalarFieldEnum | PipelineStageModelScalarFieldEnum[]
  }

  /**
   * PipelineStageModel findFirstOrThrow
   */
  export type PipelineStageModelFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PipelineStageModel
     */
    select?: PipelineStageModelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PipelineStageModel
     */
    omit?: PipelineStageModelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PipelineStageModelInclude<ExtArgs> | null
    /**
     * Filter, which PipelineStageModel to fetch.
     */
    where?: PipelineStageModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PipelineStageModels to fetch.
     */
    orderBy?: PipelineStageModelOrderByWithRelationInput | PipelineStageModelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PipelineStageModels.
     */
    cursor?: PipelineStageModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PipelineStageModels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PipelineStageModels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PipelineStageModels.
     */
    distinct?: PipelineStageModelScalarFieldEnum | PipelineStageModelScalarFieldEnum[]
  }

  /**
   * PipelineStageModel findMany
   */
  export type PipelineStageModelFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PipelineStageModel
     */
    select?: PipelineStageModelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PipelineStageModel
     */
    omit?: PipelineStageModelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PipelineStageModelInclude<ExtArgs> | null
    /**
     * Filter, which PipelineStageModels to fetch.
     */
    where?: PipelineStageModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PipelineStageModels to fetch.
     */
    orderBy?: PipelineStageModelOrderByWithRelationInput | PipelineStageModelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PipelineStageModels.
     */
    cursor?: PipelineStageModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PipelineStageModels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PipelineStageModels.
     */
    skip?: number
    distinct?: PipelineStageModelScalarFieldEnum | PipelineStageModelScalarFieldEnum[]
  }

  /**
   * PipelineStageModel create
   */
  export type PipelineStageModelCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PipelineStageModel
     */
    select?: PipelineStageModelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PipelineStageModel
     */
    omit?: PipelineStageModelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PipelineStageModelInclude<ExtArgs> | null
    /**
     * The data needed to create a PipelineStageModel.
     */
    data: XOR<PipelineStageModelCreateInput, PipelineStageModelUncheckedCreateInput>
  }

  /**
   * PipelineStageModel createMany
   */
  export type PipelineStageModelCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PipelineStageModels.
     */
    data: PipelineStageModelCreateManyInput | PipelineStageModelCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PipelineStageModel createManyAndReturn
   */
  export type PipelineStageModelCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PipelineStageModel
     */
    select?: PipelineStageModelSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PipelineStageModel
     */
    omit?: PipelineStageModelOmit<ExtArgs> | null
    /**
     * The data used to create many PipelineStageModels.
     */
    data: PipelineStageModelCreateManyInput | PipelineStageModelCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PipelineStageModelIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PipelineStageModel update
   */
  export type PipelineStageModelUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PipelineStageModel
     */
    select?: PipelineStageModelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PipelineStageModel
     */
    omit?: PipelineStageModelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PipelineStageModelInclude<ExtArgs> | null
    /**
     * The data needed to update a PipelineStageModel.
     */
    data: XOR<PipelineStageModelUpdateInput, PipelineStageModelUncheckedUpdateInput>
    /**
     * Choose, which PipelineStageModel to update.
     */
    where: PipelineStageModelWhereUniqueInput
  }

  /**
   * PipelineStageModel updateMany
   */
  export type PipelineStageModelUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PipelineStageModels.
     */
    data: XOR<PipelineStageModelUpdateManyMutationInput, PipelineStageModelUncheckedUpdateManyInput>
    /**
     * Filter which PipelineStageModels to update
     */
    where?: PipelineStageModelWhereInput
    /**
     * Limit how many PipelineStageModels to update.
     */
    limit?: number
  }

  /**
   * PipelineStageModel updateManyAndReturn
   */
  export type PipelineStageModelUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PipelineStageModel
     */
    select?: PipelineStageModelSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PipelineStageModel
     */
    omit?: PipelineStageModelOmit<ExtArgs> | null
    /**
     * The data used to update PipelineStageModels.
     */
    data: XOR<PipelineStageModelUpdateManyMutationInput, PipelineStageModelUncheckedUpdateManyInput>
    /**
     * Filter which PipelineStageModels to update
     */
    where?: PipelineStageModelWhereInput
    /**
     * Limit how many PipelineStageModels to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PipelineStageModelIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PipelineStageModel upsert
   */
  export type PipelineStageModelUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PipelineStageModel
     */
    select?: PipelineStageModelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PipelineStageModel
     */
    omit?: PipelineStageModelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PipelineStageModelInclude<ExtArgs> | null
    /**
     * The filter to search for the PipelineStageModel to update in case it exists.
     */
    where: PipelineStageModelWhereUniqueInput
    /**
     * In case the PipelineStageModel found by the `where` argument doesn't exist, create a new PipelineStageModel with this data.
     */
    create: XOR<PipelineStageModelCreateInput, PipelineStageModelUncheckedCreateInput>
    /**
     * In case the PipelineStageModel was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PipelineStageModelUpdateInput, PipelineStageModelUncheckedUpdateInput>
  }

  /**
   * PipelineStageModel delete
   */
  export type PipelineStageModelDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PipelineStageModel
     */
    select?: PipelineStageModelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PipelineStageModel
     */
    omit?: PipelineStageModelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PipelineStageModelInclude<ExtArgs> | null
    /**
     * Filter which PipelineStageModel to delete.
     */
    where: PipelineStageModelWhereUniqueInput
  }

  /**
   * PipelineStageModel deleteMany
   */
  export type PipelineStageModelDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PipelineStageModels to delete
     */
    where?: PipelineStageModelWhereInput
    /**
     * Limit how many PipelineStageModels to delete.
     */
    limit?: number
  }

  /**
   * PipelineStageModel.cards
   */
  export type PipelineStageModel$cardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PipelineCard
     */
    select?: PipelineCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PipelineCard
     */
    omit?: PipelineCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PipelineCardInclude<ExtArgs> | null
    where?: PipelineCardWhereInput
    orderBy?: PipelineCardOrderByWithRelationInput | PipelineCardOrderByWithRelationInput[]
    cursor?: PipelineCardWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PipelineCardScalarFieldEnum | PipelineCardScalarFieldEnum[]
  }

  /**
   * PipelineStageModel without action
   */
  export type PipelineStageModelDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PipelineStageModel
     */
    select?: PipelineStageModelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PipelineStageModel
     */
    omit?: PipelineStageModelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PipelineStageModelInclude<ExtArgs> | null
  }


  /**
   * Model PipelineCard
   */

  export type AggregatePipelineCard = {
    _count: PipelineCardCountAggregateOutputType | null
    _avg: PipelineCardAvgAggregateOutputType | null
    _sum: PipelineCardSumAggregateOutputType | null
    _min: PipelineCardMinAggregateOutputType | null
    _max: PipelineCardMaxAggregateOutputType | null
  }

  export type PipelineCardAvgAggregateOutputType = {
    value: number | null
  }

  export type PipelineCardSumAggregateOutputType = {
    value: number | null
  }

  export type PipelineCardMinAggregateOutputType = {
    id: string | null
    organizationId: string | null
    pipelineId: string | null
    stageId: string | null
    clientId: string | null
    title: string | null
    value: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PipelineCardMaxAggregateOutputType = {
    id: string | null
    organizationId: string | null
    pipelineId: string | null
    stageId: string | null
    clientId: string | null
    title: string | null
    value: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PipelineCardCountAggregateOutputType = {
    id: number
    organizationId: number
    pipelineId: number
    stageId: number
    clientId: number
    title: number
    value: number
    metadata: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PipelineCardAvgAggregateInputType = {
    value?: true
  }

  export type PipelineCardSumAggregateInputType = {
    value?: true
  }

  export type PipelineCardMinAggregateInputType = {
    id?: true
    organizationId?: true
    pipelineId?: true
    stageId?: true
    clientId?: true
    title?: true
    value?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PipelineCardMaxAggregateInputType = {
    id?: true
    organizationId?: true
    pipelineId?: true
    stageId?: true
    clientId?: true
    title?: true
    value?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PipelineCardCountAggregateInputType = {
    id?: true
    organizationId?: true
    pipelineId?: true
    stageId?: true
    clientId?: true
    title?: true
    value?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PipelineCardAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PipelineCard to aggregate.
     */
    where?: PipelineCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PipelineCards to fetch.
     */
    orderBy?: PipelineCardOrderByWithRelationInput | PipelineCardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PipelineCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PipelineCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PipelineCards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PipelineCards
    **/
    _count?: true | PipelineCardCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PipelineCardAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PipelineCardSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PipelineCardMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PipelineCardMaxAggregateInputType
  }

  export type GetPipelineCardAggregateType<T extends PipelineCardAggregateArgs> = {
        [P in keyof T & keyof AggregatePipelineCard]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePipelineCard[P]>
      : GetScalarType<T[P], AggregatePipelineCard[P]>
  }




  export type PipelineCardGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PipelineCardWhereInput
    orderBy?: PipelineCardOrderByWithAggregationInput | PipelineCardOrderByWithAggregationInput[]
    by: PipelineCardScalarFieldEnum[] | PipelineCardScalarFieldEnum
    having?: PipelineCardScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PipelineCardCountAggregateInputType | true
    _avg?: PipelineCardAvgAggregateInputType
    _sum?: PipelineCardSumAggregateInputType
    _min?: PipelineCardMinAggregateInputType
    _max?: PipelineCardMaxAggregateInputType
  }

  export type PipelineCardGroupByOutputType = {
    id: string
    organizationId: string
    pipelineId: string
    stageId: string
    clientId: string
    title: string
    value: number | null
    metadata: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: PipelineCardCountAggregateOutputType | null
    _avg: PipelineCardAvgAggregateOutputType | null
    _sum: PipelineCardSumAggregateOutputType | null
    _min: PipelineCardMinAggregateOutputType | null
    _max: PipelineCardMaxAggregateOutputType | null
  }

  type GetPipelineCardGroupByPayload<T extends PipelineCardGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PipelineCardGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PipelineCardGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PipelineCardGroupByOutputType[P]>
            : GetScalarType<T[P], PipelineCardGroupByOutputType[P]>
        }
      >
    >


  export type PipelineCardSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    pipelineId?: boolean
    stageId?: boolean
    clientId?: boolean
    title?: boolean
    value?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    pipeline?: boolean | PipelineDefaultArgs<ExtArgs>
    stage?: boolean | PipelineStageModelDefaultArgs<ExtArgs>
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pipelineCard"]>

  export type PipelineCardSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    pipelineId?: boolean
    stageId?: boolean
    clientId?: boolean
    title?: boolean
    value?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    pipeline?: boolean | PipelineDefaultArgs<ExtArgs>
    stage?: boolean | PipelineStageModelDefaultArgs<ExtArgs>
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pipelineCard"]>

  export type PipelineCardSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    pipelineId?: boolean
    stageId?: boolean
    clientId?: boolean
    title?: boolean
    value?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    pipeline?: boolean | PipelineDefaultArgs<ExtArgs>
    stage?: boolean | PipelineStageModelDefaultArgs<ExtArgs>
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pipelineCard"]>

  export type PipelineCardSelectScalar = {
    id?: boolean
    organizationId?: boolean
    pipelineId?: boolean
    stageId?: boolean
    clientId?: boolean
    title?: boolean
    value?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PipelineCardOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "organizationId" | "pipelineId" | "stageId" | "clientId" | "title" | "value" | "metadata" | "createdAt" | "updatedAt", ExtArgs["result"]["pipelineCard"]>
  export type PipelineCardInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    pipeline?: boolean | PipelineDefaultArgs<ExtArgs>
    stage?: boolean | PipelineStageModelDefaultArgs<ExtArgs>
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }
  export type PipelineCardIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    pipeline?: boolean | PipelineDefaultArgs<ExtArgs>
    stage?: boolean | PipelineStageModelDefaultArgs<ExtArgs>
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }
  export type PipelineCardIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    pipeline?: boolean | PipelineDefaultArgs<ExtArgs>
    stage?: boolean | PipelineStageModelDefaultArgs<ExtArgs>
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }

  export type $PipelineCardPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PipelineCard"
    objects: {
      organization: Prisma.$OrganizationPayload<ExtArgs>
      pipeline: Prisma.$PipelinePayload<ExtArgs>
      stage: Prisma.$PipelineStageModelPayload<ExtArgs>
      client: Prisma.$ClientPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      organizationId: string
      pipelineId: string
      stageId: string
      clientId: string
      title: string
      value: number | null
      metadata: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["pipelineCard"]>
    composites: {}
  }

  type PipelineCardGetPayload<S extends boolean | null | undefined | PipelineCardDefaultArgs> = $Result.GetResult<Prisma.$PipelineCardPayload, S>

  type PipelineCardCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PipelineCardFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PipelineCardCountAggregateInputType | true
    }

  export interface PipelineCardDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PipelineCard'], meta: { name: 'PipelineCard' } }
    /**
     * Find zero or one PipelineCard that matches the filter.
     * @param {PipelineCardFindUniqueArgs} args - Arguments to find a PipelineCard
     * @example
     * // Get one PipelineCard
     * const pipelineCard = await prisma.pipelineCard.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PipelineCardFindUniqueArgs>(args: SelectSubset<T, PipelineCardFindUniqueArgs<ExtArgs>>): Prisma__PipelineCardClient<$Result.GetResult<Prisma.$PipelineCardPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PipelineCard that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PipelineCardFindUniqueOrThrowArgs} args - Arguments to find a PipelineCard
     * @example
     * // Get one PipelineCard
     * const pipelineCard = await prisma.pipelineCard.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PipelineCardFindUniqueOrThrowArgs>(args: SelectSubset<T, PipelineCardFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PipelineCardClient<$Result.GetResult<Prisma.$PipelineCardPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PipelineCard that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PipelineCardFindFirstArgs} args - Arguments to find a PipelineCard
     * @example
     * // Get one PipelineCard
     * const pipelineCard = await prisma.pipelineCard.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PipelineCardFindFirstArgs>(args?: SelectSubset<T, PipelineCardFindFirstArgs<ExtArgs>>): Prisma__PipelineCardClient<$Result.GetResult<Prisma.$PipelineCardPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PipelineCard that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PipelineCardFindFirstOrThrowArgs} args - Arguments to find a PipelineCard
     * @example
     * // Get one PipelineCard
     * const pipelineCard = await prisma.pipelineCard.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PipelineCardFindFirstOrThrowArgs>(args?: SelectSubset<T, PipelineCardFindFirstOrThrowArgs<ExtArgs>>): Prisma__PipelineCardClient<$Result.GetResult<Prisma.$PipelineCardPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PipelineCards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PipelineCardFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PipelineCards
     * const pipelineCards = await prisma.pipelineCard.findMany()
     * 
     * // Get first 10 PipelineCards
     * const pipelineCards = await prisma.pipelineCard.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pipelineCardWithIdOnly = await prisma.pipelineCard.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PipelineCardFindManyArgs>(args?: SelectSubset<T, PipelineCardFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PipelineCardPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PipelineCard.
     * @param {PipelineCardCreateArgs} args - Arguments to create a PipelineCard.
     * @example
     * // Create one PipelineCard
     * const PipelineCard = await prisma.pipelineCard.create({
     *   data: {
     *     // ... data to create a PipelineCard
     *   }
     * })
     * 
     */
    create<T extends PipelineCardCreateArgs>(args: SelectSubset<T, PipelineCardCreateArgs<ExtArgs>>): Prisma__PipelineCardClient<$Result.GetResult<Prisma.$PipelineCardPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PipelineCards.
     * @param {PipelineCardCreateManyArgs} args - Arguments to create many PipelineCards.
     * @example
     * // Create many PipelineCards
     * const pipelineCard = await prisma.pipelineCard.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PipelineCardCreateManyArgs>(args?: SelectSubset<T, PipelineCardCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PipelineCards and returns the data saved in the database.
     * @param {PipelineCardCreateManyAndReturnArgs} args - Arguments to create many PipelineCards.
     * @example
     * // Create many PipelineCards
     * const pipelineCard = await prisma.pipelineCard.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PipelineCards and only return the `id`
     * const pipelineCardWithIdOnly = await prisma.pipelineCard.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PipelineCardCreateManyAndReturnArgs>(args?: SelectSubset<T, PipelineCardCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PipelineCardPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PipelineCard.
     * @param {PipelineCardDeleteArgs} args - Arguments to delete one PipelineCard.
     * @example
     * // Delete one PipelineCard
     * const PipelineCard = await prisma.pipelineCard.delete({
     *   where: {
     *     // ... filter to delete one PipelineCard
     *   }
     * })
     * 
     */
    delete<T extends PipelineCardDeleteArgs>(args: SelectSubset<T, PipelineCardDeleteArgs<ExtArgs>>): Prisma__PipelineCardClient<$Result.GetResult<Prisma.$PipelineCardPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PipelineCard.
     * @param {PipelineCardUpdateArgs} args - Arguments to update one PipelineCard.
     * @example
     * // Update one PipelineCard
     * const pipelineCard = await prisma.pipelineCard.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PipelineCardUpdateArgs>(args: SelectSubset<T, PipelineCardUpdateArgs<ExtArgs>>): Prisma__PipelineCardClient<$Result.GetResult<Prisma.$PipelineCardPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PipelineCards.
     * @param {PipelineCardDeleteManyArgs} args - Arguments to filter PipelineCards to delete.
     * @example
     * // Delete a few PipelineCards
     * const { count } = await prisma.pipelineCard.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PipelineCardDeleteManyArgs>(args?: SelectSubset<T, PipelineCardDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PipelineCards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PipelineCardUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PipelineCards
     * const pipelineCard = await prisma.pipelineCard.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PipelineCardUpdateManyArgs>(args: SelectSubset<T, PipelineCardUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PipelineCards and returns the data updated in the database.
     * @param {PipelineCardUpdateManyAndReturnArgs} args - Arguments to update many PipelineCards.
     * @example
     * // Update many PipelineCards
     * const pipelineCard = await prisma.pipelineCard.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PipelineCards and only return the `id`
     * const pipelineCardWithIdOnly = await prisma.pipelineCard.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PipelineCardUpdateManyAndReturnArgs>(args: SelectSubset<T, PipelineCardUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PipelineCardPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PipelineCard.
     * @param {PipelineCardUpsertArgs} args - Arguments to update or create a PipelineCard.
     * @example
     * // Update or create a PipelineCard
     * const pipelineCard = await prisma.pipelineCard.upsert({
     *   create: {
     *     // ... data to create a PipelineCard
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PipelineCard we want to update
     *   }
     * })
     */
    upsert<T extends PipelineCardUpsertArgs>(args: SelectSubset<T, PipelineCardUpsertArgs<ExtArgs>>): Prisma__PipelineCardClient<$Result.GetResult<Prisma.$PipelineCardPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PipelineCards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PipelineCardCountArgs} args - Arguments to filter PipelineCards to count.
     * @example
     * // Count the number of PipelineCards
     * const count = await prisma.pipelineCard.count({
     *   where: {
     *     // ... the filter for the PipelineCards we want to count
     *   }
     * })
    **/
    count<T extends PipelineCardCountArgs>(
      args?: Subset<T, PipelineCardCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PipelineCardCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PipelineCard.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PipelineCardAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PipelineCardAggregateArgs>(args: Subset<T, PipelineCardAggregateArgs>): Prisma.PrismaPromise<GetPipelineCardAggregateType<T>>

    /**
     * Group by PipelineCard.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PipelineCardGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PipelineCardGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PipelineCardGroupByArgs['orderBy'] }
        : { orderBy?: PipelineCardGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PipelineCardGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPipelineCardGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PipelineCard model
   */
  readonly fields: PipelineCardFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PipelineCard.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PipelineCardClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    pipeline<T extends PipelineDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PipelineDefaultArgs<ExtArgs>>): Prisma__PipelineClient<$Result.GetResult<Prisma.$PipelinePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    stage<T extends PipelineStageModelDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PipelineStageModelDefaultArgs<ExtArgs>>): Prisma__PipelineStageModelClient<$Result.GetResult<Prisma.$PipelineStageModelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    client<T extends ClientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClientDefaultArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PipelineCard model
   */
  interface PipelineCardFieldRefs {
    readonly id: FieldRef<"PipelineCard", 'String'>
    readonly organizationId: FieldRef<"PipelineCard", 'String'>
    readonly pipelineId: FieldRef<"PipelineCard", 'String'>
    readonly stageId: FieldRef<"PipelineCard", 'String'>
    readonly clientId: FieldRef<"PipelineCard", 'String'>
    readonly title: FieldRef<"PipelineCard", 'String'>
    readonly value: FieldRef<"PipelineCard", 'Float'>
    readonly metadata: FieldRef<"PipelineCard", 'Json'>
    readonly createdAt: FieldRef<"PipelineCard", 'DateTime'>
    readonly updatedAt: FieldRef<"PipelineCard", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PipelineCard findUnique
   */
  export type PipelineCardFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PipelineCard
     */
    select?: PipelineCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PipelineCard
     */
    omit?: PipelineCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PipelineCardInclude<ExtArgs> | null
    /**
     * Filter, which PipelineCard to fetch.
     */
    where: PipelineCardWhereUniqueInput
  }

  /**
   * PipelineCard findUniqueOrThrow
   */
  export type PipelineCardFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PipelineCard
     */
    select?: PipelineCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PipelineCard
     */
    omit?: PipelineCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PipelineCardInclude<ExtArgs> | null
    /**
     * Filter, which PipelineCard to fetch.
     */
    where: PipelineCardWhereUniqueInput
  }

  /**
   * PipelineCard findFirst
   */
  export type PipelineCardFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PipelineCard
     */
    select?: PipelineCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PipelineCard
     */
    omit?: PipelineCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PipelineCardInclude<ExtArgs> | null
    /**
     * Filter, which PipelineCard to fetch.
     */
    where?: PipelineCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PipelineCards to fetch.
     */
    orderBy?: PipelineCardOrderByWithRelationInput | PipelineCardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PipelineCards.
     */
    cursor?: PipelineCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PipelineCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PipelineCards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PipelineCards.
     */
    distinct?: PipelineCardScalarFieldEnum | PipelineCardScalarFieldEnum[]
  }

  /**
   * PipelineCard findFirstOrThrow
   */
  export type PipelineCardFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PipelineCard
     */
    select?: PipelineCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PipelineCard
     */
    omit?: PipelineCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PipelineCardInclude<ExtArgs> | null
    /**
     * Filter, which PipelineCard to fetch.
     */
    where?: PipelineCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PipelineCards to fetch.
     */
    orderBy?: PipelineCardOrderByWithRelationInput | PipelineCardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PipelineCards.
     */
    cursor?: PipelineCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PipelineCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PipelineCards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PipelineCards.
     */
    distinct?: PipelineCardScalarFieldEnum | PipelineCardScalarFieldEnum[]
  }

  /**
   * PipelineCard findMany
   */
  export type PipelineCardFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PipelineCard
     */
    select?: PipelineCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PipelineCard
     */
    omit?: PipelineCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PipelineCardInclude<ExtArgs> | null
    /**
     * Filter, which PipelineCards to fetch.
     */
    where?: PipelineCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PipelineCards to fetch.
     */
    orderBy?: PipelineCardOrderByWithRelationInput | PipelineCardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PipelineCards.
     */
    cursor?: PipelineCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PipelineCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PipelineCards.
     */
    skip?: number
    distinct?: PipelineCardScalarFieldEnum | PipelineCardScalarFieldEnum[]
  }

  /**
   * PipelineCard create
   */
  export type PipelineCardCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PipelineCard
     */
    select?: PipelineCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PipelineCard
     */
    omit?: PipelineCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PipelineCardInclude<ExtArgs> | null
    /**
     * The data needed to create a PipelineCard.
     */
    data: XOR<PipelineCardCreateInput, PipelineCardUncheckedCreateInput>
  }

  /**
   * PipelineCard createMany
   */
  export type PipelineCardCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PipelineCards.
     */
    data: PipelineCardCreateManyInput | PipelineCardCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PipelineCard createManyAndReturn
   */
  export type PipelineCardCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PipelineCard
     */
    select?: PipelineCardSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PipelineCard
     */
    omit?: PipelineCardOmit<ExtArgs> | null
    /**
     * The data used to create many PipelineCards.
     */
    data: PipelineCardCreateManyInput | PipelineCardCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PipelineCardIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PipelineCard update
   */
  export type PipelineCardUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PipelineCard
     */
    select?: PipelineCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PipelineCard
     */
    omit?: PipelineCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PipelineCardInclude<ExtArgs> | null
    /**
     * The data needed to update a PipelineCard.
     */
    data: XOR<PipelineCardUpdateInput, PipelineCardUncheckedUpdateInput>
    /**
     * Choose, which PipelineCard to update.
     */
    where: PipelineCardWhereUniqueInput
  }

  /**
   * PipelineCard updateMany
   */
  export type PipelineCardUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PipelineCards.
     */
    data: XOR<PipelineCardUpdateManyMutationInput, PipelineCardUncheckedUpdateManyInput>
    /**
     * Filter which PipelineCards to update
     */
    where?: PipelineCardWhereInput
    /**
     * Limit how many PipelineCards to update.
     */
    limit?: number
  }

  /**
   * PipelineCard updateManyAndReturn
   */
  export type PipelineCardUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PipelineCard
     */
    select?: PipelineCardSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PipelineCard
     */
    omit?: PipelineCardOmit<ExtArgs> | null
    /**
     * The data used to update PipelineCards.
     */
    data: XOR<PipelineCardUpdateManyMutationInput, PipelineCardUncheckedUpdateManyInput>
    /**
     * Filter which PipelineCards to update
     */
    where?: PipelineCardWhereInput
    /**
     * Limit how many PipelineCards to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PipelineCardIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PipelineCard upsert
   */
  export type PipelineCardUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PipelineCard
     */
    select?: PipelineCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PipelineCard
     */
    omit?: PipelineCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PipelineCardInclude<ExtArgs> | null
    /**
     * The filter to search for the PipelineCard to update in case it exists.
     */
    where: PipelineCardWhereUniqueInput
    /**
     * In case the PipelineCard found by the `where` argument doesn't exist, create a new PipelineCard with this data.
     */
    create: XOR<PipelineCardCreateInput, PipelineCardUncheckedCreateInput>
    /**
     * In case the PipelineCard was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PipelineCardUpdateInput, PipelineCardUncheckedUpdateInput>
  }

  /**
   * PipelineCard delete
   */
  export type PipelineCardDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PipelineCard
     */
    select?: PipelineCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PipelineCard
     */
    omit?: PipelineCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PipelineCardInclude<ExtArgs> | null
    /**
     * Filter which PipelineCard to delete.
     */
    where: PipelineCardWhereUniqueInput
  }

  /**
   * PipelineCard deleteMany
   */
  export type PipelineCardDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PipelineCards to delete
     */
    where?: PipelineCardWhereInput
    /**
     * Limit how many PipelineCards to delete.
     */
    limit?: number
  }

  /**
   * PipelineCard without action
   */
  export type PipelineCardDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PipelineCard
     */
    select?: PipelineCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PipelineCard
     */
    omit?: PipelineCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PipelineCardInclude<ExtArgs> | null
  }


  /**
   * Model EmailTemplate
   */

  export type AggregateEmailTemplate = {
    _count: EmailTemplateCountAggregateOutputType | null
    _min: EmailTemplateMinAggregateOutputType | null
    _max: EmailTemplateMaxAggregateOutputType | null
  }

  export type EmailTemplateMinAggregateOutputType = {
    id: string | null
    organizationId: string | null
    name: string | null
    subject: string | null
    html: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EmailTemplateMaxAggregateOutputType = {
    id: string | null
    organizationId: string | null
    name: string | null
    subject: string | null
    html: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EmailTemplateCountAggregateOutputType = {
    id: number
    organizationId: number
    name: number
    subject: number
    html: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type EmailTemplateMinAggregateInputType = {
    id?: true
    organizationId?: true
    name?: true
    subject?: true
    html?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EmailTemplateMaxAggregateInputType = {
    id?: true
    organizationId?: true
    name?: true
    subject?: true
    html?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EmailTemplateCountAggregateInputType = {
    id?: true
    organizationId?: true
    name?: true
    subject?: true
    html?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type EmailTemplateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmailTemplate to aggregate.
     */
    where?: EmailTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailTemplates to fetch.
     */
    orderBy?: EmailTemplateOrderByWithRelationInput | EmailTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmailTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EmailTemplates
    **/
    _count?: true | EmailTemplateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmailTemplateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmailTemplateMaxAggregateInputType
  }

  export type GetEmailTemplateAggregateType<T extends EmailTemplateAggregateArgs> = {
        [P in keyof T & keyof AggregateEmailTemplate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmailTemplate[P]>
      : GetScalarType<T[P], AggregateEmailTemplate[P]>
  }




  export type EmailTemplateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmailTemplateWhereInput
    orderBy?: EmailTemplateOrderByWithAggregationInput | EmailTemplateOrderByWithAggregationInput[]
    by: EmailTemplateScalarFieldEnum[] | EmailTemplateScalarFieldEnum
    having?: EmailTemplateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmailTemplateCountAggregateInputType | true
    _min?: EmailTemplateMinAggregateInputType
    _max?: EmailTemplateMaxAggregateInputType
  }

  export type EmailTemplateGroupByOutputType = {
    id: string
    organizationId: string
    name: string
    subject: string
    html: string
    createdAt: Date
    updatedAt: Date
    _count: EmailTemplateCountAggregateOutputType | null
    _min: EmailTemplateMinAggregateOutputType | null
    _max: EmailTemplateMaxAggregateOutputType | null
  }

  type GetEmailTemplateGroupByPayload<T extends EmailTemplateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmailTemplateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmailTemplateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmailTemplateGroupByOutputType[P]>
            : GetScalarType<T[P], EmailTemplateGroupByOutputType[P]>
        }
      >
    >


  export type EmailTemplateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    name?: boolean
    subject?: boolean
    html?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["emailTemplate"]>

  export type EmailTemplateSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    name?: boolean
    subject?: boolean
    html?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["emailTemplate"]>

  export type EmailTemplateSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    name?: boolean
    subject?: boolean
    html?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["emailTemplate"]>

  export type EmailTemplateSelectScalar = {
    id?: boolean
    organizationId?: boolean
    name?: boolean
    subject?: boolean
    html?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type EmailTemplateOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "organizationId" | "name" | "subject" | "html" | "createdAt" | "updatedAt", ExtArgs["result"]["emailTemplate"]>
  export type EmailTemplateInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }
  export type EmailTemplateIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }
  export type EmailTemplateIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }

  export type $EmailTemplatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EmailTemplate"
    objects: {
      organization: Prisma.$OrganizationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      organizationId: string
      name: string
      subject: string
      html: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["emailTemplate"]>
    composites: {}
  }

  type EmailTemplateGetPayload<S extends boolean | null | undefined | EmailTemplateDefaultArgs> = $Result.GetResult<Prisma.$EmailTemplatePayload, S>

  type EmailTemplateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EmailTemplateFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EmailTemplateCountAggregateInputType | true
    }

  export interface EmailTemplateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EmailTemplate'], meta: { name: 'EmailTemplate' } }
    /**
     * Find zero or one EmailTemplate that matches the filter.
     * @param {EmailTemplateFindUniqueArgs} args - Arguments to find a EmailTemplate
     * @example
     * // Get one EmailTemplate
     * const emailTemplate = await prisma.emailTemplate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmailTemplateFindUniqueArgs>(args: SelectSubset<T, EmailTemplateFindUniqueArgs<ExtArgs>>): Prisma__EmailTemplateClient<$Result.GetResult<Prisma.$EmailTemplatePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one EmailTemplate that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EmailTemplateFindUniqueOrThrowArgs} args - Arguments to find a EmailTemplate
     * @example
     * // Get one EmailTemplate
     * const emailTemplate = await prisma.emailTemplate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmailTemplateFindUniqueOrThrowArgs>(args: SelectSubset<T, EmailTemplateFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmailTemplateClient<$Result.GetResult<Prisma.$EmailTemplatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EmailTemplate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailTemplateFindFirstArgs} args - Arguments to find a EmailTemplate
     * @example
     * // Get one EmailTemplate
     * const emailTemplate = await prisma.emailTemplate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmailTemplateFindFirstArgs>(args?: SelectSubset<T, EmailTemplateFindFirstArgs<ExtArgs>>): Prisma__EmailTemplateClient<$Result.GetResult<Prisma.$EmailTemplatePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EmailTemplate that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailTemplateFindFirstOrThrowArgs} args - Arguments to find a EmailTemplate
     * @example
     * // Get one EmailTemplate
     * const emailTemplate = await prisma.emailTemplate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmailTemplateFindFirstOrThrowArgs>(args?: SelectSubset<T, EmailTemplateFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmailTemplateClient<$Result.GetResult<Prisma.$EmailTemplatePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more EmailTemplates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailTemplateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EmailTemplates
     * const emailTemplates = await prisma.emailTemplate.findMany()
     * 
     * // Get first 10 EmailTemplates
     * const emailTemplates = await prisma.emailTemplate.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const emailTemplateWithIdOnly = await prisma.emailTemplate.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EmailTemplateFindManyArgs>(args?: SelectSubset<T, EmailTemplateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailTemplatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a EmailTemplate.
     * @param {EmailTemplateCreateArgs} args - Arguments to create a EmailTemplate.
     * @example
     * // Create one EmailTemplate
     * const EmailTemplate = await prisma.emailTemplate.create({
     *   data: {
     *     // ... data to create a EmailTemplate
     *   }
     * })
     * 
     */
    create<T extends EmailTemplateCreateArgs>(args: SelectSubset<T, EmailTemplateCreateArgs<ExtArgs>>): Prisma__EmailTemplateClient<$Result.GetResult<Prisma.$EmailTemplatePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many EmailTemplates.
     * @param {EmailTemplateCreateManyArgs} args - Arguments to create many EmailTemplates.
     * @example
     * // Create many EmailTemplates
     * const emailTemplate = await prisma.emailTemplate.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmailTemplateCreateManyArgs>(args?: SelectSubset<T, EmailTemplateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EmailTemplates and returns the data saved in the database.
     * @param {EmailTemplateCreateManyAndReturnArgs} args - Arguments to create many EmailTemplates.
     * @example
     * // Create many EmailTemplates
     * const emailTemplate = await prisma.emailTemplate.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EmailTemplates and only return the `id`
     * const emailTemplateWithIdOnly = await prisma.emailTemplate.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EmailTemplateCreateManyAndReturnArgs>(args?: SelectSubset<T, EmailTemplateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailTemplatePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a EmailTemplate.
     * @param {EmailTemplateDeleteArgs} args - Arguments to delete one EmailTemplate.
     * @example
     * // Delete one EmailTemplate
     * const EmailTemplate = await prisma.emailTemplate.delete({
     *   where: {
     *     // ... filter to delete one EmailTemplate
     *   }
     * })
     * 
     */
    delete<T extends EmailTemplateDeleteArgs>(args: SelectSubset<T, EmailTemplateDeleteArgs<ExtArgs>>): Prisma__EmailTemplateClient<$Result.GetResult<Prisma.$EmailTemplatePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one EmailTemplate.
     * @param {EmailTemplateUpdateArgs} args - Arguments to update one EmailTemplate.
     * @example
     * // Update one EmailTemplate
     * const emailTemplate = await prisma.emailTemplate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmailTemplateUpdateArgs>(args: SelectSubset<T, EmailTemplateUpdateArgs<ExtArgs>>): Prisma__EmailTemplateClient<$Result.GetResult<Prisma.$EmailTemplatePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more EmailTemplates.
     * @param {EmailTemplateDeleteManyArgs} args - Arguments to filter EmailTemplates to delete.
     * @example
     * // Delete a few EmailTemplates
     * const { count } = await prisma.emailTemplate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmailTemplateDeleteManyArgs>(args?: SelectSubset<T, EmailTemplateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmailTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailTemplateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EmailTemplates
     * const emailTemplate = await prisma.emailTemplate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmailTemplateUpdateManyArgs>(args: SelectSubset<T, EmailTemplateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmailTemplates and returns the data updated in the database.
     * @param {EmailTemplateUpdateManyAndReturnArgs} args - Arguments to update many EmailTemplates.
     * @example
     * // Update many EmailTemplates
     * const emailTemplate = await prisma.emailTemplate.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more EmailTemplates and only return the `id`
     * const emailTemplateWithIdOnly = await prisma.emailTemplate.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EmailTemplateUpdateManyAndReturnArgs>(args: SelectSubset<T, EmailTemplateUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailTemplatePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one EmailTemplate.
     * @param {EmailTemplateUpsertArgs} args - Arguments to update or create a EmailTemplate.
     * @example
     * // Update or create a EmailTemplate
     * const emailTemplate = await prisma.emailTemplate.upsert({
     *   create: {
     *     // ... data to create a EmailTemplate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EmailTemplate we want to update
     *   }
     * })
     */
    upsert<T extends EmailTemplateUpsertArgs>(args: SelectSubset<T, EmailTemplateUpsertArgs<ExtArgs>>): Prisma__EmailTemplateClient<$Result.GetResult<Prisma.$EmailTemplatePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of EmailTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailTemplateCountArgs} args - Arguments to filter EmailTemplates to count.
     * @example
     * // Count the number of EmailTemplates
     * const count = await prisma.emailTemplate.count({
     *   where: {
     *     // ... the filter for the EmailTemplates we want to count
     *   }
     * })
    **/
    count<T extends EmailTemplateCountArgs>(
      args?: Subset<T, EmailTemplateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmailTemplateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EmailTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailTemplateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmailTemplateAggregateArgs>(args: Subset<T, EmailTemplateAggregateArgs>): Prisma.PrismaPromise<GetEmailTemplateAggregateType<T>>

    /**
     * Group by EmailTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailTemplateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmailTemplateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmailTemplateGroupByArgs['orderBy'] }
        : { orderBy?: EmailTemplateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmailTemplateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmailTemplateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EmailTemplate model
   */
  readonly fields: EmailTemplateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EmailTemplate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmailTemplateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EmailTemplate model
   */
  interface EmailTemplateFieldRefs {
    readonly id: FieldRef<"EmailTemplate", 'String'>
    readonly organizationId: FieldRef<"EmailTemplate", 'String'>
    readonly name: FieldRef<"EmailTemplate", 'String'>
    readonly subject: FieldRef<"EmailTemplate", 'String'>
    readonly html: FieldRef<"EmailTemplate", 'String'>
    readonly createdAt: FieldRef<"EmailTemplate", 'DateTime'>
    readonly updatedAt: FieldRef<"EmailTemplate", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * EmailTemplate findUnique
   */
  export type EmailTemplateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailTemplate
     */
    select?: EmailTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailTemplate
     */
    omit?: EmailTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailTemplateInclude<ExtArgs> | null
    /**
     * Filter, which EmailTemplate to fetch.
     */
    where: EmailTemplateWhereUniqueInput
  }

  /**
   * EmailTemplate findUniqueOrThrow
   */
  export type EmailTemplateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailTemplate
     */
    select?: EmailTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailTemplate
     */
    omit?: EmailTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailTemplateInclude<ExtArgs> | null
    /**
     * Filter, which EmailTemplate to fetch.
     */
    where: EmailTemplateWhereUniqueInput
  }

  /**
   * EmailTemplate findFirst
   */
  export type EmailTemplateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailTemplate
     */
    select?: EmailTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailTemplate
     */
    omit?: EmailTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailTemplateInclude<ExtArgs> | null
    /**
     * Filter, which EmailTemplate to fetch.
     */
    where?: EmailTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailTemplates to fetch.
     */
    orderBy?: EmailTemplateOrderByWithRelationInput | EmailTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmailTemplates.
     */
    cursor?: EmailTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmailTemplates.
     */
    distinct?: EmailTemplateScalarFieldEnum | EmailTemplateScalarFieldEnum[]
  }

  /**
   * EmailTemplate findFirstOrThrow
   */
  export type EmailTemplateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailTemplate
     */
    select?: EmailTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailTemplate
     */
    omit?: EmailTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailTemplateInclude<ExtArgs> | null
    /**
     * Filter, which EmailTemplate to fetch.
     */
    where?: EmailTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailTemplates to fetch.
     */
    orderBy?: EmailTemplateOrderByWithRelationInput | EmailTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmailTemplates.
     */
    cursor?: EmailTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmailTemplates.
     */
    distinct?: EmailTemplateScalarFieldEnum | EmailTemplateScalarFieldEnum[]
  }

  /**
   * EmailTemplate findMany
   */
  export type EmailTemplateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailTemplate
     */
    select?: EmailTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailTemplate
     */
    omit?: EmailTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailTemplateInclude<ExtArgs> | null
    /**
     * Filter, which EmailTemplates to fetch.
     */
    where?: EmailTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailTemplates to fetch.
     */
    orderBy?: EmailTemplateOrderByWithRelationInput | EmailTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EmailTemplates.
     */
    cursor?: EmailTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailTemplates.
     */
    skip?: number
    distinct?: EmailTemplateScalarFieldEnum | EmailTemplateScalarFieldEnum[]
  }

  /**
   * EmailTemplate create
   */
  export type EmailTemplateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailTemplate
     */
    select?: EmailTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailTemplate
     */
    omit?: EmailTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailTemplateInclude<ExtArgs> | null
    /**
     * The data needed to create a EmailTemplate.
     */
    data: XOR<EmailTemplateCreateInput, EmailTemplateUncheckedCreateInput>
  }

  /**
   * EmailTemplate createMany
   */
  export type EmailTemplateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EmailTemplates.
     */
    data: EmailTemplateCreateManyInput | EmailTemplateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EmailTemplate createManyAndReturn
   */
  export type EmailTemplateCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailTemplate
     */
    select?: EmailTemplateSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EmailTemplate
     */
    omit?: EmailTemplateOmit<ExtArgs> | null
    /**
     * The data used to create many EmailTemplates.
     */
    data: EmailTemplateCreateManyInput | EmailTemplateCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailTemplateIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * EmailTemplate update
   */
  export type EmailTemplateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailTemplate
     */
    select?: EmailTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailTemplate
     */
    omit?: EmailTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailTemplateInclude<ExtArgs> | null
    /**
     * The data needed to update a EmailTemplate.
     */
    data: XOR<EmailTemplateUpdateInput, EmailTemplateUncheckedUpdateInput>
    /**
     * Choose, which EmailTemplate to update.
     */
    where: EmailTemplateWhereUniqueInput
  }

  /**
   * EmailTemplate updateMany
   */
  export type EmailTemplateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EmailTemplates.
     */
    data: XOR<EmailTemplateUpdateManyMutationInput, EmailTemplateUncheckedUpdateManyInput>
    /**
     * Filter which EmailTemplates to update
     */
    where?: EmailTemplateWhereInput
    /**
     * Limit how many EmailTemplates to update.
     */
    limit?: number
  }

  /**
   * EmailTemplate updateManyAndReturn
   */
  export type EmailTemplateUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailTemplate
     */
    select?: EmailTemplateSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EmailTemplate
     */
    omit?: EmailTemplateOmit<ExtArgs> | null
    /**
     * The data used to update EmailTemplates.
     */
    data: XOR<EmailTemplateUpdateManyMutationInput, EmailTemplateUncheckedUpdateManyInput>
    /**
     * Filter which EmailTemplates to update
     */
    where?: EmailTemplateWhereInput
    /**
     * Limit how many EmailTemplates to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailTemplateIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * EmailTemplate upsert
   */
  export type EmailTemplateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailTemplate
     */
    select?: EmailTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailTemplate
     */
    omit?: EmailTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailTemplateInclude<ExtArgs> | null
    /**
     * The filter to search for the EmailTemplate to update in case it exists.
     */
    where: EmailTemplateWhereUniqueInput
    /**
     * In case the EmailTemplate found by the `where` argument doesn't exist, create a new EmailTemplate with this data.
     */
    create: XOR<EmailTemplateCreateInput, EmailTemplateUncheckedCreateInput>
    /**
     * In case the EmailTemplate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmailTemplateUpdateInput, EmailTemplateUncheckedUpdateInput>
  }

  /**
   * EmailTemplate delete
   */
  export type EmailTemplateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailTemplate
     */
    select?: EmailTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailTemplate
     */
    omit?: EmailTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailTemplateInclude<ExtArgs> | null
    /**
     * Filter which EmailTemplate to delete.
     */
    where: EmailTemplateWhereUniqueInput
  }

  /**
   * EmailTemplate deleteMany
   */
  export type EmailTemplateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmailTemplates to delete
     */
    where?: EmailTemplateWhereInput
    /**
     * Limit how many EmailTemplates to delete.
     */
    limit?: number
  }

  /**
   * EmailTemplate without action
   */
  export type EmailTemplateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailTemplate
     */
    select?: EmailTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailTemplate
     */
    omit?: EmailTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailTemplateInclude<ExtArgs> | null
  }


  /**
   * Model EmailSequence
   */

  export type AggregateEmailSequence = {
    _count: EmailSequenceCountAggregateOutputType | null
    _avg: EmailSequenceAvgAggregateOutputType | null
    _sum: EmailSequenceSumAggregateOutputType | null
    _min: EmailSequenceMinAggregateOutputType | null
    _max: EmailSequenceMaxAggregateOutputType | null
  }

  export type EmailSequenceAvgAggregateOutputType = {
    sent: number | null
    opens: number | null
    clicks: number | null
  }

  export type EmailSequenceSumAggregateOutputType = {
    sent: number | null
    opens: number | null
    clicks: number | null
  }

  export type EmailSequenceMinAggregateOutputType = {
    id: string | null
    organizationId: string | null
    name: string | null
    sent: number | null
    opens: number | null
    clicks: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EmailSequenceMaxAggregateOutputType = {
    id: string | null
    organizationId: string | null
    name: string | null
    sent: number | null
    opens: number | null
    clicks: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EmailSequenceCountAggregateOutputType = {
    id: number
    organizationId: number
    name: number
    sent: number
    opens: number
    clicks: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type EmailSequenceAvgAggregateInputType = {
    sent?: true
    opens?: true
    clicks?: true
  }

  export type EmailSequenceSumAggregateInputType = {
    sent?: true
    opens?: true
    clicks?: true
  }

  export type EmailSequenceMinAggregateInputType = {
    id?: true
    organizationId?: true
    name?: true
    sent?: true
    opens?: true
    clicks?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EmailSequenceMaxAggregateInputType = {
    id?: true
    organizationId?: true
    name?: true
    sent?: true
    opens?: true
    clicks?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EmailSequenceCountAggregateInputType = {
    id?: true
    organizationId?: true
    name?: true
    sent?: true
    opens?: true
    clicks?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type EmailSequenceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmailSequence to aggregate.
     */
    where?: EmailSequenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailSequences to fetch.
     */
    orderBy?: EmailSequenceOrderByWithRelationInput | EmailSequenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmailSequenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailSequences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailSequences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EmailSequences
    **/
    _count?: true | EmailSequenceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EmailSequenceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EmailSequenceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmailSequenceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmailSequenceMaxAggregateInputType
  }

  export type GetEmailSequenceAggregateType<T extends EmailSequenceAggregateArgs> = {
        [P in keyof T & keyof AggregateEmailSequence]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmailSequence[P]>
      : GetScalarType<T[P], AggregateEmailSequence[P]>
  }




  export type EmailSequenceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmailSequenceWhereInput
    orderBy?: EmailSequenceOrderByWithAggregationInput | EmailSequenceOrderByWithAggregationInput[]
    by: EmailSequenceScalarFieldEnum[] | EmailSequenceScalarFieldEnum
    having?: EmailSequenceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmailSequenceCountAggregateInputType | true
    _avg?: EmailSequenceAvgAggregateInputType
    _sum?: EmailSequenceSumAggregateInputType
    _min?: EmailSequenceMinAggregateInputType
    _max?: EmailSequenceMaxAggregateInputType
  }

  export type EmailSequenceGroupByOutputType = {
    id: string
    organizationId: string
    name: string
    sent: number
    opens: number
    clicks: number
    createdAt: Date
    updatedAt: Date
    _count: EmailSequenceCountAggregateOutputType | null
    _avg: EmailSequenceAvgAggregateOutputType | null
    _sum: EmailSequenceSumAggregateOutputType | null
    _min: EmailSequenceMinAggregateOutputType | null
    _max: EmailSequenceMaxAggregateOutputType | null
  }

  type GetEmailSequenceGroupByPayload<T extends EmailSequenceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmailSequenceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmailSequenceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmailSequenceGroupByOutputType[P]>
            : GetScalarType<T[P], EmailSequenceGroupByOutputType[P]>
        }
      >
    >


  export type EmailSequenceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    name?: boolean
    sent?: boolean
    opens?: boolean
    clicks?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    steps?: boolean | EmailSequence$stepsArgs<ExtArgs>
    targets?: boolean | EmailSequence$targetsArgs<ExtArgs>
    events?: boolean | EmailSequence$eventsArgs<ExtArgs>
    _count?: boolean | EmailSequenceCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["emailSequence"]>

  export type EmailSequenceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    name?: boolean
    sent?: boolean
    opens?: boolean
    clicks?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["emailSequence"]>

  export type EmailSequenceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    name?: boolean
    sent?: boolean
    opens?: boolean
    clicks?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["emailSequence"]>

  export type EmailSequenceSelectScalar = {
    id?: boolean
    organizationId?: boolean
    name?: boolean
    sent?: boolean
    opens?: boolean
    clicks?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type EmailSequenceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "organizationId" | "name" | "sent" | "opens" | "clicks" | "createdAt" | "updatedAt", ExtArgs["result"]["emailSequence"]>
  export type EmailSequenceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    steps?: boolean | EmailSequence$stepsArgs<ExtArgs>
    targets?: boolean | EmailSequence$targetsArgs<ExtArgs>
    events?: boolean | EmailSequence$eventsArgs<ExtArgs>
    _count?: boolean | EmailSequenceCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EmailSequenceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }
  export type EmailSequenceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }

  export type $EmailSequencePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EmailSequence"
    objects: {
      organization: Prisma.$OrganizationPayload<ExtArgs>
      steps: Prisma.$EmailStepPayload<ExtArgs>[]
      targets: Prisma.$SequenceTargetPayload<ExtArgs>[]
      events: Prisma.$EmailEventPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      organizationId: string
      name: string
      sent: number
      opens: number
      clicks: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["emailSequence"]>
    composites: {}
  }

  type EmailSequenceGetPayload<S extends boolean | null | undefined | EmailSequenceDefaultArgs> = $Result.GetResult<Prisma.$EmailSequencePayload, S>

  type EmailSequenceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EmailSequenceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EmailSequenceCountAggregateInputType | true
    }

  export interface EmailSequenceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EmailSequence'], meta: { name: 'EmailSequence' } }
    /**
     * Find zero or one EmailSequence that matches the filter.
     * @param {EmailSequenceFindUniqueArgs} args - Arguments to find a EmailSequence
     * @example
     * // Get one EmailSequence
     * const emailSequence = await prisma.emailSequence.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmailSequenceFindUniqueArgs>(args: SelectSubset<T, EmailSequenceFindUniqueArgs<ExtArgs>>): Prisma__EmailSequenceClient<$Result.GetResult<Prisma.$EmailSequencePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one EmailSequence that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EmailSequenceFindUniqueOrThrowArgs} args - Arguments to find a EmailSequence
     * @example
     * // Get one EmailSequence
     * const emailSequence = await prisma.emailSequence.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmailSequenceFindUniqueOrThrowArgs>(args: SelectSubset<T, EmailSequenceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmailSequenceClient<$Result.GetResult<Prisma.$EmailSequencePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EmailSequence that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailSequenceFindFirstArgs} args - Arguments to find a EmailSequence
     * @example
     * // Get one EmailSequence
     * const emailSequence = await prisma.emailSequence.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmailSequenceFindFirstArgs>(args?: SelectSubset<T, EmailSequenceFindFirstArgs<ExtArgs>>): Prisma__EmailSequenceClient<$Result.GetResult<Prisma.$EmailSequencePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EmailSequence that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailSequenceFindFirstOrThrowArgs} args - Arguments to find a EmailSequence
     * @example
     * // Get one EmailSequence
     * const emailSequence = await prisma.emailSequence.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmailSequenceFindFirstOrThrowArgs>(args?: SelectSubset<T, EmailSequenceFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmailSequenceClient<$Result.GetResult<Prisma.$EmailSequencePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more EmailSequences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailSequenceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EmailSequences
     * const emailSequences = await prisma.emailSequence.findMany()
     * 
     * // Get first 10 EmailSequences
     * const emailSequences = await prisma.emailSequence.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const emailSequenceWithIdOnly = await prisma.emailSequence.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EmailSequenceFindManyArgs>(args?: SelectSubset<T, EmailSequenceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailSequencePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a EmailSequence.
     * @param {EmailSequenceCreateArgs} args - Arguments to create a EmailSequence.
     * @example
     * // Create one EmailSequence
     * const EmailSequence = await prisma.emailSequence.create({
     *   data: {
     *     // ... data to create a EmailSequence
     *   }
     * })
     * 
     */
    create<T extends EmailSequenceCreateArgs>(args: SelectSubset<T, EmailSequenceCreateArgs<ExtArgs>>): Prisma__EmailSequenceClient<$Result.GetResult<Prisma.$EmailSequencePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many EmailSequences.
     * @param {EmailSequenceCreateManyArgs} args - Arguments to create many EmailSequences.
     * @example
     * // Create many EmailSequences
     * const emailSequence = await prisma.emailSequence.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmailSequenceCreateManyArgs>(args?: SelectSubset<T, EmailSequenceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EmailSequences and returns the data saved in the database.
     * @param {EmailSequenceCreateManyAndReturnArgs} args - Arguments to create many EmailSequences.
     * @example
     * // Create many EmailSequences
     * const emailSequence = await prisma.emailSequence.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EmailSequences and only return the `id`
     * const emailSequenceWithIdOnly = await prisma.emailSequence.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EmailSequenceCreateManyAndReturnArgs>(args?: SelectSubset<T, EmailSequenceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailSequencePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a EmailSequence.
     * @param {EmailSequenceDeleteArgs} args - Arguments to delete one EmailSequence.
     * @example
     * // Delete one EmailSequence
     * const EmailSequence = await prisma.emailSequence.delete({
     *   where: {
     *     // ... filter to delete one EmailSequence
     *   }
     * })
     * 
     */
    delete<T extends EmailSequenceDeleteArgs>(args: SelectSubset<T, EmailSequenceDeleteArgs<ExtArgs>>): Prisma__EmailSequenceClient<$Result.GetResult<Prisma.$EmailSequencePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one EmailSequence.
     * @param {EmailSequenceUpdateArgs} args - Arguments to update one EmailSequence.
     * @example
     * // Update one EmailSequence
     * const emailSequence = await prisma.emailSequence.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmailSequenceUpdateArgs>(args: SelectSubset<T, EmailSequenceUpdateArgs<ExtArgs>>): Prisma__EmailSequenceClient<$Result.GetResult<Prisma.$EmailSequencePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more EmailSequences.
     * @param {EmailSequenceDeleteManyArgs} args - Arguments to filter EmailSequences to delete.
     * @example
     * // Delete a few EmailSequences
     * const { count } = await prisma.emailSequence.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmailSequenceDeleteManyArgs>(args?: SelectSubset<T, EmailSequenceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmailSequences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailSequenceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EmailSequences
     * const emailSequence = await prisma.emailSequence.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmailSequenceUpdateManyArgs>(args: SelectSubset<T, EmailSequenceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmailSequences and returns the data updated in the database.
     * @param {EmailSequenceUpdateManyAndReturnArgs} args - Arguments to update many EmailSequences.
     * @example
     * // Update many EmailSequences
     * const emailSequence = await prisma.emailSequence.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more EmailSequences and only return the `id`
     * const emailSequenceWithIdOnly = await prisma.emailSequence.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EmailSequenceUpdateManyAndReturnArgs>(args: SelectSubset<T, EmailSequenceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailSequencePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one EmailSequence.
     * @param {EmailSequenceUpsertArgs} args - Arguments to update or create a EmailSequence.
     * @example
     * // Update or create a EmailSequence
     * const emailSequence = await prisma.emailSequence.upsert({
     *   create: {
     *     // ... data to create a EmailSequence
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EmailSequence we want to update
     *   }
     * })
     */
    upsert<T extends EmailSequenceUpsertArgs>(args: SelectSubset<T, EmailSequenceUpsertArgs<ExtArgs>>): Prisma__EmailSequenceClient<$Result.GetResult<Prisma.$EmailSequencePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of EmailSequences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailSequenceCountArgs} args - Arguments to filter EmailSequences to count.
     * @example
     * // Count the number of EmailSequences
     * const count = await prisma.emailSequence.count({
     *   where: {
     *     // ... the filter for the EmailSequences we want to count
     *   }
     * })
    **/
    count<T extends EmailSequenceCountArgs>(
      args?: Subset<T, EmailSequenceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmailSequenceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EmailSequence.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailSequenceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmailSequenceAggregateArgs>(args: Subset<T, EmailSequenceAggregateArgs>): Prisma.PrismaPromise<GetEmailSequenceAggregateType<T>>

    /**
     * Group by EmailSequence.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailSequenceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmailSequenceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmailSequenceGroupByArgs['orderBy'] }
        : { orderBy?: EmailSequenceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmailSequenceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmailSequenceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EmailSequence model
   */
  readonly fields: EmailSequenceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EmailSequence.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmailSequenceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    steps<T extends EmailSequence$stepsArgs<ExtArgs> = {}>(args?: Subset<T, EmailSequence$stepsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailStepPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    targets<T extends EmailSequence$targetsArgs<ExtArgs> = {}>(args?: Subset<T, EmailSequence$targetsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SequenceTargetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    events<T extends EmailSequence$eventsArgs<ExtArgs> = {}>(args?: Subset<T, EmailSequence$eventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailEventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EmailSequence model
   */
  interface EmailSequenceFieldRefs {
    readonly id: FieldRef<"EmailSequence", 'String'>
    readonly organizationId: FieldRef<"EmailSequence", 'String'>
    readonly name: FieldRef<"EmailSequence", 'String'>
    readonly sent: FieldRef<"EmailSequence", 'Int'>
    readonly opens: FieldRef<"EmailSequence", 'Int'>
    readonly clicks: FieldRef<"EmailSequence", 'Int'>
    readonly createdAt: FieldRef<"EmailSequence", 'DateTime'>
    readonly updatedAt: FieldRef<"EmailSequence", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * EmailSequence findUnique
   */
  export type EmailSequenceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailSequence
     */
    select?: EmailSequenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailSequence
     */
    omit?: EmailSequenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailSequenceInclude<ExtArgs> | null
    /**
     * Filter, which EmailSequence to fetch.
     */
    where: EmailSequenceWhereUniqueInput
  }

  /**
   * EmailSequence findUniqueOrThrow
   */
  export type EmailSequenceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailSequence
     */
    select?: EmailSequenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailSequence
     */
    omit?: EmailSequenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailSequenceInclude<ExtArgs> | null
    /**
     * Filter, which EmailSequence to fetch.
     */
    where: EmailSequenceWhereUniqueInput
  }

  /**
   * EmailSequence findFirst
   */
  export type EmailSequenceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailSequence
     */
    select?: EmailSequenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailSequence
     */
    omit?: EmailSequenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailSequenceInclude<ExtArgs> | null
    /**
     * Filter, which EmailSequence to fetch.
     */
    where?: EmailSequenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailSequences to fetch.
     */
    orderBy?: EmailSequenceOrderByWithRelationInput | EmailSequenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmailSequences.
     */
    cursor?: EmailSequenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailSequences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailSequences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmailSequences.
     */
    distinct?: EmailSequenceScalarFieldEnum | EmailSequenceScalarFieldEnum[]
  }

  /**
   * EmailSequence findFirstOrThrow
   */
  export type EmailSequenceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailSequence
     */
    select?: EmailSequenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailSequence
     */
    omit?: EmailSequenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailSequenceInclude<ExtArgs> | null
    /**
     * Filter, which EmailSequence to fetch.
     */
    where?: EmailSequenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailSequences to fetch.
     */
    orderBy?: EmailSequenceOrderByWithRelationInput | EmailSequenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmailSequences.
     */
    cursor?: EmailSequenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailSequences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailSequences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmailSequences.
     */
    distinct?: EmailSequenceScalarFieldEnum | EmailSequenceScalarFieldEnum[]
  }

  /**
   * EmailSequence findMany
   */
  export type EmailSequenceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailSequence
     */
    select?: EmailSequenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailSequence
     */
    omit?: EmailSequenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailSequenceInclude<ExtArgs> | null
    /**
     * Filter, which EmailSequences to fetch.
     */
    where?: EmailSequenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailSequences to fetch.
     */
    orderBy?: EmailSequenceOrderByWithRelationInput | EmailSequenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EmailSequences.
     */
    cursor?: EmailSequenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailSequences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailSequences.
     */
    skip?: number
    distinct?: EmailSequenceScalarFieldEnum | EmailSequenceScalarFieldEnum[]
  }

  /**
   * EmailSequence create
   */
  export type EmailSequenceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailSequence
     */
    select?: EmailSequenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailSequence
     */
    omit?: EmailSequenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailSequenceInclude<ExtArgs> | null
    /**
     * The data needed to create a EmailSequence.
     */
    data: XOR<EmailSequenceCreateInput, EmailSequenceUncheckedCreateInput>
  }

  /**
   * EmailSequence createMany
   */
  export type EmailSequenceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EmailSequences.
     */
    data: EmailSequenceCreateManyInput | EmailSequenceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EmailSequence createManyAndReturn
   */
  export type EmailSequenceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailSequence
     */
    select?: EmailSequenceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EmailSequence
     */
    omit?: EmailSequenceOmit<ExtArgs> | null
    /**
     * The data used to create many EmailSequences.
     */
    data: EmailSequenceCreateManyInput | EmailSequenceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailSequenceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * EmailSequence update
   */
  export type EmailSequenceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailSequence
     */
    select?: EmailSequenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailSequence
     */
    omit?: EmailSequenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailSequenceInclude<ExtArgs> | null
    /**
     * The data needed to update a EmailSequence.
     */
    data: XOR<EmailSequenceUpdateInput, EmailSequenceUncheckedUpdateInput>
    /**
     * Choose, which EmailSequence to update.
     */
    where: EmailSequenceWhereUniqueInput
  }

  /**
   * EmailSequence updateMany
   */
  export type EmailSequenceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EmailSequences.
     */
    data: XOR<EmailSequenceUpdateManyMutationInput, EmailSequenceUncheckedUpdateManyInput>
    /**
     * Filter which EmailSequences to update
     */
    where?: EmailSequenceWhereInput
    /**
     * Limit how many EmailSequences to update.
     */
    limit?: number
  }

  /**
   * EmailSequence updateManyAndReturn
   */
  export type EmailSequenceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailSequence
     */
    select?: EmailSequenceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EmailSequence
     */
    omit?: EmailSequenceOmit<ExtArgs> | null
    /**
     * The data used to update EmailSequences.
     */
    data: XOR<EmailSequenceUpdateManyMutationInput, EmailSequenceUncheckedUpdateManyInput>
    /**
     * Filter which EmailSequences to update
     */
    where?: EmailSequenceWhereInput
    /**
     * Limit how many EmailSequences to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailSequenceIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * EmailSequence upsert
   */
  export type EmailSequenceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailSequence
     */
    select?: EmailSequenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailSequence
     */
    omit?: EmailSequenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailSequenceInclude<ExtArgs> | null
    /**
     * The filter to search for the EmailSequence to update in case it exists.
     */
    where: EmailSequenceWhereUniqueInput
    /**
     * In case the EmailSequence found by the `where` argument doesn't exist, create a new EmailSequence with this data.
     */
    create: XOR<EmailSequenceCreateInput, EmailSequenceUncheckedCreateInput>
    /**
     * In case the EmailSequence was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmailSequenceUpdateInput, EmailSequenceUncheckedUpdateInput>
  }

  /**
   * EmailSequence delete
   */
  export type EmailSequenceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailSequence
     */
    select?: EmailSequenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailSequence
     */
    omit?: EmailSequenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailSequenceInclude<ExtArgs> | null
    /**
     * Filter which EmailSequence to delete.
     */
    where: EmailSequenceWhereUniqueInput
  }

  /**
   * EmailSequence deleteMany
   */
  export type EmailSequenceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmailSequences to delete
     */
    where?: EmailSequenceWhereInput
    /**
     * Limit how many EmailSequences to delete.
     */
    limit?: number
  }

  /**
   * EmailSequence.steps
   */
  export type EmailSequence$stepsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailStep
     */
    select?: EmailStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailStep
     */
    omit?: EmailStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailStepInclude<ExtArgs> | null
    where?: EmailStepWhereInput
    orderBy?: EmailStepOrderByWithRelationInput | EmailStepOrderByWithRelationInput[]
    cursor?: EmailStepWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmailStepScalarFieldEnum | EmailStepScalarFieldEnum[]
  }

  /**
   * EmailSequence.targets
   */
  export type EmailSequence$targetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SequenceTarget
     */
    select?: SequenceTargetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SequenceTarget
     */
    omit?: SequenceTargetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SequenceTargetInclude<ExtArgs> | null
    where?: SequenceTargetWhereInput
    orderBy?: SequenceTargetOrderByWithRelationInput | SequenceTargetOrderByWithRelationInput[]
    cursor?: SequenceTargetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SequenceTargetScalarFieldEnum | SequenceTargetScalarFieldEnum[]
  }

  /**
   * EmailSequence.events
   */
  export type EmailSequence$eventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailEvent
     */
    select?: EmailEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailEvent
     */
    omit?: EmailEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailEventInclude<ExtArgs> | null
    where?: EmailEventWhereInput
    orderBy?: EmailEventOrderByWithRelationInput | EmailEventOrderByWithRelationInput[]
    cursor?: EmailEventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmailEventScalarFieldEnum | EmailEventScalarFieldEnum[]
  }

  /**
   * EmailSequence without action
   */
  export type EmailSequenceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailSequence
     */
    select?: EmailSequenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailSequence
     */
    omit?: EmailSequenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailSequenceInclude<ExtArgs> | null
  }


  /**
   * Model EmailStep
   */

  export type AggregateEmailStep = {
    _count: EmailStepCountAggregateOutputType | null
    _avg: EmailStepAvgAggregateOutputType | null
    _sum: EmailStepSumAggregateOutputType | null
    _min: EmailStepMinAggregateOutputType | null
    _max: EmailStepMaxAggregateOutputType | null
  }

  export type EmailStepAvgAggregateOutputType = {
    delayDays: number | null
  }

  export type EmailStepSumAggregateOutputType = {
    delayDays: number | null
  }

  export type EmailStepMinAggregateOutputType = {
    id: string | null
    subject: string | null
    body: string | null
    delayDays: number | null
    sequenceId: string | null
  }

  export type EmailStepMaxAggregateOutputType = {
    id: string | null
    subject: string | null
    body: string | null
    delayDays: number | null
    sequenceId: string | null
  }

  export type EmailStepCountAggregateOutputType = {
    id: number
    subject: number
    body: number
    delayDays: number
    sequenceId: number
    _all: number
  }


  export type EmailStepAvgAggregateInputType = {
    delayDays?: true
  }

  export type EmailStepSumAggregateInputType = {
    delayDays?: true
  }

  export type EmailStepMinAggregateInputType = {
    id?: true
    subject?: true
    body?: true
    delayDays?: true
    sequenceId?: true
  }

  export type EmailStepMaxAggregateInputType = {
    id?: true
    subject?: true
    body?: true
    delayDays?: true
    sequenceId?: true
  }

  export type EmailStepCountAggregateInputType = {
    id?: true
    subject?: true
    body?: true
    delayDays?: true
    sequenceId?: true
    _all?: true
  }

  export type EmailStepAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmailStep to aggregate.
     */
    where?: EmailStepWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailSteps to fetch.
     */
    orderBy?: EmailStepOrderByWithRelationInput | EmailStepOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmailStepWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailSteps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailSteps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EmailSteps
    **/
    _count?: true | EmailStepCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EmailStepAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EmailStepSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmailStepMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmailStepMaxAggregateInputType
  }

  export type GetEmailStepAggregateType<T extends EmailStepAggregateArgs> = {
        [P in keyof T & keyof AggregateEmailStep]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmailStep[P]>
      : GetScalarType<T[P], AggregateEmailStep[P]>
  }




  export type EmailStepGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmailStepWhereInput
    orderBy?: EmailStepOrderByWithAggregationInput | EmailStepOrderByWithAggregationInput[]
    by: EmailStepScalarFieldEnum[] | EmailStepScalarFieldEnum
    having?: EmailStepScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmailStepCountAggregateInputType | true
    _avg?: EmailStepAvgAggregateInputType
    _sum?: EmailStepSumAggregateInputType
    _min?: EmailStepMinAggregateInputType
    _max?: EmailStepMaxAggregateInputType
  }

  export type EmailStepGroupByOutputType = {
    id: string
    subject: string
    body: string
    delayDays: number
    sequenceId: string
    _count: EmailStepCountAggregateOutputType | null
    _avg: EmailStepAvgAggregateOutputType | null
    _sum: EmailStepSumAggregateOutputType | null
    _min: EmailStepMinAggregateOutputType | null
    _max: EmailStepMaxAggregateOutputType | null
  }

  type GetEmailStepGroupByPayload<T extends EmailStepGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmailStepGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmailStepGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmailStepGroupByOutputType[P]>
            : GetScalarType<T[P], EmailStepGroupByOutputType[P]>
        }
      >
    >


  export type EmailStepSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    subject?: boolean
    body?: boolean
    delayDays?: boolean
    sequenceId?: boolean
    sequence?: boolean | EmailSequenceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["emailStep"]>

  export type EmailStepSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    subject?: boolean
    body?: boolean
    delayDays?: boolean
    sequenceId?: boolean
    sequence?: boolean | EmailSequenceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["emailStep"]>

  export type EmailStepSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    subject?: boolean
    body?: boolean
    delayDays?: boolean
    sequenceId?: boolean
    sequence?: boolean | EmailSequenceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["emailStep"]>

  export type EmailStepSelectScalar = {
    id?: boolean
    subject?: boolean
    body?: boolean
    delayDays?: boolean
    sequenceId?: boolean
  }

  export type EmailStepOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "subject" | "body" | "delayDays" | "sequenceId", ExtArgs["result"]["emailStep"]>
  export type EmailStepInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sequence?: boolean | EmailSequenceDefaultArgs<ExtArgs>
  }
  export type EmailStepIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sequence?: boolean | EmailSequenceDefaultArgs<ExtArgs>
  }
  export type EmailStepIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sequence?: boolean | EmailSequenceDefaultArgs<ExtArgs>
  }

  export type $EmailStepPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EmailStep"
    objects: {
      sequence: Prisma.$EmailSequencePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      subject: string
      body: string
      delayDays: number
      sequenceId: string
    }, ExtArgs["result"]["emailStep"]>
    composites: {}
  }

  type EmailStepGetPayload<S extends boolean | null | undefined | EmailStepDefaultArgs> = $Result.GetResult<Prisma.$EmailStepPayload, S>

  type EmailStepCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EmailStepFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EmailStepCountAggregateInputType | true
    }

  export interface EmailStepDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EmailStep'], meta: { name: 'EmailStep' } }
    /**
     * Find zero or one EmailStep that matches the filter.
     * @param {EmailStepFindUniqueArgs} args - Arguments to find a EmailStep
     * @example
     * // Get one EmailStep
     * const emailStep = await prisma.emailStep.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmailStepFindUniqueArgs>(args: SelectSubset<T, EmailStepFindUniqueArgs<ExtArgs>>): Prisma__EmailStepClient<$Result.GetResult<Prisma.$EmailStepPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one EmailStep that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EmailStepFindUniqueOrThrowArgs} args - Arguments to find a EmailStep
     * @example
     * // Get one EmailStep
     * const emailStep = await prisma.emailStep.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmailStepFindUniqueOrThrowArgs>(args: SelectSubset<T, EmailStepFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmailStepClient<$Result.GetResult<Prisma.$EmailStepPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EmailStep that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailStepFindFirstArgs} args - Arguments to find a EmailStep
     * @example
     * // Get one EmailStep
     * const emailStep = await prisma.emailStep.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmailStepFindFirstArgs>(args?: SelectSubset<T, EmailStepFindFirstArgs<ExtArgs>>): Prisma__EmailStepClient<$Result.GetResult<Prisma.$EmailStepPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EmailStep that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailStepFindFirstOrThrowArgs} args - Arguments to find a EmailStep
     * @example
     * // Get one EmailStep
     * const emailStep = await prisma.emailStep.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmailStepFindFirstOrThrowArgs>(args?: SelectSubset<T, EmailStepFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmailStepClient<$Result.GetResult<Prisma.$EmailStepPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more EmailSteps that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailStepFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EmailSteps
     * const emailSteps = await prisma.emailStep.findMany()
     * 
     * // Get first 10 EmailSteps
     * const emailSteps = await prisma.emailStep.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const emailStepWithIdOnly = await prisma.emailStep.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EmailStepFindManyArgs>(args?: SelectSubset<T, EmailStepFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailStepPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a EmailStep.
     * @param {EmailStepCreateArgs} args - Arguments to create a EmailStep.
     * @example
     * // Create one EmailStep
     * const EmailStep = await prisma.emailStep.create({
     *   data: {
     *     // ... data to create a EmailStep
     *   }
     * })
     * 
     */
    create<T extends EmailStepCreateArgs>(args: SelectSubset<T, EmailStepCreateArgs<ExtArgs>>): Prisma__EmailStepClient<$Result.GetResult<Prisma.$EmailStepPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many EmailSteps.
     * @param {EmailStepCreateManyArgs} args - Arguments to create many EmailSteps.
     * @example
     * // Create many EmailSteps
     * const emailStep = await prisma.emailStep.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmailStepCreateManyArgs>(args?: SelectSubset<T, EmailStepCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EmailSteps and returns the data saved in the database.
     * @param {EmailStepCreateManyAndReturnArgs} args - Arguments to create many EmailSteps.
     * @example
     * // Create many EmailSteps
     * const emailStep = await prisma.emailStep.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EmailSteps and only return the `id`
     * const emailStepWithIdOnly = await prisma.emailStep.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EmailStepCreateManyAndReturnArgs>(args?: SelectSubset<T, EmailStepCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailStepPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a EmailStep.
     * @param {EmailStepDeleteArgs} args - Arguments to delete one EmailStep.
     * @example
     * // Delete one EmailStep
     * const EmailStep = await prisma.emailStep.delete({
     *   where: {
     *     // ... filter to delete one EmailStep
     *   }
     * })
     * 
     */
    delete<T extends EmailStepDeleteArgs>(args: SelectSubset<T, EmailStepDeleteArgs<ExtArgs>>): Prisma__EmailStepClient<$Result.GetResult<Prisma.$EmailStepPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one EmailStep.
     * @param {EmailStepUpdateArgs} args - Arguments to update one EmailStep.
     * @example
     * // Update one EmailStep
     * const emailStep = await prisma.emailStep.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmailStepUpdateArgs>(args: SelectSubset<T, EmailStepUpdateArgs<ExtArgs>>): Prisma__EmailStepClient<$Result.GetResult<Prisma.$EmailStepPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more EmailSteps.
     * @param {EmailStepDeleteManyArgs} args - Arguments to filter EmailSteps to delete.
     * @example
     * // Delete a few EmailSteps
     * const { count } = await prisma.emailStep.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmailStepDeleteManyArgs>(args?: SelectSubset<T, EmailStepDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmailSteps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailStepUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EmailSteps
     * const emailStep = await prisma.emailStep.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmailStepUpdateManyArgs>(args: SelectSubset<T, EmailStepUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmailSteps and returns the data updated in the database.
     * @param {EmailStepUpdateManyAndReturnArgs} args - Arguments to update many EmailSteps.
     * @example
     * // Update many EmailSteps
     * const emailStep = await prisma.emailStep.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more EmailSteps and only return the `id`
     * const emailStepWithIdOnly = await prisma.emailStep.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EmailStepUpdateManyAndReturnArgs>(args: SelectSubset<T, EmailStepUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailStepPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one EmailStep.
     * @param {EmailStepUpsertArgs} args - Arguments to update or create a EmailStep.
     * @example
     * // Update or create a EmailStep
     * const emailStep = await prisma.emailStep.upsert({
     *   create: {
     *     // ... data to create a EmailStep
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EmailStep we want to update
     *   }
     * })
     */
    upsert<T extends EmailStepUpsertArgs>(args: SelectSubset<T, EmailStepUpsertArgs<ExtArgs>>): Prisma__EmailStepClient<$Result.GetResult<Prisma.$EmailStepPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of EmailSteps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailStepCountArgs} args - Arguments to filter EmailSteps to count.
     * @example
     * // Count the number of EmailSteps
     * const count = await prisma.emailStep.count({
     *   where: {
     *     // ... the filter for the EmailSteps we want to count
     *   }
     * })
    **/
    count<T extends EmailStepCountArgs>(
      args?: Subset<T, EmailStepCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmailStepCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EmailStep.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailStepAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmailStepAggregateArgs>(args: Subset<T, EmailStepAggregateArgs>): Prisma.PrismaPromise<GetEmailStepAggregateType<T>>

    /**
     * Group by EmailStep.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailStepGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmailStepGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmailStepGroupByArgs['orderBy'] }
        : { orderBy?: EmailStepGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmailStepGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmailStepGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EmailStep model
   */
  readonly fields: EmailStepFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EmailStep.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmailStepClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sequence<T extends EmailSequenceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmailSequenceDefaultArgs<ExtArgs>>): Prisma__EmailSequenceClient<$Result.GetResult<Prisma.$EmailSequencePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EmailStep model
   */
  interface EmailStepFieldRefs {
    readonly id: FieldRef<"EmailStep", 'String'>
    readonly subject: FieldRef<"EmailStep", 'String'>
    readonly body: FieldRef<"EmailStep", 'String'>
    readonly delayDays: FieldRef<"EmailStep", 'Int'>
    readonly sequenceId: FieldRef<"EmailStep", 'String'>
  }
    

  // Custom InputTypes
  /**
   * EmailStep findUnique
   */
  export type EmailStepFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailStep
     */
    select?: EmailStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailStep
     */
    omit?: EmailStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailStepInclude<ExtArgs> | null
    /**
     * Filter, which EmailStep to fetch.
     */
    where: EmailStepWhereUniqueInput
  }

  /**
   * EmailStep findUniqueOrThrow
   */
  export type EmailStepFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailStep
     */
    select?: EmailStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailStep
     */
    omit?: EmailStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailStepInclude<ExtArgs> | null
    /**
     * Filter, which EmailStep to fetch.
     */
    where: EmailStepWhereUniqueInput
  }

  /**
   * EmailStep findFirst
   */
  export type EmailStepFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailStep
     */
    select?: EmailStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailStep
     */
    omit?: EmailStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailStepInclude<ExtArgs> | null
    /**
     * Filter, which EmailStep to fetch.
     */
    where?: EmailStepWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailSteps to fetch.
     */
    orderBy?: EmailStepOrderByWithRelationInput | EmailStepOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmailSteps.
     */
    cursor?: EmailStepWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailSteps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailSteps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmailSteps.
     */
    distinct?: EmailStepScalarFieldEnum | EmailStepScalarFieldEnum[]
  }

  /**
   * EmailStep findFirstOrThrow
   */
  export type EmailStepFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailStep
     */
    select?: EmailStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailStep
     */
    omit?: EmailStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailStepInclude<ExtArgs> | null
    /**
     * Filter, which EmailStep to fetch.
     */
    where?: EmailStepWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailSteps to fetch.
     */
    orderBy?: EmailStepOrderByWithRelationInput | EmailStepOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmailSteps.
     */
    cursor?: EmailStepWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailSteps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailSteps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmailSteps.
     */
    distinct?: EmailStepScalarFieldEnum | EmailStepScalarFieldEnum[]
  }

  /**
   * EmailStep findMany
   */
  export type EmailStepFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailStep
     */
    select?: EmailStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailStep
     */
    omit?: EmailStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailStepInclude<ExtArgs> | null
    /**
     * Filter, which EmailSteps to fetch.
     */
    where?: EmailStepWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailSteps to fetch.
     */
    orderBy?: EmailStepOrderByWithRelationInput | EmailStepOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EmailSteps.
     */
    cursor?: EmailStepWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailSteps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailSteps.
     */
    skip?: number
    distinct?: EmailStepScalarFieldEnum | EmailStepScalarFieldEnum[]
  }

  /**
   * EmailStep create
   */
  export type EmailStepCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailStep
     */
    select?: EmailStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailStep
     */
    omit?: EmailStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailStepInclude<ExtArgs> | null
    /**
     * The data needed to create a EmailStep.
     */
    data: XOR<EmailStepCreateInput, EmailStepUncheckedCreateInput>
  }

  /**
   * EmailStep createMany
   */
  export type EmailStepCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EmailSteps.
     */
    data: EmailStepCreateManyInput | EmailStepCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EmailStep createManyAndReturn
   */
  export type EmailStepCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailStep
     */
    select?: EmailStepSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EmailStep
     */
    omit?: EmailStepOmit<ExtArgs> | null
    /**
     * The data used to create many EmailSteps.
     */
    data: EmailStepCreateManyInput | EmailStepCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailStepIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * EmailStep update
   */
  export type EmailStepUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailStep
     */
    select?: EmailStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailStep
     */
    omit?: EmailStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailStepInclude<ExtArgs> | null
    /**
     * The data needed to update a EmailStep.
     */
    data: XOR<EmailStepUpdateInput, EmailStepUncheckedUpdateInput>
    /**
     * Choose, which EmailStep to update.
     */
    where: EmailStepWhereUniqueInput
  }

  /**
   * EmailStep updateMany
   */
  export type EmailStepUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EmailSteps.
     */
    data: XOR<EmailStepUpdateManyMutationInput, EmailStepUncheckedUpdateManyInput>
    /**
     * Filter which EmailSteps to update
     */
    where?: EmailStepWhereInput
    /**
     * Limit how many EmailSteps to update.
     */
    limit?: number
  }

  /**
   * EmailStep updateManyAndReturn
   */
  export type EmailStepUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailStep
     */
    select?: EmailStepSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EmailStep
     */
    omit?: EmailStepOmit<ExtArgs> | null
    /**
     * The data used to update EmailSteps.
     */
    data: XOR<EmailStepUpdateManyMutationInput, EmailStepUncheckedUpdateManyInput>
    /**
     * Filter which EmailSteps to update
     */
    where?: EmailStepWhereInput
    /**
     * Limit how many EmailSteps to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailStepIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * EmailStep upsert
   */
  export type EmailStepUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailStep
     */
    select?: EmailStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailStep
     */
    omit?: EmailStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailStepInclude<ExtArgs> | null
    /**
     * The filter to search for the EmailStep to update in case it exists.
     */
    where: EmailStepWhereUniqueInput
    /**
     * In case the EmailStep found by the `where` argument doesn't exist, create a new EmailStep with this data.
     */
    create: XOR<EmailStepCreateInput, EmailStepUncheckedCreateInput>
    /**
     * In case the EmailStep was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmailStepUpdateInput, EmailStepUncheckedUpdateInput>
  }

  /**
   * EmailStep delete
   */
  export type EmailStepDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailStep
     */
    select?: EmailStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailStep
     */
    omit?: EmailStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailStepInclude<ExtArgs> | null
    /**
     * Filter which EmailStep to delete.
     */
    where: EmailStepWhereUniqueInput
  }

  /**
   * EmailStep deleteMany
   */
  export type EmailStepDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmailSteps to delete
     */
    where?: EmailStepWhereInput
    /**
     * Limit how many EmailSteps to delete.
     */
    limit?: number
  }

  /**
   * EmailStep without action
   */
  export type EmailStepDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailStep
     */
    select?: EmailStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailStep
     */
    omit?: EmailStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailStepInclude<ExtArgs> | null
  }


  /**
   * Model SequenceTarget
   */

  export type AggregateSequenceTarget = {
    _count: SequenceTargetCountAggregateOutputType | null
    _min: SequenceTargetMinAggregateOutputType | null
    _max: SequenceTargetMaxAggregateOutputType | null
  }

  export type SequenceTargetMinAggregateOutputType = {
    sequenceId: string | null
    clientId: string | null
  }

  export type SequenceTargetMaxAggregateOutputType = {
    sequenceId: string | null
    clientId: string | null
  }

  export type SequenceTargetCountAggregateOutputType = {
    sequenceId: number
    clientId: number
    _all: number
  }


  export type SequenceTargetMinAggregateInputType = {
    sequenceId?: true
    clientId?: true
  }

  export type SequenceTargetMaxAggregateInputType = {
    sequenceId?: true
    clientId?: true
  }

  export type SequenceTargetCountAggregateInputType = {
    sequenceId?: true
    clientId?: true
    _all?: true
  }

  export type SequenceTargetAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SequenceTarget to aggregate.
     */
    where?: SequenceTargetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SequenceTargets to fetch.
     */
    orderBy?: SequenceTargetOrderByWithRelationInput | SequenceTargetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SequenceTargetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SequenceTargets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SequenceTargets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SequenceTargets
    **/
    _count?: true | SequenceTargetCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SequenceTargetMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SequenceTargetMaxAggregateInputType
  }

  export type GetSequenceTargetAggregateType<T extends SequenceTargetAggregateArgs> = {
        [P in keyof T & keyof AggregateSequenceTarget]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSequenceTarget[P]>
      : GetScalarType<T[P], AggregateSequenceTarget[P]>
  }




  export type SequenceTargetGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SequenceTargetWhereInput
    orderBy?: SequenceTargetOrderByWithAggregationInput | SequenceTargetOrderByWithAggregationInput[]
    by: SequenceTargetScalarFieldEnum[] | SequenceTargetScalarFieldEnum
    having?: SequenceTargetScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SequenceTargetCountAggregateInputType | true
    _min?: SequenceTargetMinAggregateInputType
    _max?: SequenceTargetMaxAggregateInputType
  }

  export type SequenceTargetGroupByOutputType = {
    sequenceId: string
    clientId: string
    _count: SequenceTargetCountAggregateOutputType | null
    _min: SequenceTargetMinAggregateOutputType | null
    _max: SequenceTargetMaxAggregateOutputType | null
  }

  type GetSequenceTargetGroupByPayload<T extends SequenceTargetGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SequenceTargetGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SequenceTargetGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SequenceTargetGroupByOutputType[P]>
            : GetScalarType<T[P], SequenceTargetGroupByOutputType[P]>
        }
      >
    >


  export type SequenceTargetSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    sequenceId?: boolean
    clientId?: boolean
    sequence?: boolean | EmailSequenceDefaultArgs<ExtArgs>
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sequenceTarget"]>

  export type SequenceTargetSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    sequenceId?: boolean
    clientId?: boolean
    sequence?: boolean | EmailSequenceDefaultArgs<ExtArgs>
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sequenceTarget"]>

  export type SequenceTargetSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    sequenceId?: boolean
    clientId?: boolean
    sequence?: boolean | EmailSequenceDefaultArgs<ExtArgs>
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sequenceTarget"]>

  export type SequenceTargetSelectScalar = {
    sequenceId?: boolean
    clientId?: boolean
  }

  export type SequenceTargetOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"sequenceId" | "clientId", ExtArgs["result"]["sequenceTarget"]>
  export type SequenceTargetInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sequence?: boolean | EmailSequenceDefaultArgs<ExtArgs>
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }
  export type SequenceTargetIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sequence?: boolean | EmailSequenceDefaultArgs<ExtArgs>
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }
  export type SequenceTargetIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sequence?: boolean | EmailSequenceDefaultArgs<ExtArgs>
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }

  export type $SequenceTargetPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SequenceTarget"
    objects: {
      sequence: Prisma.$EmailSequencePayload<ExtArgs>
      client: Prisma.$ClientPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      sequenceId: string
      clientId: string
    }, ExtArgs["result"]["sequenceTarget"]>
    composites: {}
  }

  type SequenceTargetGetPayload<S extends boolean | null | undefined | SequenceTargetDefaultArgs> = $Result.GetResult<Prisma.$SequenceTargetPayload, S>

  type SequenceTargetCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SequenceTargetFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SequenceTargetCountAggregateInputType | true
    }

  export interface SequenceTargetDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SequenceTarget'], meta: { name: 'SequenceTarget' } }
    /**
     * Find zero or one SequenceTarget that matches the filter.
     * @param {SequenceTargetFindUniqueArgs} args - Arguments to find a SequenceTarget
     * @example
     * // Get one SequenceTarget
     * const sequenceTarget = await prisma.sequenceTarget.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SequenceTargetFindUniqueArgs>(args: SelectSubset<T, SequenceTargetFindUniqueArgs<ExtArgs>>): Prisma__SequenceTargetClient<$Result.GetResult<Prisma.$SequenceTargetPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SequenceTarget that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SequenceTargetFindUniqueOrThrowArgs} args - Arguments to find a SequenceTarget
     * @example
     * // Get one SequenceTarget
     * const sequenceTarget = await prisma.sequenceTarget.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SequenceTargetFindUniqueOrThrowArgs>(args: SelectSubset<T, SequenceTargetFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SequenceTargetClient<$Result.GetResult<Prisma.$SequenceTargetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SequenceTarget that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SequenceTargetFindFirstArgs} args - Arguments to find a SequenceTarget
     * @example
     * // Get one SequenceTarget
     * const sequenceTarget = await prisma.sequenceTarget.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SequenceTargetFindFirstArgs>(args?: SelectSubset<T, SequenceTargetFindFirstArgs<ExtArgs>>): Prisma__SequenceTargetClient<$Result.GetResult<Prisma.$SequenceTargetPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SequenceTarget that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SequenceTargetFindFirstOrThrowArgs} args - Arguments to find a SequenceTarget
     * @example
     * // Get one SequenceTarget
     * const sequenceTarget = await prisma.sequenceTarget.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SequenceTargetFindFirstOrThrowArgs>(args?: SelectSubset<T, SequenceTargetFindFirstOrThrowArgs<ExtArgs>>): Prisma__SequenceTargetClient<$Result.GetResult<Prisma.$SequenceTargetPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SequenceTargets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SequenceTargetFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SequenceTargets
     * const sequenceTargets = await prisma.sequenceTarget.findMany()
     * 
     * // Get first 10 SequenceTargets
     * const sequenceTargets = await prisma.sequenceTarget.findMany({ take: 10 })
     * 
     * // Only select the `sequenceId`
     * const sequenceTargetWithSequenceIdOnly = await prisma.sequenceTarget.findMany({ select: { sequenceId: true } })
     * 
     */
    findMany<T extends SequenceTargetFindManyArgs>(args?: SelectSubset<T, SequenceTargetFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SequenceTargetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SequenceTarget.
     * @param {SequenceTargetCreateArgs} args - Arguments to create a SequenceTarget.
     * @example
     * // Create one SequenceTarget
     * const SequenceTarget = await prisma.sequenceTarget.create({
     *   data: {
     *     // ... data to create a SequenceTarget
     *   }
     * })
     * 
     */
    create<T extends SequenceTargetCreateArgs>(args: SelectSubset<T, SequenceTargetCreateArgs<ExtArgs>>): Prisma__SequenceTargetClient<$Result.GetResult<Prisma.$SequenceTargetPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SequenceTargets.
     * @param {SequenceTargetCreateManyArgs} args - Arguments to create many SequenceTargets.
     * @example
     * // Create many SequenceTargets
     * const sequenceTarget = await prisma.sequenceTarget.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SequenceTargetCreateManyArgs>(args?: SelectSubset<T, SequenceTargetCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SequenceTargets and returns the data saved in the database.
     * @param {SequenceTargetCreateManyAndReturnArgs} args - Arguments to create many SequenceTargets.
     * @example
     * // Create many SequenceTargets
     * const sequenceTarget = await prisma.sequenceTarget.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SequenceTargets and only return the `sequenceId`
     * const sequenceTargetWithSequenceIdOnly = await prisma.sequenceTarget.createManyAndReturn({
     *   select: { sequenceId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SequenceTargetCreateManyAndReturnArgs>(args?: SelectSubset<T, SequenceTargetCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SequenceTargetPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SequenceTarget.
     * @param {SequenceTargetDeleteArgs} args - Arguments to delete one SequenceTarget.
     * @example
     * // Delete one SequenceTarget
     * const SequenceTarget = await prisma.sequenceTarget.delete({
     *   where: {
     *     // ... filter to delete one SequenceTarget
     *   }
     * })
     * 
     */
    delete<T extends SequenceTargetDeleteArgs>(args: SelectSubset<T, SequenceTargetDeleteArgs<ExtArgs>>): Prisma__SequenceTargetClient<$Result.GetResult<Prisma.$SequenceTargetPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SequenceTarget.
     * @param {SequenceTargetUpdateArgs} args - Arguments to update one SequenceTarget.
     * @example
     * // Update one SequenceTarget
     * const sequenceTarget = await prisma.sequenceTarget.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SequenceTargetUpdateArgs>(args: SelectSubset<T, SequenceTargetUpdateArgs<ExtArgs>>): Prisma__SequenceTargetClient<$Result.GetResult<Prisma.$SequenceTargetPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SequenceTargets.
     * @param {SequenceTargetDeleteManyArgs} args - Arguments to filter SequenceTargets to delete.
     * @example
     * // Delete a few SequenceTargets
     * const { count } = await prisma.sequenceTarget.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SequenceTargetDeleteManyArgs>(args?: SelectSubset<T, SequenceTargetDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SequenceTargets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SequenceTargetUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SequenceTargets
     * const sequenceTarget = await prisma.sequenceTarget.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SequenceTargetUpdateManyArgs>(args: SelectSubset<T, SequenceTargetUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SequenceTargets and returns the data updated in the database.
     * @param {SequenceTargetUpdateManyAndReturnArgs} args - Arguments to update many SequenceTargets.
     * @example
     * // Update many SequenceTargets
     * const sequenceTarget = await prisma.sequenceTarget.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SequenceTargets and only return the `sequenceId`
     * const sequenceTargetWithSequenceIdOnly = await prisma.sequenceTarget.updateManyAndReturn({
     *   select: { sequenceId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SequenceTargetUpdateManyAndReturnArgs>(args: SelectSubset<T, SequenceTargetUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SequenceTargetPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SequenceTarget.
     * @param {SequenceTargetUpsertArgs} args - Arguments to update or create a SequenceTarget.
     * @example
     * // Update or create a SequenceTarget
     * const sequenceTarget = await prisma.sequenceTarget.upsert({
     *   create: {
     *     // ... data to create a SequenceTarget
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SequenceTarget we want to update
     *   }
     * })
     */
    upsert<T extends SequenceTargetUpsertArgs>(args: SelectSubset<T, SequenceTargetUpsertArgs<ExtArgs>>): Prisma__SequenceTargetClient<$Result.GetResult<Prisma.$SequenceTargetPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SequenceTargets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SequenceTargetCountArgs} args - Arguments to filter SequenceTargets to count.
     * @example
     * // Count the number of SequenceTargets
     * const count = await prisma.sequenceTarget.count({
     *   where: {
     *     // ... the filter for the SequenceTargets we want to count
     *   }
     * })
    **/
    count<T extends SequenceTargetCountArgs>(
      args?: Subset<T, SequenceTargetCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SequenceTargetCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SequenceTarget.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SequenceTargetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SequenceTargetAggregateArgs>(args: Subset<T, SequenceTargetAggregateArgs>): Prisma.PrismaPromise<GetSequenceTargetAggregateType<T>>

    /**
     * Group by SequenceTarget.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SequenceTargetGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SequenceTargetGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SequenceTargetGroupByArgs['orderBy'] }
        : { orderBy?: SequenceTargetGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SequenceTargetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSequenceTargetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SequenceTarget model
   */
  readonly fields: SequenceTargetFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SequenceTarget.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SequenceTargetClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sequence<T extends EmailSequenceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmailSequenceDefaultArgs<ExtArgs>>): Prisma__EmailSequenceClient<$Result.GetResult<Prisma.$EmailSequencePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    client<T extends ClientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClientDefaultArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SequenceTarget model
   */
  interface SequenceTargetFieldRefs {
    readonly sequenceId: FieldRef<"SequenceTarget", 'String'>
    readonly clientId: FieldRef<"SequenceTarget", 'String'>
  }
    

  // Custom InputTypes
  /**
   * SequenceTarget findUnique
   */
  export type SequenceTargetFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SequenceTarget
     */
    select?: SequenceTargetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SequenceTarget
     */
    omit?: SequenceTargetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SequenceTargetInclude<ExtArgs> | null
    /**
     * Filter, which SequenceTarget to fetch.
     */
    where: SequenceTargetWhereUniqueInput
  }

  /**
   * SequenceTarget findUniqueOrThrow
   */
  export type SequenceTargetFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SequenceTarget
     */
    select?: SequenceTargetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SequenceTarget
     */
    omit?: SequenceTargetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SequenceTargetInclude<ExtArgs> | null
    /**
     * Filter, which SequenceTarget to fetch.
     */
    where: SequenceTargetWhereUniqueInput
  }

  /**
   * SequenceTarget findFirst
   */
  export type SequenceTargetFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SequenceTarget
     */
    select?: SequenceTargetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SequenceTarget
     */
    omit?: SequenceTargetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SequenceTargetInclude<ExtArgs> | null
    /**
     * Filter, which SequenceTarget to fetch.
     */
    where?: SequenceTargetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SequenceTargets to fetch.
     */
    orderBy?: SequenceTargetOrderByWithRelationInput | SequenceTargetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SequenceTargets.
     */
    cursor?: SequenceTargetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SequenceTargets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SequenceTargets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SequenceTargets.
     */
    distinct?: SequenceTargetScalarFieldEnum | SequenceTargetScalarFieldEnum[]
  }

  /**
   * SequenceTarget findFirstOrThrow
   */
  export type SequenceTargetFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SequenceTarget
     */
    select?: SequenceTargetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SequenceTarget
     */
    omit?: SequenceTargetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SequenceTargetInclude<ExtArgs> | null
    /**
     * Filter, which SequenceTarget to fetch.
     */
    where?: SequenceTargetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SequenceTargets to fetch.
     */
    orderBy?: SequenceTargetOrderByWithRelationInput | SequenceTargetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SequenceTargets.
     */
    cursor?: SequenceTargetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SequenceTargets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SequenceTargets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SequenceTargets.
     */
    distinct?: SequenceTargetScalarFieldEnum | SequenceTargetScalarFieldEnum[]
  }

  /**
   * SequenceTarget findMany
   */
  export type SequenceTargetFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SequenceTarget
     */
    select?: SequenceTargetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SequenceTarget
     */
    omit?: SequenceTargetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SequenceTargetInclude<ExtArgs> | null
    /**
     * Filter, which SequenceTargets to fetch.
     */
    where?: SequenceTargetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SequenceTargets to fetch.
     */
    orderBy?: SequenceTargetOrderByWithRelationInput | SequenceTargetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SequenceTargets.
     */
    cursor?: SequenceTargetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SequenceTargets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SequenceTargets.
     */
    skip?: number
    distinct?: SequenceTargetScalarFieldEnum | SequenceTargetScalarFieldEnum[]
  }

  /**
   * SequenceTarget create
   */
  export type SequenceTargetCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SequenceTarget
     */
    select?: SequenceTargetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SequenceTarget
     */
    omit?: SequenceTargetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SequenceTargetInclude<ExtArgs> | null
    /**
     * The data needed to create a SequenceTarget.
     */
    data: XOR<SequenceTargetCreateInput, SequenceTargetUncheckedCreateInput>
  }

  /**
   * SequenceTarget createMany
   */
  export type SequenceTargetCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SequenceTargets.
     */
    data: SequenceTargetCreateManyInput | SequenceTargetCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SequenceTarget createManyAndReturn
   */
  export type SequenceTargetCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SequenceTarget
     */
    select?: SequenceTargetSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SequenceTarget
     */
    omit?: SequenceTargetOmit<ExtArgs> | null
    /**
     * The data used to create many SequenceTargets.
     */
    data: SequenceTargetCreateManyInput | SequenceTargetCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SequenceTargetIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SequenceTarget update
   */
  export type SequenceTargetUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SequenceTarget
     */
    select?: SequenceTargetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SequenceTarget
     */
    omit?: SequenceTargetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SequenceTargetInclude<ExtArgs> | null
    /**
     * The data needed to update a SequenceTarget.
     */
    data: XOR<SequenceTargetUpdateInput, SequenceTargetUncheckedUpdateInput>
    /**
     * Choose, which SequenceTarget to update.
     */
    where: SequenceTargetWhereUniqueInput
  }

  /**
   * SequenceTarget updateMany
   */
  export type SequenceTargetUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SequenceTargets.
     */
    data: XOR<SequenceTargetUpdateManyMutationInput, SequenceTargetUncheckedUpdateManyInput>
    /**
     * Filter which SequenceTargets to update
     */
    where?: SequenceTargetWhereInput
    /**
     * Limit how many SequenceTargets to update.
     */
    limit?: number
  }

  /**
   * SequenceTarget updateManyAndReturn
   */
  export type SequenceTargetUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SequenceTarget
     */
    select?: SequenceTargetSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SequenceTarget
     */
    omit?: SequenceTargetOmit<ExtArgs> | null
    /**
     * The data used to update SequenceTargets.
     */
    data: XOR<SequenceTargetUpdateManyMutationInput, SequenceTargetUncheckedUpdateManyInput>
    /**
     * Filter which SequenceTargets to update
     */
    where?: SequenceTargetWhereInput
    /**
     * Limit how many SequenceTargets to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SequenceTargetIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SequenceTarget upsert
   */
  export type SequenceTargetUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SequenceTarget
     */
    select?: SequenceTargetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SequenceTarget
     */
    omit?: SequenceTargetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SequenceTargetInclude<ExtArgs> | null
    /**
     * The filter to search for the SequenceTarget to update in case it exists.
     */
    where: SequenceTargetWhereUniqueInput
    /**
     * In case the SequenceTarget found by the `where` argument doesn't exist, create a new SequenceTarget with this data.
     */
    create: XOR<SequenceTargetCreateInput, SequenceTargetUncheckedCreateInput>
    /**
     * In case the SequenceTarget was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SequenceTargetUpdateInput, SequenceTargetUncheckedUpdateInput>
  }

  /**
   * SequenceTarget delete
   */
  export type SequenceTargetDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SequenceTarget
     */
    select?: SequenceTargetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SequenceTarget
     */
    omit?: SequenceTargetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SequenceTargetInclude<ExtArgs> | null
    /**
     * Filter which SequenceTarget to delete.
     */
    where: SequenceTargetWhereUniqueInput
  }

  /**
   * SequenceTarget deleteMany
   */
  export type SequenceTargetDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SequenceTargets to delete
     */
    where?: SequenceTargetWhereInput
    /**
     * Limit how many SequenceTargets to delete.
     */
    limit?: number
  }

  /**
   * SequenceTarget without action
   */
  export type SequenceTargetDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SequenceTarget
     */
    select?: SequenceTargetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SequenceTarget
     */
    omit?: SequenceTargetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SequenceTargetInclude<ExtArgs> | null
  }


  /**
   * Model EmailEvent
   */

  export type AggregateEmailEvent = {
    _count: EmailEventCountAggregateOutputType | null
    _min: EmailEventMinAggregateOutputType | null
    _max: EmailEventMaxAggregateOutputType | null
  }

  export type EmailEventMinAggregateOutputType = {
    id: string | null
    sequenceId: string | null
    clientId: string | null
    type: string | null
    createdAt: Date | null
  }

  export type EmailEventMaxAggregateOutputType = {
    id: string | null
    sequenceId: string | null
    clientId: string | null
    type: string | null
    createdAt: Date | null
  }

  export type EmailEventCountAggregateOutputType = {
    id: number
    sequenceId: number
    clientId: number
    type: number
    metadata: number
    createdAt: number
    _all: number
  }


  export type EmailEventMinAggregateInputType = {
    id?: true
    sequenceId?: true
    clientId?: true
    type?: true
    createdAt?: true
  }

  export type EmailEventMaxAggregateInputType = {
    id?: true
    sequenceId?: true
    clientId?: true
    type?: true
    createdAt?: true
  }

  export type EmailEventCountAggregateInputType = {
    id?: true
    sequenceId?: true
    clientId?: true
    type?: true
    metadata?: true
    createdAt?: true
    _all?: true
  }

  export type EmailEventAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmailEvent to aggregate.
     */
    where?: EmailEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailEvents to fetch.
     */
    orderBy?: EmailEventOrderByWithRelationInput | EmailEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmailEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EmailEvents
    **/
    _count?: true | EmailEventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmailEventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmailEventMaxAggregateInputType
  }

  export type GetEmailEventAggregateType<T extends EmailEventAggregateArgs> = {
        [P in keyof T & keyof AggregateEmailEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmailEvent[P]>
      : GetScalarType<T[P], AggregateEmailEvent[P]>
  }




  export type EmailEventGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmailEventWhereInput
    orderBy?: EmailEventOrderByWithAggregationInput | EmailEventOrderByWithAggregationInput[]
    by: EmailEventScalarFieldEnum[] | EmailEventScalarFieldEnum
    having?: EmailEventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmailEventCountAggregateInputType | true
    _min?: EmailEventMinAggregateInputType
    _max?: EmailEventMaxAggregateInputType
  }

  export type EmailEventGroupByOutputType = {
    id: string
    sequenceId: string | null
    clientId: string | null
    type: string
    metadata: JsonValue | null
    createdAt: Date
    _count: EmailEventCountAggregateOutputType | null
    _min: EmailEventMinAggregateOutputType | null
    _max: EmailEventMaxAggregateOutputType | null
  }

  type GetEmailEventGroupByPayload<T extends EmailEventGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmailEventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmailEventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmailEventGroupByOutputType[P]>
            : GetScalarType<T[P], EmailEventGroupByOutputType[P]>
        }
      >
    >


  export type EmailEventSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sequenceId?: boolean
    clientId?: boolean
    type?: boolean
    metadata?: boolean
    createdAt?: boolean
    sequence?: boolean | EmailEvent$sequenceArgs<ExtArgs>
    client?: boolean | EmailEvent$clientArgs<ExtArgs>
  }, ExtArgs["result"]["emailEvent"]>

  export type EmailEventSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sequenceId?: boolean
    clientId?: boolean
    type?: boolean
    metadata?: boolean
    createdAt?: boolean
    sequence?: boolean | EmailEvent$sequenceArgs<ExtArgs>
    client?: boolean | EmailEvent$clientArgs<ExtArgs>
  }, ExtArgs["result"]["emailEvent"]>

  export type EmailEventSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sequenceId?: boolean
    clientId?: boolean
    type?: boolean
    metadata?: boolean
    createdAt?: boolean
    sequence?: boolean | EmailEvent$sequenceArgs<ExtArgs>
    client?: boolean | EmailEvent$clientArgs<ExtArgs>
  }, ExtArgs["result"]["emailEvent"]>

  export type EmailEventSelectScalar = {
    id?: boolean
    sequenceId?: boolean
    clientId?: boolean
    type?: boolean
    metadata?: boolean
    createdAt?: boolean
  }

  export type EmailEventOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "sequenceId" | "clientId" | "type" | "metadata" | "createdAt", ExtArgs["result"]["emailEvent"]>
  export type EmailEventInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sequence?: boolean | EmailEvent$sequenceArgs<ExtArgs>
    client?: boolean | EmailEvent$clientArgs<ExtArgs>
  }
  export type EmailEventIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sequence?: boolean | EmailEvent$sequenceArgs<ExtArgs>
    client?: boolean | EmailEvent$clientArgs<ExtArgs>
  }
  export type EmailEventIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sequence?: boolean | EmailEvent$sequenceArgs<ExtArgs>
    client?: boolean | EmailEvent$clientArgs<ExtArgs>
  }

  export type $EmailEventPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EmailEvent"
    objects: {
      sequence: Prisma.$EmailSequencePayload<ExtArgs> | null
      client: Prisma.$ClientPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      sequenceId: string | null
      clientId: string | null
      type: string
      metadata: Prisma.JsonValue | null
      createdAt: Date
    }, ExtArgs["result"]["emailEvent"]>
    composites: {}
  }

  type EmailEventGetPayload<S extends boolean | null | undefined | EmailEventDefaultArgs> = $Result.GetResult<Prisma.$EmailEventPayload, S>

  type EmailEventCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EmailEventFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EmailEventCountAggregateInputType | true
    }

  export interface EmailEventDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EmailEvent'], meta: { name: 'EmailEvent' } }
    /**
     * Find zero or one EmailEvent that matches the filter.
     * @param {EmailEventFindUniqueArgs} args - Arguments to find a EmailEvent
     * @example
     * // Get one EmailEvent
     * const emailEvent = await prisma.emailEvent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmailEventFindUniqueArgs>(args: SelectSubset<T, EmailEventFindUniqueArgs<ExtArgs>>): Prisma__EmailEventClient<$Result.GetResult<Prisma.$EmailEventPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one EmailEvent that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EmailEventFindUniqueOrThrowArgs} args - Arguments to find a EmailEvent
     * @example
     * // Get one EmailEvent
     * const emailEvent = await prisma.emailEvent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmailEventFindUniqueOrThrowArgs>(args: SelectSubset<T, EmailEventFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmailEventClient<$Result.GetResult<Prisma.$EmailEventPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EmailEvent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailEventFindFirstArgs} args - Arguments to find a EmailEvent
     * @example
     * // Get one EmailEvent
     * const emailEvent = await prisma.emailEvent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmailEventFindFirstArgs>(args?: SelectSubset<T, EmailEventFindFirstArgs<ExtArgs>>): Prisma__EmailEventClient<$Result.GetResult<Prisma.$EmailEventPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EmailEvent that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailEventFindFirstOrThrowArgs} args - Arguments to find a EmailEvent
     * @example
     * // Get one EmailEvent
     * const emailEvent = await prisma.emailEvent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmailEventFindFirstOrThrowArgs>(args?: SelectSubset<T, EmailEventFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmailEventClient<$Result.GetResult<Prisma.$EmailEventPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more EmailEvents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailEventFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EmailEvents
     * const emailEvents = await prisma.emailEvent.findMany()
     * 
     * // Get first 10 EmailEvents
     * const emailEvents = await prisma.emailEvent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const emailEventWithIdOnly = await prisma.emailEvent.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EmailEventFindManyArgs>(args?: SelectSubset<T, EmailEventFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailEventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a EmailEvent.
     * @param {EmailEventCreateArgs} args - Arguments to create a EmailEvent.
     * @example
     * // Create one EmailEvent
     * const EmailEvent = await prisma.emailEvent.create({
     *   data: {
     *     // ... data to create a EmailEvent
     *   }
     * })
     * 
     */
    create<T extends EmailEventCreateArgs>(args: SelectSubset<T, EmailEventCreateArgs<ExtArgs>>): Prisma__EmailEventClient<$Result.GetResult<Prisma.$EmailEventPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many EmailEvents.
     * @param {EmailEventCreateManyArgs} args - Arguments to create many EmailEvents.
     * @example
     * // Create many EmailEvents
     * const emailEvent = await prisma.emailEvent.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmailEventCreateManyArgs>(args?: SelectSubset<T, EmailEventCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EmailEvents and returns the data saved in the database.
     * @param {EmailEventCreateManyAndReturnArgs} args - Arguments to create many EmailEvents.
     * @example
     * // Create many EmailEvents
     * const emailEvent = await prisma.emailEvent.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EmailEvents and only return the `id`
     * const emailEventWithIdOnly = await prisma.emailEvent.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EmailEventCreateManyAndReturnArgs>(args?: SelectSubset<T, EmailEventCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailEventPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a EmailEvent.
     * @param {EmailEventDeleteArgs} args - Arguments to delete one EmailEvent.
     * @example
     * // Delete one EmailEvent
     * const EmailEvent = await prisma.emailEvent.delete({
     *   where: {
     *     // ... filter to delete one EmailEvent
     *   }
     * })
     * 
     */
    delete<T extends EmailEventDeleteArgs>(args: SelectSubset<T, EmailEventDeleteArgs<ExtArgs>>): Prisma__EmailEventClient<$Result.GetResult<Prisma.$EmailEventPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one EmailEvent.
     * @param {EmailEventUpdateArgs} args - Arguments to update one EmailEvent.
     * @example
     * // Update one EmailEvent
     * const emailEvent = await prisma.emailEvent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmailEventUpdateArgs>(args: SelectSubset<T, EmailEventUpdateArgs<ExtArgs>>): Prisma__EmailEventClient<$Result.GetResult<Prisma.$EmailEventPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more EmailEvents.
     * @param {EmailEventDeleteManyArgs} args - Arguments to filter EmailEvents to delete.
     * @example
     * // Delete a few EmailEvents
     * const { count } = await prisma.emailEvent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmailEventDeleteManyArgs>(args?: SelectSubset<T, EmailEventDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmailEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailEventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EmailEvents
     * const emailEvent = await prisma.emailEvent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmailEventUpdateManyArgs>(args: SelectSubset<T, EmailEventUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmailEvents and returns the data updated in the database.
     * @param {EmailEventUpdateManyAndReturnArgs} args - Arguments to update many EmailEvents.
     * @example
     * // Update many EmailEvents
     * const emailEvent = await prisma.emailEvent.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more EmailEvents and only return the `id`
     * const emailEventWithIdOnly = await prisma.emailEvent.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EmailEventUpdateManyAndReturnArgs>(args: SelectSubset<T, EmailEventUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailEventPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one EmailEvent.
     * @param {EmailEventUpsertArgs} args - Arguments to update or create a EmailEvent.
     * @example
     * // Update or create a EmailEvent
     * const emailEvent = await prisma.emailEvent.upsert({
     *   create: {
     *     // ... data to create a EmailEvent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EmailEvent we want to update
     *   }
     * })
     */
    upsert<T extends EmailEventUpsertArgs>(args: SelectSubset<T, EmailEventUpsertArgs<ExtArgs>>): Prisma__EmailEventClient<$Result.GetResult<Prisma.$EmailEventPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of EmailEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailEventCountArgs} args - Arguments to filter EmailEvents to count.
     * @example
     * // Count the number of EmailEvents
     * const count = await prisma.emailEvent.count({
     *   where: {
     *     // ... the filter for the EmailEvents we want to count
     *   }
     * })
    **/
    count<T extends EmailEventCountArgs>(
      args?: Subset<T, EmailEventCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmailEventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EmailEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailEventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmailEventAggregateArgs>(args: Subset<T, EmailEventAggregateArgs>): Prisma.PrismaPromise<GetEmailEventAggregateType<T>>

    /**
     * Group by EmailEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailEventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmailEventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmailEventGroupByArgs['orderBy'] }
        : { orderBy?: EmailEventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmailEventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmailEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EmailEvent model
   */
  readonly fields: EmailEventFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EmailEvent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmailEventClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sequence<T extends EmailEvent$sequenceArgs<ExtArgs> = {}>(args?: Subset<T, EmailEvent$sequenceArgs<ExtArgs>>): Prisma__EmailSequenceClient<$Result.GetResult<Prisma.$EmailSequencePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    client<T extends EmailEvent$clientArgs<ExtArgs> = {}>(args?: Subset<T, EmailEvent$clientArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EmailEvent model
   */
  interface EmailEventFieldRefs {
    readonly id: FieldRef<"EmailEvent", 'String'>
    readonly sequenceId: FieldRef<"EmailEvent", 'String'>
    readonly clientId: FieldRef<"EmailEvent", 'String'>
    readonly type: FieldRef<"EmailEvent", 'String'>
    readonly metadata: FieldRef<"EmailEvent", 'Json'>
    readonly createdAt: FieldRef<"EmailEvent", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * EmailEvent findUnique
   */
  export type EmailEventFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailEvent
     */
    select?: EmailEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailEvent
     */
    omit?: EmailEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailEventInclude<ExtArgs> | null
    /**
     * Filter, which EmailEvent to fetch.
     */
    where: EmailEventWhereUniqueInput
  }

  /**
   * EmailEvent findUniqueOrThrow
   */
  export type EmailEventFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailEvent
     */
    select?: EmailEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailEvent
     */
    omit?: EmailEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailEventInclude<ExtArgs> | null
    /**
     * Filter, which EmailEvent to fetch.
     */
    where: EmailEventWhereUniqueInput
  }

  /**
   * EmailEvent findFirst
   */
  export type EmailEventFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailEvent
     */
    select?: EmailEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailEvent
     */
    omit?: EmailEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailEventInclude<ExtArgs> | null
    /**
     * Filter, which EmailEvent to fetch.
     */
    where?: EmailEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailEvents to fetch.
     */
    orderBy?: EmailEventOrderByWithRelationInput | EmailEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmailEvents.
     */
    cursor?: EmailEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmailEvents.
     */
    distinct?: EmailEventScalarFieldEnum | EmailEventScalarFieldEnum[]
  }

  /**
   * EmailEvent findFirstOrThrow
   */
  export type EmailEventFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailEvent
     */
    select?: EmailEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailEvent
     */
    omit?: EmailEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailEventInclude<ExtArgs> | null
    /**
     * Filter, which EmailEvent to fetch.
     */
    where?: EmailEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailEvents to fetch.
     */
    orderBy?: EmailEventOrderByWithRelationInput | EmailEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmailEvents.
     */
    cursor?: EmailEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmailEvents.
     */
    distinct?: EmailEventScalarFieldEnum | EmailEventScalarFieldEnum[]
  }

  /**
   * EmailEvent findMany
   */
  export type EmailEventFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailEvent
     */
    select?: EmailEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailEvent
     */
    omit?: EmailEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailEventInclude<ExtArgs> | null
    /**
     * Filter, which EmailEvents to fetch.
     */
    where?: EmailEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailEvents to fetch.
     */
    orderBy?: EmailEventOrderByWithRelationInput | EmailEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EmailEvents.
     */
    cursor?: EmailEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailEvents.
     */
    skip?: number
    distinct?: EmailEventScalarFieldEnum | EmailEventScalarFieldEnum[]
  }

  /**
   * EmailEvent create
   */
  export type EmailEventCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailEvent
     */
    select?: EmailEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailEvent
     */
    omit?: EmailEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailEventInclude<ExtArgs> | null
    /**
     * The data needed to create a EmailEvent.
     */
    data: XOR<EmailEventCreateInput, EmailEventUncheckedCreateInput>
  }

  /**
   * EmailEvent createMany
   */
  export type EmailEventCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EmailEvents.
     */
    data: EmailEventCreateManyInput | EmailEventCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EmailEvent createManyAndReturn
   */
  export type EmailEventCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailEvent
     */
    select?: EmailEventSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EmailEvent
     */
    omit?: EmailEventOmit<ExtArgs> | null
    /**
     * The data used to create many EmailEvents.
     */
    data: EmailEventCreateManyInput | EmailEventCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailEventIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * EmailEvent update
   */
  export type EmailEventUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailEvent
     */
    select?: EmailEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailEvent
     */
    omit?: EmailEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailEventInclude<ExtArgs> | null
    /**
     * The data needed to update a EmailEvent.
     */
    data: XOR<EmailEventUpdateInput, EmailEventUncheckedUpdateInput>
    /**
     * Choose, which EmailEvent to update.
     */
    where: EmailEventWhereUniqueInput
  }

  /**
   * EmailEvent updateMany
   */
  export type EmailEventUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EmailEvents.
     */
    data: XOR<EmailEventUpdateManyMutationInput, EmailEventUncheckedUpdateManyInput>
    /**
     * Filter which EmailEvents to update
     */
    where?: EmailEventWhereInput
    /**
     * Limit how many EmailEvents to update.
     */
    limit?: number
  }

  /**
   * EmailEvent updateManyAndReturn
   */
  export type EmailEventUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailEvent
     */
    select?: EmailEventSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EmailEvent
     */
    omit?: EmailEventOmit<ExtArgs> | null
    /**
     * The data used to update EmailEvents.
     */
    data: XOR<EmailEventUpdateManyMutationInput, EmailEventUncheckedUpdateManyInput>
    /**
     * Filter which EmailEvents to update
     */
    where?: EmailEventWhereInput
    /**
     * Limit how many EmailEvents to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailEventIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * EmailEvent upsert
   */
  export type EmailEventUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailEvent
     */
    select?: EmailEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailEvent
     */
    omit?: EmailEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailEventInclude<ExtArgs> | null
    /**
     * The filter to search for the EmailEvent to update in case it exists.
     */
    where: EmailEventWhereUniqueInput
    /**
     * In case the EmailEvent found by the `where` argument doesn't exist, create a new EmailEvent with this data.
     */
    create: XOR<EmailEventCreateInput, EmailEventUncheckedCreateInput>
    /**
     * In case the EmailEvent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmailEventUpdateInput, EmailEventUncheckedUpdateInput>
  }

  /**
   * EmailEvent delete
   */
  export type EmailEventDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailEvent
     */
    select?: EmailEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailEvent
     */
    omit?: EmailEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailEventInclude<ExtArgs> | null
    /**
     * Filter which EmailEvent to delete.
     */
    where: EmailEventWhereUniqueInput
  }

  /**
   * EmailEvent deleteMany
   */
  export type EmailEventDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmailEvents to delete
     */
    where?: EmailEventWhereInput
    /**
     * Limit how many EmailEvents to delete.
     */
    limit?: number
  }

  /**
   * EmailEvent.sequence
   */
  export type EmailEvent$sequenceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailSequence
     */
    select?: EmailSequenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailSequence
     */
    omit?: EmailSequenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailSequenceInclude<ExtArgs> | null
    where?: EmailSequenceWhereInput
  }

  /**
   * EmailEvent.client
   */
  export type EmailEvent$clientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    where?: ClientWhereInput
  }

  /**
   * EmailEvent without action
   */
  export type EmailEventDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailEvent
     */
    select?: EmailEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailEvent
     */
    omit?: EmailEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailEventInclude<ExtArgs> | null
  }


  /**
   * Model Invoice
   */

  export type AggregateInvoice = {
    _count: InvoiceCountAggregateOutputType | null
    _avg: InvoiceAvgAggregateOutputType | null
    _sum: InvoiceSumAggregateOutputType | null
    _min: InvoiceMinAggregateOutputType | null
    _max: InvoiceMaxAggregateOutputType | null
  }

  export type InvoiceAvgAggregateOutputType = {
    amountUsd: number | null
  }

  export type InvoiceSumAggregateOutputType = {
    amountUsd: number | null
  }

  export type InvoiceMinAggregateOutputType = {
    id: string | null
    organizationId: string | null
    clientId: string | null
    amountUsd: number | null
    status: $Enums.InvoiceStatus | null
    dueDate: Date | null
    createdAt: Date | null
  }

  export type InvoiceMaxAggregateOutputType = {
    id: string | null
    organizationId: string | null
    clientId: string | null
    amountUsd: number | null
    status: $Enums.InvoiceStatus | null
    dueDate: Date | null
    createdAt: Date | null
  }

  export type InvoiceCountAggregateOutputType = {
    id: number
    organizationId: number
    clientId: number
    amountUsd: number
    status: number
    dueDate: number
    createdAt: number
    _all: number
  }


  export type InvoiceAvgAggregateInputType = {
    amountUsd?: true
  }

  export type InvoiceSumAggregateInputType = {
    amountUsd?: true
  }

  export type InvoiceMinAggregateInputType = {
    id?: true
    organizationId?: true
    clientId?: true
    amountUsd?: true
    status?: true
    dueDate?: true
    createdAt?: true
  }

  export type InvoiceMaxAggregateInputType = {
    id?: true
    organizationId?: true
    clientId?: true
    amountUsd?: true
    status?: true
    dueDate?: true
    createdAt?: true
  }

  export type InvoiceCountAggregateInputType = {
    id?: true
    organizationId?: true
    clientId?: true
    amountUsd?: true
    status?: true
    dueDate?: true
    createdAt?: true
    _all?: true
  }

  export type InvoiceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Invoice to aggregate.
     */
    where?: InvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invoices to fetch.
     */
    orderBy?: InvoiceOrderByWithRelationInput | InvoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invoices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Invoices
    **/
    _count?: true | InvoiceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InvoiceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InvoiceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InvoiceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InvoiceMaxAggregateInputType
  }

  export type GetInvoiceAggregateType<T extends InvoiceAggregateArgs> = {
        [P in keyof T & keyof AggregateInvoice]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInvoice[P]>
      : GetScalarType<T[P], AggregateInvoice[P]>
  }




  export type InvoiceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvoiceWhereInput
    orderBy?: InvoiceOrderByWithAggregationInput | InvoiceOrderByWithAggregationInput[]
    by: InvoiceScalarFieldEnum[] | InvoiceScalarFieldEnum
    having?: InvoiceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InvoiceCountAggregateInputType | true
    _avg?: InvoiceAvgAggregateInputType
    _sum?: InvoiceSumAggregateInputType
    _min?: InvoiceMinAggregateInputType
    _max?: InvoiceMaxAggregateInputType
  }

  export type InvoiceGroupByOutputType = {
    id: string
    organizationId: string
    clientId: string
    amountUsd: number
    status: $Enums.InvoiceStatus
    dueDate: Date
    createdAt: Date
    _count: InvoiceCountAggregateOutputType | null
    _avg: InvoiceAvgAggregateOutputType | null
    _sum: InvoiceSumAggregateOutputType | null
    _min: InvoiceMinAggregateOutputType | null
    _max: InvoiceMaxAggregateOutputType | null
  }

  type GetInvoiceGroupByPayload<T extends InvoiceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InvoiceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InvoiceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InvoiceGroupByOutputType[P]>
            : GetScalarType<T[P], InvoiceGroupByOutputType[P]>
        }
      >
    >


  export type InvoiceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    clientId?: boolean
    amountUsd?: boolean
    status?: boolean
    dueDate?: boolean
    createdAt?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    client?: boolean | ClientDefaultArgs<ExtArgs>
    transactions?: boolean | Invoice$transactionsArgs<ExtArgs>
    _count?: boolean | InvoiceCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["invoice"]>

  export type InvoiceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    clientId?: boolean
    amountUsd?: boolean
    status?: boolean
    dueDate?: boolean
    createdAt?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["invoice"]>

  export type InvoiceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    clientId?: boolean
    amountUsd?: boolean
    status?: boolean
    dueDate?: boolean
    createdAt?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["invoice"]>

  export type InvoiceSelectScalar = {
    id?: boolean
    organizationId?: boolean
    clientId?: boolean
    amountUsd?: boolean
    status?: boolean
    dueDate?: boolean
    createdAt?: boolean
  }

  export type InvoiceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "organizationId" | "clientId" | "amountUsd" | "status" | "dueDate" | "createdAt", ExtArgs["result"]["invoice"]>
  export type InvoiceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    client?: boolean | ClientDefaultArgs<ExtArgs>
    transactions?: boolean | Invoice$transactionsArgs<ExtArgs>
    _count?: boolean | InvoiceCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type InvoiceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }
  export type InvoiceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }

  export type $InvoicePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Invoice"
    objects: {
      organization: Prisma.$OrganizationPayload<ExtArgs>
      client: Prisma.$ClientPayload<ExtArgs>
      transactions: Prisma.$TransactionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      organizationId: string
      clientId: string
      amountUsd: number
      status: $Enums.InvoiceStatus
      dueDate: Date
      createdAt: Date
    }, ExtArgs["result"]["invoice"]>
    composites: {}
  }

  type InvoiceGetPayload<S extends boolean | null | undefined | InvoiceDefaultArgs> = $Result.GetResult<Prisma.$InvoicePayload, S>

  type InvoiceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InvoiceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InvoiceCountAggregateInputType | true
    }

  export interface InvoiceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Invoice'], meta: { name: 'Invoice' } }
    /**
     * Find zero or one Invoice that matches the filter.
     * @param {InvoiceFindUniqueArgs} args - Arguments to find a Invoice
     * @example
     * // Get one Invoice
     * const invoice = await prisma.invoice.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InvoiceFindUniqueArgs>(args: SelectSubset<T, InvoiceFindUniqueArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Invoice that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InvoiceFindUniqueOrThrowArgs} args - Arguments to find a Invoice
     * @example
     * // Get one Invoice
     * const invoice = await prisma.invoice.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InvoiceFindUniqueOrThrowArgs>(args: SelectSubset<T, InvoiceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Invoice that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceFindFirstArgs} args - Arguments to find a Invoice
     * @example
     * // Get one Invoice
     * const invoice = await prisma.invoice.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InvoiceFindFirstArgs>(args?: SelectSubset<T, InvoiceFindFirstArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Invoice that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceFindFirstOrThrowArgs} args - Arguments to find a Invoice
     * @example
     * // Get one Invoice
     * const invoice = await prisma.invoice.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InvoiceFindFirstOrThrowArgs>(args?: SelectSubset<T, InvoiceFindFirstOrThrowArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Invoices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Invoices
     * const invoices = await prisma.invoice.findMany()
     * 
     * // Get first 10 Invoices
     * const invoices = await prisma.invoice.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const invoiceWithIdOnly = await prisma.invoice.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InvoiceFindManyArgs>(args?: SelectSubset<T, InvoiceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Invoice.
     * @param {InvoiceCreateArgs} args - Arguments to create a Invoice.
     * @example
     * // Create one Invoice
     * const Invoice = await prisma.invoice.create({
     *   data: {
     *     // ... data to create a Invoice
     *   }
     * })
     * 
     */
    create<T extends InvoiceCreateArgs>(args: SelectSubset<T, InvoiceCreateArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Invoices.
     * @param {InvoiceCreateManyArgs} args - Arguments to create many Invoices.
     * @example
     * // Create many Invoices
     * const invoice = await prisma.invoice.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InvoiceCreateManyArgs>(args?: SelectSubset<T, InvoiceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Invoices and returns the data saved in the database.
     * @param {InvoiceCreateManyAndReturnArgs} args - Arguments to create many Invoices.
     * @example
     * // Create many Invoices
     * const invoice = await prisma.invoice.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Invoices and only return the `id`
     * const invoiceWithIdOnly = await prisma.invoice.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InvoiceCreateManyAndReturnArgs>(args?: SelectSubset<T, InvoiceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Invoice.
     * @param {InvoiceDeleteArgs} args - Arguments to delete one Invoice.
     * @example
     * // Delete one Invoice
     * const Invoice = await prisma.invoice.delete({
     *   where: {
     *     // ... filter to delete one Invoice
     *   }
     * })
     * 
     */
    delete<T extends InvoiceDeleteArgs>(args: SelectSubset<T, InvoiceDeleteArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Invoice.
     * @param {InvoiceUpdateArgs} args - Arguments to update one Invoice.
     * @example
     * // Update one Invoice
     * const invoice = await prisma.invoice.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InvoiceUpdateArgs>(args: SelectSubset<T, InvoiceUpdateArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Invoices.
     * @param {InvoiceDeleteManyArgs} args - Arguments to filter Invoices to delete.
     * @example
     * // Delete a few Invoices
     * const { count } = await prisma.invoice.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InvoiceDeleteManyArgs>(args?: SelectSubset<T, InvoiceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Invoices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Invoices
     * const invoice = await prisma.invoice.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InvoiceUpdateManyArgs>(args: SelectSubset<T, InvoiceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Invoices and returns the data updated in the database.
     * @param {InvoiceUpdateManyAndReturnArgs} args - Arguments to update many Invoices.
     * @example
     * // Update many Invoices
     * const invoice = await prisma.invoice.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Invoices and only return the `id`
     * const invoiceWithIdOnly = await prisma.invoice.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends InvoiceUpdateManyAndReturnArgs>(args: SelectSubset<T, InvoiceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Invoice.
     * @param {InvoiceUpsertArgs} args - Arguments to update or create a Invoice.
     * @example
     * // Update or create a Invoice
     * const invoice = await prisma.invoice.upsert({
     *   create: {
     *     // ... data to create a Invoice
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Invoice we want to update
     *   }
     * })
     */
    upsert<T extends InvoiceUpsertArgs>(args: SelectSubset<T, InvoiceUpsertArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Invoices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceCountArgs} args - Arguments to filter Invoices to count.
     * @example
     * // Count the number of Invoices
     * const count = await prisma.invoice.count({
     *   where: {
     *     // ... the filter for the Invoices we want to count
     *   }
     * })
    **/
    count<T extends InvoiceCountArgs>(
      args?: Subset<T, InvoiceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InvoiceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Invoice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InvoiceAggregateArgs>(args: Subset<T, InvoiceAggregateArgs>): Prisma.PrismaPromise<GetInvoiceAggregateType<T>>

    /**
     * Group by Invoice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InvoiceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InvoiceGroupByArgs['orderBy'] }
        : { orderBy?: InvoiceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InvoiceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInvoiceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Invoice model
   */
  readonly fields: InvoiceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Invoice.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InvoiceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    client<T extends ClientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClientDefaultArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    transactions<T extends Invoice$transactionsArgs<ExtArgs> = {}>(args?: Subset<T, Invoice$transactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Invoice model
   */
  interface InvoiceFieldRefs {
    readonly id: FieldRef<"Invoice", 'String'>
    readonly organizationId: FieldRef<"Invoice", 'String'>
    readonly clientId: FieldRef<"Invoice", 'String'>
    readonly amountUsd: FieldRef<"Invoice", 'Int'>
    readonly status: FieldRef<"Invoice", 'InvoiceStatus'>
    readonly dueDate: FieldRef<"Invoice", 'DateTime'>
    readonly createdAt: FieldRef<"Invoice", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Invoice findUnique
   */
  export type InvoiceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * Filter, which Invoice to fetch.
     */
    where: InvoiceWhereUniqueInput
  }

  /**
   * Invoice findUniqueOrThrow
   */
  export type InvoiceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * Filter, which Invoice to fetch.
     */
    where: InvoiceWhereUniqueInput
  }

  /**
   * Invoice findFirst
   */
  export type InvoiceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * Filter, which Invoice to fetch.
     */
    where?: InvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invoices to fetch.
     */
    orderBy?: InvoiceOrderByWithRelationInput | InvoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Invoices.
     */
    cursor?: InvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invoices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Invoices.
     */
    distinct?: InvoiceScalarFieldEnum | InvoiceScalarFieldEnum[]
  }

  /**
   * Invoice findFirstOrThrow
   */
  export type InvoiceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * Filter, which Invoice to fetch.
     */
    where?: InvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invoices to fetch.
     */
    orderBy?: InvoiceOrderByWithRelationInput | InvoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Invoices.
     */
    cursor?: InvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invoices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Invoices.
     */
    distinct?: InvoiceScalarFieldEnum | InvoiceScalarFieldEnum[]
  }

  /**
   * Invoice findMany
   */
  export type InvoiceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * Filter, which Invoices to fetch.
     */
    where?: InvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invoices to fetch.
     */
    orderBy?: InvoiceOrderByWithRelationInput | InvoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Invoices.
     */
    cursor?: InvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invoices.
     */
    skip?: number
    distinct?: InvoiceScalarFieldEnum | InvoiceScalarFieldEnum[]
  }

  /**
   * Invoice create
   */
  export type InvoiceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * The data needed to create a Invoice.
     */
    data: XOR<InvoiceCreateInput, InvoiceUncheckedCreateInput>
  }

  /**
   * Invoice createMany
   */
  export type InvoiceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Invoices.
     */
    data: InvoiceCreateManyInput | InvoiceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Invoice createManyAndReturn
   */
  export type InvoiceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * The data used to create many Invoices.
     */
    data: InvoiceCreateManyInput | InvoiceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Invoice update
   */
  export type InvoiceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * The data needed to update a Invoice.
     */
    data: XOR<InvoiceUpdateInput, InvoiceUncheckedUpdateInput>
    /**
     * Choose, which Invoice to update.
     */
    where: InvoiceWhereUniqueInput
  }

  /**
   * Invoice updateMany
   */
  export type InvoiceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Invoices.
     */
    data: XOR<InvoiceUpdateManyMutationInput, InvoiceUncheckedUpdateManyInput>
    /**
     * Filter which Invoices to update
     */
    where?: InvoiceWhereInput
    /**
     * Limit how many Invoices to update.
     */
    limit?: number
  }

  /**
   * Invoice updateManyAndReturn
   */
  export type InvoiceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * The data used to update Invoices.
     */
    data: XOR<InvoiceUpdateManyMutationInput, InvoiceUncheckedUpdateManyInput>
    /**
     * Filter which Invoices to update
     */
    where?: InvoiceWhereInput
    /**
     * Limit how many Invoices to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Invoice upsert
   */
  export type InvoiceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * The filter to search for the Invoice to update in case it exists.
     */
    where: InvoiceWhereUniqueInput
    /**
     * In case the Invoice found by the `where` argument doesn't exist, create a new Invoice with this data.
     */
    create: XOR<InvoiceCreateInput, InvoiceUncheckedCreateInput>
    /**
     * In case the Invoice was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InvoiceUpdateInput, InvoiceUncheckedUpdateInput>
  }

  /**
   * Invoice delete
   */
  export type InvoiceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * Filter which Invoice to delete.
     */
    where: InvoiceWhereUniqueInput
  }

  /**
   * Invoice deleteMany
   */
  export type InvoiceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Invoices to delete
     */
    where?: InvoiceWhereInput
    /**
     * Limit how many Invoices to delete.
     */
    limit?: number
  }

  /**
   * Invoice.transactions
   */
  export type Invoice$transactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    cursor?: TransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Invoice without action
   */
  export type InvoiceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
  }


  /**
   * Model Transaction
   */

  export type AggregateTransaction = {
    _count: TransactionCountAggregateOutputType | null
    _avg: TransactionAvgAggregateOutputType | null
    _sum: TransactionSumAggregateOutputType | null
    _min: TransactionMinAggregateOutputType | null
    _max: TransactionMaxAggregateOutputType | null
  }

  export type TransactionAvgAggregateOutputType = {
    amount: number | null
  }

  export type TransactionSumAggregateOutputType = {
    amount: number | null
  }

  export type TransactionMinAggregateOutputType = {
    id: string | null
    invoiceId: string | null
    organizationId: string | null
    amount: number | null
    currency: string | null
    gateway: string | null
    createdAt: Date | null
  }

  export type TransactionMaxAggregateOutputType = {
    id: string | null
    invoiceId: string | null
    organizationId: string | null
    amount: number | null
    currency: string | null
    gateway: string | null
    createdAt: Date | null
  }

  export type TransactionCountAggregateOutputType = {
    id: number
    invoiceId: number
    organizationId: number
    amount: number
    currency: number
    gateway: number
    gatewayPayload: number
    createdAt: number
    _all: number
  }


  export type TransactionAvgAggregateInputType = {
    amount?: true
  }

  export type TransactionSumAggregateInputType = {
    amount?: true
  }

  export type TransactionMinAggregateInputType = {
    id?: true
    invoiceId?: true
    organizationId?: true
    amount?: true
    currency?: true
    gateway?: true
    createdAt?: true
  }

  export type TransactionMaxAggregateInputType = {
    id?: true
    invoiceId?: true
    organizationId?: true
    amount?: true
    currency?: true
    gateway?: true
    createdAt?: true
  }

  export type TransactionCountAggregateInputType = {
    id?: true
    invoiceId?: true
    organizationId?: true
    amount?: true
    currency?: true
    gateway?: true
    gatewayPayload?: true
    createdAt?: true
    _all?: true
  }

  export type TransactionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transaction to aggregate.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Transactions
    **/
    _count?: true | TransactionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TransactionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TransactionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TransactionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TransactionMaxAggregateInputType
  }

  export type GetTransactionAggregateType<T extends TransactionAggregateArgs> = {
        [P in keyof T & keyof AggregateTransaction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTransaction[P]>
      : GetScalarType<T[P], AggregateTransaction[P]>
  }




  export type TransactionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithAggregationInput | TransactionOrderByWithAggregationInput[]
    by: TransactionScalarFieldEnum[] | TransactionScalarFieldEnum
    having?: TransactionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TransactionCountAggregateInputType | true
    _avg?: TransactionAvgAggregateInputType
    _sum?: TransactionSumAggregateInputType
    _min?: TransactionMinAggregateInputType
    _max?: TransactionMaxAggregateInputType
  }

  export type TransactionGroupByOutputType = {
    id: string
    invoiceId: string
    organizationId: string | null
    amount: number
    currency: string
    gateway: string
    gatewayPayload: JsonValue | null
    createdAt: Date
    _count: TransactionCountAggregateOutputType | null
    _avg: TransactionAvgAggregateOutputType | null
    _sum: TransactionSumAggregateOutputType | null
    _min: TransactionMinAggregateOutputType | null
    _max: TransactionMaxAggregateOutputType | null
  }

  type GetTransactionGroupByPayload<T extends TransactionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TransactionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TransactionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TransactionGroupByOutputType[P]>
            : GetScalarType<T[P], TransactionGroupByOutputType[P]>
        }
      >
    >


  export type TransactionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    invoiceId?: boolean
    organizationId?: boolean
    amount?: boolean
    currency?: boolean
    gateway?: boolean
    gatewayPayload?: boolean
    createdAt?: boolean
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
    organization?: boolean | Transaction$organizationArgs<ExtArgs>
  }, ExtArgs["result"]["transaction"]>

  export type TransactionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    invoiceId?: boolean
    organizationId?: boolean
    amount?: boolean
    currency?: boolean
    gateway?: boolean
    gatewayPayload?: boolean
    createdAt?: boolean
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
    organization?: boolean | Transaction$organizationArgs<ExtArgs>
  }, ExtArgs["result"]["transaction"]>

  export type TransactionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    invoiceId?: boolean
    organizationId?: boolean
    amount?: boolean
    currency?: boolean
    gateway?: boolean
    gatewayPayload?: boolean
    createdAt?: boolean
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
    organization?: boolean | Transaction$organizationArgs<ExtArgs>
  }, ExtArgs["result"]["transaction"]>

  export type TransactionSelectScalar = {
    id?: boolean
    invoiceId?: boolean
    organizationId?: boolean
    amount?: boolean
    currency?: boolean
    gateway?: boolean
    gatewayPayload?: boolean
    createdAt?: boolean
  }

  export type TransactionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "invoiceId" | "organizationId" | "amount" | "currency" | "gateway" | "gatewayPayload" | "createdAt", ExtArgs["result"]["transaction"]>
  export type TransactionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
    organization?: boolean | Transaction$organizationArgs<ExtArgs>
  }
  export type TransactionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
    organization?: boolean | Transaction$organizationArgs<ExtArgs>
  }
  export type TransactionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
    organization?: boolean | Transaction$organizationArgs<ExtArgs>
  }

  export type $TransactionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Transaction"
    objects: {
      invoice: Prisma.$InvoicePayload<ExtArgs>
      organization: Prisma.$OrganizationPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      invoiceId: string
      organizationId: string | null
      amount: number
      currency: string
      gateway: string
      gatewayPayload: Prisma.JsonValue | null
      createdAt: Date
    }, ExtArgs["result"]["transaction"]>
    composites: {}
  }

  type TransactionGetPayload<S extends boolean | null | undefined | TransactionDefaultArgs> = $Result.GetResult<Prisma.$TransactionPayload, S>

  type TransactionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TransactionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TransactionCountAggregateInputType | true
    }

  export interface TransactionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Transaction'], meta: { name: 'Transaction' } }
    /**
     * Find zero or one Transaction that matches the filter.
     * @param {TransactionFindUniqueArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TransactionFindUniqueArgs>(args: SelectSubset<T, TransactionFindUniqueArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Transaction that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TransactionFindUniqueOrThrowArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TransactionFindUniqueOrThrowArgs>(args: SelectSubset<T, TransactionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Transaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindFirstArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TransactionFindFirstArgs>(args?: SelectSubset<T, TransactionFindFirstArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Transaction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindFirstOrThrowArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TransactionFindFirstOrThrowArgs>(args?: SelectSubset<T, TransactionFindFirstOrThrowArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Transactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Transactions
     * const transactions = await prisma.transaction.findMany()
     * 
     * // Get first 10 Transactions
     * const transactions = await prisma.transaction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const transactionWithIdOnly = await prisma.transaction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TransactionFindManyArgs>(args?: SelectSubset<T, TransactionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Transaction.
     * @param {TransactionCreateArgs} args - Arguments to create a Transaction.
     * @example
     * // Create one Transaction
     * const Transaction = await prisma.transaction.create({
     *   data: {
     *     // ... data to create a Transaction
     *   }
     * })
     * 
     */
    create<T extends TransactionCreateArgs>(args: SelectSubset<T, TransactionCreateArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Transactions.
     * @param {TransactionCreateManyArgs} args - Arguments to create many Transactions.
     * @example
     * // Create many Transactions
     * const transaction = await prisma.transaction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TransactionCreateManyArgs>(args?: SelectSubset<T, TransactionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Transactions and returns the data saved in the database.
     * @param {TransactionCreateManyAndReturnArgs} args - Arguments to create many Transactions.
     * @example
     * // Create many Transactions
     * const transaction = await prisma.transaction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Transactions and only return the `id`
     * const transactionWithIdOnly = await prisma.transaction.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TransactionCreateManyAndReturnArgs>(args?: SelectSubset<T, TransactionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Transaction.
     * @param {TransactionDeleteArgs} args - Arguments to delete one Transaction.
     * @example
     * // Delete one Transaction
     * const Transaction = await prisma.transaction.delete({
     *   where: {
     *     // ... filter to delete one Transaction
     *   }
     * })
     * 
     */
    delete<T extends TransactionDeleteArgs>(args: SelectSubset<T, TransactionDeleteArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Transaction.
     * @param {TransactionUpdateArgs} args - Arguments to update one Transaction.
     * @example
     * // Update one Transaction
     * const transaction = await prisma.transaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TransactionUpdateArgs>(args: SelectSubset<T, TransactionUpdateArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Transactions.
     * @param {TransactionDeleteManyArgs} args - Arguments to filter Transactions to delete.
     * @example
     * // Delete a few Transactions
     * const { count } = await prisma.transaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TransactionDeleteManyArgs>(args?: SelectSubset<T, TransactionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Transactions
     * const transaction = await prisma.transaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TransactionUpdateManyArgs>(args: SelectSubset<T, TransactionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transactions and returns the data updated in the database.
     * @param {TransactionUpdateManyAndReturnArgs} args - Arguments to update many Transactions.
     * @example
     * // Update many Transactions
     * const transaction = await prisma.transaction.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Transactions and only return the `id`
     * const transactionWithIdOnly = await prisma.transaction.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TransactionUpdateManyAndReturnArgs>(args: SelectSubset<T, TransactionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Transaction.
     * @param {TransactionUpsertArgs} args - Arguments to update or create a Transaction.
     * @example
     * // Update or create a Transaction
     * const transaction = await prisma.transaction.upsert({
     *   create: {
     *     // ... data to create a Transaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Transaction we want to update
     *   }
     * })
     */
    upsert<T extends TransactionUpsertArgs>(args: SelectSubset<T, TransactionUpsertArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionCountArgs} args - Arguments to filter Transactions to count.
     * @example
     * // Count the number of Transactions
     * const count = await prisma.transaction.count({
     *   where: {
     *     // ... the filter for the Transactions we want to count
     *   }
     * })
    **/
    count<T extends TransactionCountArgs>(
      args?: Subset<T, TransactionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TransactionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Transaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TransactionAggregateArgs>(args: Subset<T, TransactionAggregateArgs>): Prisma.PrismaPromise<GetTransactionAggregateType<T>>

    /**
     * Group by Transaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TransactionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TransactionGroupByArgs['orderBy'] }
        : { orderBy?: TransactionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TransactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransactionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Transaction model
   */
  readonly fields: TransactionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Transaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TransactionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    invoice<T extends InvoiceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InvoiceDefaultArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    organization<T extends Transaction$organizationArgs<ExtArgs> = {}>(args?: Subset<T, Transaction$organizationArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Transaction model
   */
  interface TransactionFieldRefs {
    readonly id: FieldRef<"Transaction", 'String'>
    readonly invoiceId: FieldRef<"Transaction", 'String'>
    readonly organizationId: FieldRef<"Transaction", 'String'>
    readonly amount: FieldRef<"Transaction", 'Float'>
    readonly currency: FieldRef<"Transaction", 'String'>
    readonly gateway: FieldRef<"Transaction", 'String'>
    readonly gatewayPayload: FieldRef<"Transaction", 'Json'>
    readonly createdAt: FieldRef<"Transaction", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Transaction findUnique
   */
  export type TransactionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction findUniqueOrThrow
   */
  export type TransactionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction findFirst
   */
  export type TransactionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transactions.
     */
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Transaction findFirstOrThrow
   */
  export type TransactionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transactions.
     */
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Transaction findMany
   */
  export type TransactionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transactions to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Transaction create
   */
  export type TransactionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * The data needed to create a Transaction.
     */
    data: XOR<TransactionCreateInput, TransactionUncheckedCreateInput>
  }

  /**
   * Transaction createMany
   */
  export type TransactionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Transactions.
     */
    data: TransactionCreateManyInput | TransactionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Transaction createManyAndReturn
   */
  export type TransactionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * The data used to create many Transactions.
     */
    data: TransactionCreateManyInput | TransactionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Transaction update
   */
  export type TransactionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * The data needed to update a Transaction.
     */
    data: XOR<TransactionUpdateInput, TransactionUncheckedUpdateInput>
    /**
     * Choose, which Transaction to update.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction updateMany
   */
  export type TransactionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Transactions.
     */
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyInput>
    /**
     * Filter which Transactions to update
     */
    where?: TransactionWhereInput
    /**
     * Limit how many Transactions to update.
     */
    limit?: number
  }

  /**
   * Transaction updateManyAndReturn
   */
  export type TransactionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * The data used to update Transactions.
     */
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyInput>
    /**
     * Filter which Transactions to update
     */
    where?: TransactionWhereInput
    /**
     * Limit how many Transactions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Transaction upsert
   */
  export type TransactionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * The filter to search for the Transaction to update in case it exists.
     */
    where: TransactionWhereUniqueInput
    /**
     * In case the Transaction found by the `where` argument doesn't exist, create a new Transaction with this data.
     */
    create: XOR<TransactionCreateInput, TransactionUncheckedCreateInput>
    /**
     * In case the Transaction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TransactionUpdateInput, TransactionUncheckedUpdateInput>
  }

  /**
   * Transaction delete
   */
  export type TransactionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter which Transaction to delete.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction deleteMany
   */
  export type TransactionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transactions to delete
     */
    where?: TransactionWhereInput
    /**
     * Limit how many Transactions to delete.
     */
    limit?: number
  }

  /**
   * Transaction.organization
   */
  export type Transaction$organizationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    where?: OrganizationWhereInput
  }

  /**
   * Transaction without action
   */
  export type TransactionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
  }


  /**
   * Model Subscription
   */

  export type AggregateSubscription = {
    _count: SubscriptionCountAggregateOutputType | null
    _min: SubscriptionMinAggregateOutputType | null
    _max: SubscriptionMaxAggregateOutputType | null
  }

  export type SubscriptionMinAggregateOutputType = {
    id: string | null
    organizationId: string | null
    clientId: string | null
    status: string | null
    priceId: string | null
    subscriptionId: string | null
    currentPeriodEnd: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SubscriptionMaxAggregateOutputType = {
    id: string | null
    organizationId: string | null
    clientId: string | null
    status: string | null
    priceId: string | null
    subscriptionId: string | null
    currentPeriodEnd: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SubscriptionCountAggregateOutputType = {
    id: number
    organizationId: number
    clientId: number
    status: number
    priceId: number
    subscriptionId: number
    currentPeriodEnd: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SubscriptionMinAggregateInputType = {
    id?: true
    organizationId?: true
    clientId?: true
    status?: true
    priceId?: true
    subscriptionId?: true
    currentPeriodEnd?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SubscriptionMaxAggregateInputType = {
    id?: true
    organizationId?: true
    clientId?: true
    status?: true
    priceId?: true
    subscriptionId?: true
    currentPeriodEnd?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SubscriptionCountAggregateInputType = {
    id?: true
    organizationId?: true
    clientId?: true
    status?: true
    priceId?: true
    subscriptionId?: true
    currentPeriodEnd?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SubscriptionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subscription to aggregate.
     */
    where?: SubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subscriptions to fetch.
     */
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Subscriptions
    **/
    _count?: true | SubscriptionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubscriptionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubscriptionMaxAggregateInputType
  }

  export type GetSubscriptionAggregateType<T extends SubscriptionAggregateArgs> = {
        [P in keyof T & keyof AggregateSubscription]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubscription[P]>
      : GetScalarType<T[P], AggregateSubscription[P]>
  }




  export type SubscriptionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubscriptionWhereInput
    orderBy?: SubscriptionOrderByWithAggregationInput | SubscriptionOrderByWithAggregationInput[]
    by: SubscriptionScalarFieldEnum[] | SubscriptionScalarFieldEnum
    having?: SubscriptionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubscriptionCountAggregateInputType | true
    _min?: SubscriptionMinAggregateInputType
    _max?: SubscriptionMaxAggregateInputType
  }

  export type SubscriptionGroupByOutputType = {
    id: string
    organizationId: string
    clientId: string | null
    status: string
    priceId: string | null
    subscriptionId: string | null
    currentPeriodEnd: Date | null
    createdAt: Date
    updatedAt: Date
    _count: SubscriptionCountAggregateOutputType | null
    _min: SubscriptionMinAggregateOutputType | null
    _max: SubscriptionMaxAggregateOutputType | null
  }

  type GetSubscriptionGroupByPayload<T extends SubscriptionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubscriptionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubscriptionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubscriptionGroupByOutputType[P]>
            : GetScalarType<T[P], SubscriptionGroupByOutputType[P]>
        }
      >
    >


  export type SubscriptionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    clientId?: boolean
    status?: boolean
    priceId?: boolean
    subscriptionId?: boolean
    currentPeriodEnd?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    client?: boolean | Subscription$clientArgs<ExtArgs>
  }, ExtArgs["result"]["subscription"]>

  export type SubscriptionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    clientId?: boolean
    status?: boolean
    priceId?: boolean
    subscriptionId?: boolean
    currentPeriodEnd?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    client?: boolean | Subscription$clientArgs<ExtArgs>
  }, ExtArgs["result"]["subscription"]>

  export type SubscriptionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    clientId?: boolean
    status?: boolean
    priceId?: boolean
    subscriptionId?: boolean
    currentPeriodEnd?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    client?: boolean | Subscription$clientArgs<ExtArgs>
  }, ExtArgs["result"]["subscription"]>

  export type SubscriptionSelectScalar = {
    id?: boolean
    organizationId?: boolean
    clientId?: boolean
    status?: boolean
    priceId?: boolean
    subscriptionId?: boolean
    currentPeriodEnd?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SubscriptionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "organizationId" | "clientId" | "status" | "priceId" | "subscriptionId" | "currentPeriodEnd" | "createdAt" | "updatedAt", ExtArgs["result"]["subscription"]>
  export type SubscriptionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    client?: boolean | Subscription$clientArgs<ExtArgs>
  }
  export type SubscriptionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    client?: boolean | Subscription$clientArgs<ExtArgs>
  }
  export type SubscriptionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    client?: boolean | Subscription$clientArgs<ExtArgs>
  }

  export type $SubscriptionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Subscription"
    objects: {
      organization: Prisma.$OrganizationPayload<ExtArgs>
      client: Prisma.$ClientPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      organizationId: string
      clientId: string | null
      status: string
      priceId: string | null
      subscriptionId: string | null
      currentPeriodEnd: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["subscription"]>
    composites: {}
  }

  type SubscriptionGetPayload<S extends boolean | null | undefined | SubscriptionDefaultArgs> = $Result.GetResult<Prisma.$SubscriptionPayload, S>

  type SubscriptionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SubscriptionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SubscriptionCountAggregateInputType | true
    }

  export interface SubscriptionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Subscription'], meta: { name: 'Subscription' } }
    /**
     * Find zero or one Subscription that matches the filter.
     * @param {SubscriptionFindUniqueArgs} args - Arguments to find a Subscription
     * @example
     * // Get one Subscription
     * const subscription = await prisma.subscription.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SubscriptionFindUniqueArgs>(args: SelectSubset<T, SubscriptionFindUniqueArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Subscription that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SubscriptionFindUniqueOrThrowArgs} args - Arguments to find a Subscription
     * @example
     * // Get one Subscription
     * const subscription = await prisma.subscription.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SubscriptionFindUniqueOrThrowArgs>(args: SelectSubset<T, SubscriptionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Subscription that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionFindFirstArgs} args - Arguments to find a Subscription
     * @example
     * // Get one Subscription
     * const subscription = await prisma.subscription.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SubscriptionFindFirstArgs>(args?: SelectSubset<T, SubscriptionFindFirstArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Subscription that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionFindFirstOrThrowArgs} args - Arguments to find a Subscription
     * @example
     * // Get one Subscription
     * const subscription = await prisma.subscription.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SubscriptionFindFirstOrThrowArgs>(args?: SelectSubset<T, SubscriptionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Subscriptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Subscriptions
     * const subscriptions = await prisma.subscription.findMany()
     * 
     * // Get first 10 Subscriptions
     * const subscriptions = await prisma.subscription.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const subscriptionWithIdOnly = await prisma.subscription.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SubscriptionFindManyArgs>(args?: SelectSubset<T, SubscriptionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Subscription.
     * @param {SubscriptionCreateArgs} args - Arguments to create a Subscription.
     * @example
     * // Create one Subscription
     * const Subscription = await prisma.subscription.create({
     *   data: {
     *     // ... data to create a Subscription
     *   }
     * })
     * 
     */
    create<T extends SubscriptionCreateArgs>(args: SelectSubset<T, SubscriptionCreateArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Subscriptions.
     * @param {SubscriptionCreateManyArgs} args - Arguments to create many Subscriptions.
     * @example
     * // Create many Subscriptions
     * const subscription = await prisma.subscription.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SubscriptionCreateManyArgs>(args?: SelectSubset<T, SubscriptionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Subscriptions and returns the data saved in the database.
     * @param {SubscriptionCreateManyAndReturnArgs} args - Arguments to create many Subscriptions.
     * @example
     * // Create many Subscriptions
     * const subscription = await prisma.subscription.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Subscriptions and only return the `id`
     * const subscriptionWithIdOnly = await prisma.subscription.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SubscriptionCreateManyAndReturnArgs>(args?: SelectSubset<T, SubscriptionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Subscription.
     * @param {SubscriptionDeleteArgs} args - Arguments to delete one Subscription.
     * @example
     * // Delete one Subscription
     * const Subscription = await prisma.subscription.delete({
     *   where: {
     *     // ... filter to delete one Subscription
     *   }
     * })
     * 
     */
    delete<T extends SubscriptionDeleteArgs>(args: SelectSubset<T, SubscriptionDeleteArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Subscription.
     * @param {SubscriptionUpdateArgs} args - Arguments to update one Subscription.
     * @example
     * // Update one Subscription
     * const subscription = await prisma.subscription.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SubscriptionUpdateArgs>(args: SelectSubset<T, SubscriptionUpdateArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Subscriptions.
     * @param {SubscriptionDeleteManyArgs} args - Arguments to filter Subscriptions to delete.
     * @example
     * // Delete a few Subscriptions
     * const { count } = await prisma.subscription.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SubscriptionDeleteManyArgs>(args?: SelectSubset<T, SubscriptionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Subscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Subscriptions
     * const subscription = await prisma.subscription.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SubscriptionUpdateManyArgs>(args: SelectSubset<T, SubscriptionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Subscriptions and returns the data updated in the database.
     * @param {SubscriptionUpdateManyAndReturnArgs} args - Arguments to update many Subscriptions.
     * @example
     * // Update many Subscriptions
     * const subscription = await prisma.subscription.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Subscriptions and only return the `id`
     * const subscriptionWithIdOnly = await prisma.subscription.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SubscriptionUpdateManyAndReturnArgs>(args: SelectSubset<T, SubscriptionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Subscription.
     * @param {SubscriptionUpsertArgs} args - Arguments to update or create a Subscription.
     * @example
     * // Update or create a Subscription
     * const subscription = await prisma.subscription.upsert({
     *   create: {
     *     // ... data to create a Subscription
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Subscription we want to update
     *   }
     * })
     */
    upsert<T extends SubscriptionUpsertArgs>(args: SelectSubset<T, SubscriptionUpsertArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Subscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionCountArgs} args - Arguments to filter Subscriptions to count.
     * @example
     * // Count the number of Subscriptions
     * const count = await prisma.subscription.count({
     *   where: {
     *     // ... the filter for the Subscriptions we want to count
     *   }
     * })
    **/
    count<T extends SubscriptionCountArgs>(
      args?: Subset<T, SubscriptionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubscriptionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Subscription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubscriptionAggregateArgs>(args: Subset<T, SubscriptionAggregateArgs>): Prisma.PrismaPromise<GetSubscriptionAggregateType<T>>

    /**
     * Group by Subscription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubscriptionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubscriptionGroupByArgs['orderBy'] }
        : { orderBy?: SubscriptionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubscriptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubscriptionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Subscription model
   */
  readonly fields: SubscriptionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Subscription.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubscriptionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    client<T extends Subscription$clientArgs<ExtArgs> = {}>(args?: Subset<T, Subscription$clientArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Subscription model
   */
  interface SubscriptionFieldRefs {
    readonly id: FieldRef<"Subscription", 'String'>
    readonly organizationId: FieldRef<"Subscription", 'String'>
    readonly clientId: FieldRef<"Subscription", 'String'>
    readonly status: FieldRef<"Subscription", 'String'>
    readonly priceId: FieldRef<"Subscription", 'String'>
    readonly subscriptionId: FieldRef<"Subscription", 'String'>
    readonly currentPeriodEnd: FieldRef<"Subscription", 'DateTime'>
    readonly createdAt: FieldRef<"Subscription", 'DateTime'>
    readonly updatedAt: FieldRef<"Subscription", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Subscription findUnique
   */
  export type SubscriptionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscription to fetch.
     */
    where: SubscriptionWhereUniqueInput
  }

  /**
   * Subscription findUniqueOrThrow
   */
  export type SubscriptionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscription to fetch.
     */
    where: SubscriptionWhereUniqueInput
  }

  /**
   * Subscription findFirst
   */
  export type SubscriptionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscription to fetch.
     */
    where?: SubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subscriptions to fetch.
     */
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subscriptions.
     */
    cursor?: SubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subscriptions.
     */
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }

  /**
   * Subscription findFirstOrThrow
   */
  export type SubscriptionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscription to fetch.
     */
    where?: SubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subscriptions to fetch.
     */
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subscriptions.
     */
    cursor?: SubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subscriptions.
     */
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }

  /**
   * Subscription findMany
   */
  export type SubscriptionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscriptions to fetch.
     */
    where?: SubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subscriptions to fetch.
     */
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Subscriptions.
     */
    cursor?: SubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subscriptions.
     */
    skip?: number
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }

  /**
   * Subscription create
   */
  export type SubscriptionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * The data needed to create a Subscription.
     */
    data: XOR<SubscriptionCreateInput, SubscriptionUncheckedCreateInput>
  }

  /**
   * Subscription createMany
   */
  export type SubscriptionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Subscriptions.
     */
    data: SubscriptionCreateManyInput | SubscriptionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Subscription createManyAndReturn
   */
  export type SubscriptionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * The data used to create many Subscriptions.
     */
    data: SubscriptionCreateManyInput | SubscriptionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Subscription update
   */
  export type SubscriptionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * The data needed to update a Subscription.
     */
    data: XOR<SubscriptionUpdateInput, SubscriptionUncheckedUpdateInput>
    /**
     * Choose, which Subscription to update.
     */
    where: SubscriptionWhereUniqueInput
  }

  /**
   * Subscription updateMany
   */
  export type SubscriptionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Subscriptions.
     */
    data: XOR<SubscriptionUpdateManyMutationInput, SubscriptionUncheckedUpdateManyInput>
    /**
     * Filter which Subscriptions to update
     */
    where?: SubscriptionWhereInput
    /**
     * Limit how many Subscriptions to update.
     */
    limit?: number
  }

  /**
   * Subscription updateManyAndReturn
   */
  export type SubscriptionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * The data used to update Subscriptions.
     */
    data: XOR<SubscriptionUpdateManyMutationInput, SubscriptionUncheckedUpdateManyInput>
    /**
     * Filter which Subscriptions to update
     */
    where?: SubscriptionWhereInput
    /**
     * Limit how many Subscriptions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Subscription upsert
   */
  export type SubscriptionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * The filter to search for the Subscription to update in case it exists.
     */
    where: SubscriptionWhereUniqueInput
    /**
     * In case the Subscription found by the `where` argument doesn't exist, create a new Subscription with this data.
     */
    create: XOR<SubscriptionCreateInput, SubscriptionUncheckedCreateInput>
    /**
     * In case the Subscription was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubscriptionUpdateInput, SubscriptionUncheckedUpdateInput>
  }

  /**
   * Subscription delete
   */
  export type SubscriptionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter which Subscription to delete.
     */
    where: SubscriptionWhereUniqueInput
  }

  /**
   * Subscription deleteMany
   */
  export type SubscriptionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subscriptions to delete
     */
    where?: SubscriptionWhereInput
    /**
     * Limit how many Subscriptions to delete.
     */
    limit?: number
  }

  /**
   * Subscription.client
   */
  export type Subscription$clientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    where?: ClientWhereInput
  }

  /**
   * Subscription without action
   */
  export type SubscriptionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
  }


  /**
   * Model CalendarEvent
   */

  export type AggregateCalendarEvent = {
    _count: CalendarEventCountAggregateOutputType | null
    _avg: CalendarEventAvgAggregateOutputType | null
    _sum: CalendarEventSumAggregateOutputType | null
    _min: CalendarEventMinAggregateOutputType | null
    _max: CalendarEventMaxAggregateOutputType | null
  }

  export type CalendarEventAvgAggregateOutputType = {
    reminders: number | null
  }

  export type CalendarEventSumAggregateOutputType = {
    reminders: number[]
  }

  export type CalendarEventMinAggregateOutputType = {
    id: string | null
    organizationId: string | null
    title: string | null
    start: Date | null
    end: Date | null
    level: string | null
    description: string | null
    createdById: string | null
    createdAt: Date | null
    type: $Enums.CalendarItemType | null
    allDay: boolean | null
    location: string | null
    completed: boolean | null
    seriesId: string | null
  }

  export type CalendarEventMaxAggregateOutputType = {
    id: string | null
    organizationId: string | null
    title: string | null
    start: Date | null
    end: Date | null
    level: string | null
    description: string | null
    createdById: string | null
    createdAt: Date | null
    type: $Enums.CalendarItemType | null
    allDay: boolean | null
    location: string | null
    completed: boolean | null
    seriesId: string | null
  }

  export type CalendarEventCountAggregateOutputType = {
    id: number
    organizationId: number
    title: number
    start: number
    end: number
    level: number
    description: number
    createdById: number
    createdAt: number
    type: number
    allDay: number
    location: number
    reminders: number
    completed: number
    seriesId: number
    metadata: number
    _all: number
  }


  export type CalendarEventAvgAggregateInputType = {
    reminders?: true
  }

  export type CalendarEventSumAggregateInputType = {
    reminders?: true
  }

  export type CalendarEventMinAggregateInputType = {
    id?: true
    organizationId?: true
    title?: true
    start?: true
    end?: true
    level?: true
    description?: true
    createdById?: true
    createdAt?: true
    type?: true
    allDay?: true
    location?: true
    completed?: true
    seriesId?: true
  }

  export type CalendarEventMaxAggregateInputType = {
    id?: true
    organizationId?: true
    title?: true
    start?: true
    end?: true
    level?: true
    description?: true
    createdById?: true
    createdAt?: true
    type?: true
    allDay?: true
    location?: true
    completed?: true
    seriesId?: true
  }

  export type CalendarEventCountAggregateInputType = {
    id?: true
    organizationId?: true
    title?: true
    start?: true
    end?: true
    level?: true
    description?: true
    createdById?: true
    createdAt?: true
    type?: true
    allDay?: true
    location?: true
    reminders?: true
    completed?: true
    seriesId?: true
    metadata?: true
    _all?: true
  }

  export type CalendarEventAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CalendarEvent to aggregate.
     */
    where?: CalendarEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CalendarEvents to fetch.
     */
    orderBy?: CalendarEventOrderByWithRelationInput | CalendarEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CalendarEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CalendarEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CalendarEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CalendarEvents
    **/
    _count?: true | CalendarEventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CalendarEventAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CalendarEventSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CalendarEventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CalendarEventMaxAggregateInputType
  }

  export type GetCalendarEventAggregateType<T extends CalendarEventAggregateArgs> = {
        [P in keyof T & keyof AggregateCalendarEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCalendarEvent[P]>
      : GetScalarType<T[P], AggregateCalendarEvent[P]>
  }




  export type CalendarEventGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CalendarEventWhereInput
    orderBy?: CalendarEventOrderByWithAggregationInput | CalendarEventOrderByWithAggregationInput[]
    by: CalendarEventScalarFieldEnum[] | CalendarEventScalarFieldEnum
    having?: CalendarEventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CalendarEventCountAggregateInputType | true
    _avg?: CalendarEventAvgAggregateInputType
    _sum?: CalendarEventSumAggregateInputType
    _min?: CalendarEventMinAggregateInputType
    _max?: CalendarEventMaxAggregateInputType
  }

  export type CalendarEventGroupByOutputType = {
    id: string
    organizationId: string
    title: string
    start: Date
    end: Date | null
    level: string | null
    description: string | null
    createdById: string | null
    createdAt: Date
    type: $Enums.CalendarItemType
    allDay: boolean
    location: string | null
    reminders: number[]
    completed: boolean
    seriesId: string | null
    metadata: JsonValue | null
    _count: CalendarEventCountAggregateOutputType | null
    _avg: CalendarEventAvgAggregateOutputType | null
    _sum: CalendarEventSumAggregateOutputType | null
    _min: CalendarEventMinAggregateOutputType | null
    _max: CalendarEventMaxAggregateOutputType | null
  }

  type GetCalendarEventGroupByPayload<T extends CalendarEventGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CalendarEventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CalendarEventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CalendarEventGroupByOutputType[P]>
            : GetScalarType<T[P], CalendarEventGroupByOutputType[P]>
        }
      >
    >


  export type CalendarEventSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    title?: boolean
    start?: boolean
    end?: boolean
    level?: boolean
    description?: boolean
    createdById?: boolean
    createdAt?: boolean
    type?: boolean
    allDay?: boolean
    location?: boolean
    reminders?: boolean
    completed?: boolean
    seriesId?: boolean
    metadata?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    createdBy?: boolean | CalendarEvent$createdByArgs<ExtArgs>
  }, ExtArgs["result"]["calendarEvent"]>

  export type CalendarEventSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    title?: boolean
    start?: boolean
    end?: boolean
    level?: boolean
    description?: boolean
    createdById?: boolean
    createdAt?: boolean
    type?: boolean
    allDay?: boolean
    location?: boolean
    reminders?: boolean
    completed?: boolean
    seriesId?: boolean
    metadata?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    createdBy?: boolean | CalendarEvent$createdByArgs<ExtArgs>
  }, ExtArgs["result"]["calendarEvent"]>

  export type CalendarEventSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    title?: boolean
    start?: boolean
    end?: boolean
    level?: boolean
    description?: boolean
    createdById?: boolean
    createdAt?: boolean
    type?: boolean
    allDay?: boolean
    location?: boolean
    reminders?: boolean
    completed?: boolean
    seriesId?: boolean
    metadata?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    createdBy?: boolean | CalendarEvent$createdByArgs<ExtArgs>
  }, ExtArgs["result"]["calendarEvent"]>

  export type CalendarEventSelectScalar = {
    id?: boolean
    organizationId?: boolean
    title?: boolean
    start?: boolean
    end?: boolean
    level?: boolean
    description?: boolean
    createdById?: boolean
    createdAt?: boolean
    type?: boolean
    allDay?: boolean
    location?: boolean
    reminders?: boolean
    completed?: boolean
    seriesId?: boolean
    metadata?: boolean
  }

  export type CalendarEventOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "organizationId" | "title" | "start" | "end" | "level" | "description" | "createdById" | "createdAt" | "type" | "allDay" | "location" | "reminders" | "completed" | "seriesId" | "metadata", ExtArgs["result"]["calendarEvent"]>
  export type CalendarEventInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    createdBy?: boolean | CalendarEvent$createdByArgs<ExtArgs>
  }
  export type CalendarEventIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    createdBy?: boolean | CalendarEvent$createdByArgs<ExtArgs>
  }
  export type CalendarEventIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    createdBy?: boolean | CalendarEvent$createdByArgs<ExtArgs>
  }

  export type $CalendarEventPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CalendarEvent"
    objects: {
      organization: Prisma.$OrganizationPayload<ExtArgs>
      createdBy: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      organizationId: string
      title: string
      start: Date
      end: Date | null
      level: string | null
      description: string | null
      createdById: string | null
      createdAt: Date
      type: $Enums.CalendarItemType
      allDay: boolean
      location: string | null
      reminders: number[]
      completed: boolean
      seriesId: string | null
      metadata: Prisma.JsonValue | null
    }, ExtArgs["result"]["calendarEvent"]>
    composites: {}
  }

  type CalendarEventGetPayload<S extends boolean | null | undefined | CalendarEventDefaultArgs> = $Result.GetResult<Prisma.$CalendarEventPayload, S>

  type CalendarEventCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CalendarEventFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CalendarEventCountAggregateInputType | true
    }

  export interface CalendarEventDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CalendarEvent'], meta: { name: 'CalendarEvent' } }
    /**
     * Find zero or one CalendarEvent that matches the filter.
     * @param {CalendarEventFindUniqueArgs} args - Arguments to find a CalendarEvent
     * @example
     * // Get one CalendarEvent
     * const calendarEvent = await prisma.calendarEvent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CalendarEventFindUniqueArgs>(args: SelectSubset<T, CalendarEventFindUniqueArgs<ExtArgs>>): Prisma__CalendarEventClient<$Result.GetResult<Prisma.$CalendarEventPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CalendarEvent that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CalendarEventFindUniqueOrThrowArgs} args - Arguments to find a CalendarEvent
     * @example
     * // Get one CalendarEvent
     * const calendarEvent = await prisma.calendarEvent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CalendarEventFindUniqueOrThrowArgs>(args: SelectSubset<T, CalendarEventFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CalendarEventClient<$Result.GetResult<Prisma.$CalendarEventPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CalendarEvent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalendarEventFindFirstArgs} args - Arguments to find a CalendarEvent
     * @example
     * // Get one CalendarEvent
     * const calendarEvent = await prisma.calendarEvent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CalendarEventFindFirstArgs>(args?: SelectSubset<T, CalendarEventFindFirstArgs<ExtArgs>>): Prisma__CalendarEventClient<$Result.GetResult<Prisma.$CalendarEventPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CalendarEvent that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalendarEventFindFirstOrThrowArgs} args - Arguments to find a CalendarEvent
     * @example
     * // Get one CalendarEvent
     * const calendarEvent = await prisma.calendarEvent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CalendarEventFindFirstOrThrowArgs>(args?: SelectSubset<T, CalendarEventFindFirstOrThrowArgs<ExtArgs>>): Prisma__CalendarEventClient<$Result.GetResult<Prisma.$CalendarEventPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CalendarEvents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalendarEventFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CalendarEvents
     * const calendarEvents = await prisma.calendarEvent.findMany()
     * 
     * // Get first 10 CalendarEvents
     * const calendarEvents = await prisma.calendarEvent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const calendarEventWithIdOnly = await prisma.calendarEvent.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CalendarEventFindManyArgs>(args?: SelectSubset<T, CalendarEventFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CalendarEventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CalendarEvent.
     * @param {CalendarEventCreateArgs} args - Arguments to create a CalendarEvent.
     * @example
     * // Create one CalendarEvent
     * const CalendarEvent = await prisma.calendarEvent.create({
     *   data: {
     *     // ... data to create a CalendarEvent
     *   }
     * })
     * 
     */
    create<T extends CalendarEventCreateArgs>(args: SelectSubset<T, CalendarEventCreateArgs<ExtArgs>>): Prisma__CalendarEventClient<$Result.GetResult<Prisma.$CalendarEventPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CalendarEvents.
     * @param {CalendarEventCreateManyArgs} args - Arguments to create many CalendarEvents.
     * @example
     * // Create many CalendarEvents
     * const calendarEvent = await prisma.calendarEvent.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CalendarEventCreateManyArgs>(args?: SelectSubset<T, CalendarEventCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CalendarEvents and returns the data saved in the database.
     * @param {CalendarEventCreateManyAndReturnArgs} args - Arguments to create many CalendarEvents.
     * @example
     * // Create many CalendarEvents
     * const calendarEvent = await prisma.calendarEvent.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CalendarEvents and only return the `id`
     * const calendarEventWithIdOnly = await prisma.calendarEvent.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CalendarEventCreateManyAndReturnArgs>(args?: SelectSubset<T, CalendarEventCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CalendarEventPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CalendarEvent.
     * @param {CalendarEventDeleteArgs} args - Arguments to delete one CalendarEvent.
     * @example
     * // Delete one CalendarEvent
     * const CalendarEvent = await prisma.calendarEvent.delete({
     *   where: {
     *     // ... filter to delete one CalendarEvent
     *   }
     * })
     * 
     */
    delete<T extends CalendarEventDeleteArgs>(args: SelectSubset<T, CalendarEventDeleteArgs<ExtArgs>>): Prisma__CalendarEventClient<$Result.GetResult<Prisma.$CalendarEventPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CalendarEvent.
     * @param {CalendarEventUpdateArgs} args - Arguments to update one CalendarEvent.
     * @example
     * // Update one CalendarEvent
     * const calendarEvent = await prisma.calendarEvent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CalendarEventUpdateArgs>(args: SelectSubset<T, CalendarEventUpdateArgs<ExtArgs>>): Prisma__CalendarEventClient<$Result.GetResult<Prisma.$CalendarEventPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CalendarEvents.
     * @param {CalendarEventDeleteManyArgs} args - Arguments to filter CalendarEvents to delete.
     * @example
     * // Delete a few CalendarEvents
     * const { count } = await prisma.calendarEvent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CalendarEventDeleteManyArgs>(args?: SelectSubset<T, CalendarEventDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CalendarEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalendarEventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CalendarEvents
     * const calendarEvent = await prisma.calendarEvent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CalendarEventUpdateManyArgs>(args: SelectSubset<T, CalendarEventUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CalendarEvents and returns the data updated in the database.
     * @param {CalendarEventUpdateManyAndReturnArgs} args - Arguments to update many CalendarEvents.
     * @example
     * // Update many CalendarEvents
     * const calendarEvent = await prisma.calendarEvent.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CalendarEvents and only return the `id`
     * const calendarEventWithIdOnly = await prisma.calendarEvent.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CalendarEventUpdateManyAndReturnArgs>(args: SelectSubset<T, CalendarEventUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CalendarEventPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CalendarEvent.
     * @param {CalendarEventUpsertArgs} args - Arguments to update or create a CalendarEvent.
     * @example
     * // Update or create a CalendarEvent
     * const calendarEvent = await prisma.calendarEvent.upsert({
     *   create: {
     *     // ... data to create a CalendarEvent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CalendarEvent we want to update
     *   }
     * })
     */
    upsert<T extends CalendarEventUpsertArgs>(args: SelectSubset<T, CalendarEventUpsertArgs<ExtArgs>>): Prisma__CalendarEventClient<$Result.GetResult<Prisma.$CalendarEventPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CalendarEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalendarEventCountArgs} args - Arguments to filter CalendarEvents to count.
     * @example
     * // Count the number of CalendarEvents
     * const count = await prisma.calendarEvent.count({
     *   where: {
     *     // ... the filter for the CalendarEvents we want to count
     *   }
     * })
    **/
    count<T extends CalendarEventCountArgs>(
      args?: Subset<T, CalendarEventCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CalendarEventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CalendarEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalendarEventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CalendarEventAggregateArgs>(args: Subset<T, CalendarEventAggregateArgs>): Prisma.PrismaPromise<GetCalendarEventAggregateType<T>>

    /**
     * Group by CalendarEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalendarEventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CalendarEventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CalendarEventGroupByArgs['orderBy'] }
        : { orderBy?: CalendarEventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CalendarEventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCalendarEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CalendarEvent model
   */
  readonly fields: CalendarEventFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CalendarEvent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CalendarEventClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    createdBy<T extends CalendarEvent$createdByArgs<ExtArgs> = {}>(args?: Subset<T, CalendarEvent$createdByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CalendarEvent model
   */
  interface CalendarEventFieldRefs {
    readonly id: FieldRef<"CalendarEvent", 'String'>
    readonly organizationId: FieldRef<"CalendarEvent", 'String'>
    readonly title: FieldRef<"CalendarEvent", 'String'>
    readonly start: FieldRef<"CalendarEvent", 'DateTime'>
    readonly end: FieldRef<"CalendarEvent", 'DateTime'>
    readonly level: FieldRef<"CalendarEvent", 'String'>
    readonly description: FieldRef<"CalendarEvent", 'String'>
    readonly createdById: FieldRef<"CalendarEvent", 'String'>
    readonly createdAt: FieldRef<"CalendarEvent", 'DateTime'>
    readonly type: FieldRef<"CalendarEvent", 'CalendarItemType'>
    readonly allDay: FieldRef<"CalendarEvent", 'Boolean'>
    readonly location: FieldRef<"CalendarEvent", 'String'>
    readonly reminders: FieldRef<"CalendarEvent", 'Int[]'>
    readonly completed: FieldRef<"CalendarEvent", 'Boolean'>
    readonly seriesId: FieldRef<"CalendarEvent", 'String'>
    readonly metadata: FieldRef<"CalendarEvent", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * CalendarEvent findUnique
   */
  export type CalendarEventFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalendarEvent
     */
    select?: CalendarEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalendarEvent
     */
    omit?: CalendarEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalendarEventInclude<ExtArgs> | null
    /**
     * Filter, which CalendarEvent to fetch.
     */
    where: CalendarEventWhereUniqueInput
  }

  /**
   * CalendarEvent findUniqueOrThrow
   */
  export type CalendarEventFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalendarEvent
     */
    select?: CalendarEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalendarEvent
     */
    omit?: CalendarEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalendarEventInclude<ExtArgs> | null
    /**
     * Filter, which CalendarEvent to fetch.
     */
    where: CalendarEventWhereUniqueInput
  }

  /**
   * CalendarEvent findFirst
   */
  export type CalendarEventFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalendarEvent
     */
    select?: CalendarEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalendarEvent
     */
    omit?: CalendarEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalendarEventInclude<ExtArgs> | null
    /**
     * Filter, which CalendarEvent to fetch.
     */
    where?: CalendarEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CalendarEvents to fetch.
     */
    orderBy?: CalendarEventOrderByWithRelationInput | CalendarEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CalendarEvents.
     */
    cursor?: CalendarEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CalendarEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CalendarEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CalendarEvents.
     */
    distinct?: CalendarEventScalarFieldEnum | CalendarEventScalarFieldEnum[]
  }

  /**
   * CalendarEvent findFirstOrThrow
   */
  export type CalendarEventFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalendarEvent
     */
    select?: CalendarEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalendarEvent
     */
    omit?: CalendarEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalendarEventInclude<ExtArgs> | null
    /**
     * Filter, which CalendarEvent to fetch.
     */
    where?: CalendarEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CalendarEvents to fetch.
     */
    orderBy?: CalendarEventOrderByWithRelationInput | CalendarEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CalendarEvents.
     */
    cursor?: CalendarEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CalendarEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CalendarEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CalendarEvents.
     */
    distinct?: CalendarEventScalarFieldEnum | CalendarEventScalarFieldEnum[]
  }

  /**
   * CalendarEvent findMany
   */
  export type CalendarEventFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalendarEvent
     */
    select?: CalendarEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalendarEvent
     */
    omit?: CalendarEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalendarEventInclude<ExtArgs> | null
    /**
     * Filter, which CalendarEvents to fetch.
     */
    where?: CalendarEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CalendarEvents to fetch.
     */
    orderBy?: CalendarEventOrderByWithRelationInput | CalendarEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CalendarEvents.
     */
    cursor?: CalendarEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CalendarEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CalendarEvents.
     */
    skip?: number
    distinct?: CalendarEventScalarFieldEnum | CalendarEventScalarFieldEnum[]
  }

  /**
   * CalendarEvent create
   */
  export type CalendarEventCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalendarEvent
     */
    select?: CalendarEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalendarEvent
     */
    omit?: CalendarEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalendarEventInclude<ExtArgs> | null
    /**
     * The data needed to create a CalendarEvent.
     */
    data: XOR<CalendarEventCreateInput, CalendarEventUncheckedCreateInput>
  }

  /**
   * CalendarEvent createMany
   */
  export type CalendarEventCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CalendarEvents.
     */
    data: CalendarEventCreateManyInput | CalendarEventCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CalendarEvent createManyAndReturn
   */
  export type CalendarEventCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalendarEvent
     */
    select?: CalendarEventSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CalendarEvent
     */
    omit?: CalendarEventOmit<ExtArgs> | null
    /**
     * The data used to create many CalendarEvents.
     */
    data: CalendarEventCreateManyInput | CalendarEventCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalendarEventIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CalendarEvent update
   */
  export type CalendarEventUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalendarEvent
     */
    select?: CalendarEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalendarEvent
     */
    omit?: CalendarEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalendarEventInclude<ExtArgs> | null
    /**
     * The data needed to update a CalendarEvent.
     */
    data: XOR<CalendarEventUpdateInput, CalendarEventUncheckedUpdateInput>
    /**
     * Choose, which CalendarEvent to update.
     */
    where: CalendarEventWhereUniqueInput
  }

  /**
   * CalendarEvent updateMany
   */
  export type CalendarEventUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CalendarEvents.
     */
    data: XOR<CalendarEventUpdateManyMutationInput, CalendarEventUncheckedUpdateManyInput>
    /**
     * Filter which CalendarEvents to update
     */
    where?: CalendarEventWhereInput
    /**
     * Limit how many CalendarEvents to update.
     */
    limit?: number
  }

  /**
   * CalendarEvent updateManyAndReturn
   */
  export type CalendarEventUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalendarEvent
     */
    select?: CalendarEventSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CalendarEvent
     */
    omit?: CalendarEventOmit<ExtArgs> | null
    /**
     * The data used to update CalendarEvents.
     */
    data: XOR<CalendarEventUpdateManyMutationInput, CalendarEventUncheckedUpdateManyInput>
    /**
     * Filter which CalendarEvents to update
     */
    where?: CalendarEventWhereInput
    /**
     * Limit how many CalendarEvents to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalendarEventIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CalendarEvent upsert
   */
  export type CalendarEventUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalendarEvent
     */
    select?: CalendarEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalendarEvent
     */
    omit?: CalendarEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalendarEventInclude<ExtArgs> | null
    /**
     * The filter to search for the CalendarEvent to update in case it exists.
     */
    where: CalendarEventWhereUniqueInput
    /**
     * In case the CalendarEvent found by the `where` argument doesn't exist, create a new CalendarEvent with this data.
     */
    create: XOR<CalendarEventCreateInput, CalendarEventUncheckedCreateInput>
    /**
     * In case the CalendarEvent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CalendarEventUpdateInput, CalendarEventUncheckedUpdateInput>
  }

  /**
   * CalendarEvent delete
   */
  export type CalendarEventDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalendarEvent
     */
    select?: CalendarEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalendarEvent
     */
    omit?: CalendarEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalendarEventInclude<ExtArgs> | null
    /**
     * Filter which CalendarEvent to delete.
     */
    where: CalendarEventWhereUniqueInput
  }

  /**
   * CalendarEvent deleteMany
   */
  export type CalendarEventDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CalendarEvents to delete
     */
    where?: CalendarEventWhereInput
    /**
     * Limit how many CalendarEvents to delete.
     */
    limit?: number
  }

  /**
   * CalendarEvent.createdBy
   */
  export type CalendarEvent$createdByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * CalendarEvent without action
   */
  export type CalendarEventDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalendarEvent
     */
    select?: CalendarEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalendarEvent
     */
    omit?: CalendarEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalendarEventInclude<ExtArgs> | null
  }


  /**
   * Model Campaign
   */

  export type AggregateCampaign = {
    _count: CampaignCountAggregateOutputType | null
    _min: CampaignMinAggregateOutputType | null
    _max: CampaignMaxAggregateOutputType | null
  }

  export type CampaignMinAggregateOutputType = {
    id: string | null
    clientId: string | null
    name: string | null
    startDate: Date | null
    endDate: Date | null
    status: $Enums.CampaignStatus | null
  }

  export type CampaignMaxAggregateOutputType = {
    id: string | null
    clientId: string | null
    name: string | null
    startDate: Date | null
    endDate: Date | null
    status: $Enums.CampaignStatus | null
  }

  export type CampaignCountAggregateOutputType = {
    id: number
    clientId: number
    name: number
    startDate: number
    endDate: number
    status: number
    metrics: number
    _all: number
  }


  export type CampaignMinAggregateInputType = {
    id?: true
    clientId?: true
    name?: true
    startDate?: true
    endDate?: true
    status?: true
  }

  export type CampaignMaxAggregateInputType = {
    id?: true
    clientId?: true
    name?: true
    startDate?: true
    endDate?: true
    status?: true
  }

  export type CampaignCountAggregateInputType = {
    id?: true
    clientId?: true
    name?: true
    startDate?: true
    endDate?: true
    status?: true
    metrics?: true
    _all?: true
  }

  export type CampaignAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Campaign to aggregate.
     */
    where?: CampaignWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Campaigns to fetch.
     */
    orderBy?: CampaignOrderByWithRelationInput | CampaignOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CampaignWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Campaigns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Campaigns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Campaigns
    **/
    _count?: true | CampaignCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CampaignMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CampaignMaxAggregateInputType
  }

  export type GetCampaignAggregateType<T extends CampaignAggregateArgs> = {
        [P in keyof T & keyof AggregateCampaign]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCampaign[P]>
      : GetScalarType<T[P], AggregateCampaign[P]>
  }




  export type CampaignGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CampaignWhereInput
    orderBy?: CampaignOrderByWithAggregationInput | CampaignOrderByWithAggregationInput[]
    by: CampaignScalarFieldEnum[] | CampaignScalarFieldEnum
    having?: CampaignScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CampaignCountAggregateInputType | true
    _min?: CampaignMinAggregateInputType
    _max?: CampaignMaxAggregateInputType
  }

  export type CampaignGroupByOutputType = {
    id: string
    clientId: string
    name: string
    startDate: Date | null
    endDate: Date | null
    status: $Enums.CampaignStatus
    metrics: JsonValue | null
    _count: CampaignCountAggregateOutputType | null
    _min: CampaignMinAggregateOutputType | null
    _max: CampaignMaxAggregateOutputType | null
  }

  type GetCampaignGroupByPayload<T extends CampaignGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CampaignGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CampaignGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CampaignGroupByOutputType[P]>
            : GetScalarType<T[P], CampaignGroupByOutputType[P]>
        }
      >
    >


  export type CampaignSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clientId?: boolean
    name?: boolean
    startDate?: boolean
    endDate?: boolean
    status?: boolean
    metrics?: boolean
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["campaign"]>

  export type CampaignSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clientId?: boolean
    name?: boolean
    startDate?: boolean
    endDate?: boolean
    status?: boolean
    metrics?: boolean
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["campaign"]>

  export type CampaignSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clientId?: boolean
    name?: boolean
    startDate?: boolean
    endDate?: boolean
    status?: boolean
    metrics?: boolean
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["campaign"]>

  export type CampaignSelectScalar = {
    id?: boolean
    clientId?: boolean
    name?: boolean
    startDate?: boolean
    endDate?: boolean
    status?: boolean
    metrics?: boolean
  }

  export type CampaignOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "clientId" | "name" | "startDate" | "endDate" | "status" | "metrics", ExtArgs["result"]["campaign"]>
  export type CampaignInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }
  export type CampaignIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }
  export type CampaignIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }

  export type $CampaignPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Campaign"
    objects: {
      client: Prisma.$ClientPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      clientId: string
      name: string
      startDate: Date | null
      endDate: Date | null
      status: $Enums.CampaignStatus
      metrics: Prisma.JsonValue | null
    }, ExtArgs["result"]["campaign"]>
    composites: {}
  }

  type CampaignGetPayload<S extends boolean | null | undefined | CampaignDefaultArgs> = $Result.GetResult<Prisma.$CampaignPayload, S>

  type CampaignCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CampaignFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CampaignCountAggregateInputType | true
    }

  export interface CampaignDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Campaign'], meta: { name: 'Campaign' } }
    /**
     * Find zero or one Campaign that matches the filter.
     * @param {CampaignFindUniqueArgs} args - Arguments to find a Campaign
     * @example
     * // Get one Campaign
     * const campaign = await prisma.campaign.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CampaignFindUniqueArgs>(args: SelectSubset<T, CampaignFindUniqueArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Campaign that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CampaignFindUniqueOrThrowArgs} args - Arguments to find a Campaign
     * @example
     * // Get one Campaign
     * const campaign = await prisma.campaign.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CampaignFindUniqueOrThrowArgs>(args: SelectSubset<T, CampaignFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Campaign that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignFindFirstArgs} args - Arguments to find a Campaign
     * @example
     * // Get one Campaign
     * const campaign = await prisma.campaign.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CampaignFindFirstArgs>(args?: SelectSubset<T, CampaignFindFirstArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Campaign that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignFindFirstOrThrowArgs} args - Arguments to find a Campaign
     * @example
     * // Get one Campaign
     * const campaign = await prisma.campaign.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CampaignFindFirstOrThrowArgs>(args?: SelectSubset<T, CampaignFindFirstOrThrowArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Campaigns that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Campaigns
     * const campaigns = await prisma.campaign.findMany()
     * 
     * // Get first 10 Campaigns
     * const campaigns = await prisma.campaign.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const campaignWithIdOnly = await prisma.campaign.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CampaignFindManyArgs>(args?: SelectSubset<T, CampaignFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Campaign.
     * @param {CampaignCreateArgs} args - Arguments to create a Campaign.
     * @example
     * // Create one Campaign
     * const Campaign = await prisma.campaign.create({
     *   data: {
     *     // ... data to create a Campaign
     *   }
     * })
     * 
     */
    create<T extends CampaignCreateArgs>(args: SelectSubset<T, CampaignCreateArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Campaigns.
     * @param {CampaignCreateManyArgs} args - Arguments to create many Campaigns.
     * @example
     * // Create many Campaigns
     * const campaign = await prisma.campaign.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CampaignCreateManyArgs>(args?: SelectSubset<T, CampaignCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Campaigns and returns the data saved in the database.
     * @param {CampaignCreateManyAndReturnArgs} args - Arguments to create many Campaigns.
     * @example
     * // Create many Campaigns
     * const campaign = await prisma.campaign.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Campaigns and only return the `id`
     * const campaignWithIdOnly = await prisma.campaign.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CampaignCreateManyAndReturnArgs>(args?: SelectSubset<T, CampaignCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Campaign.
     * @param {CampaignDeleteArgs} args - Arguments to delete one Campaign.
     * @example
     * // Delete one Campaign
     * const Campaign = await prisma.campaign.delete({
     *   where: {
     *     // ... filter to delete one Campaign
     *   }
     * })
     * 
     */
    delete<T extends CampaignDeleteArgs>(args: SelectSubset<T, CampaignDeleteArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Campaign.
     * @param {CampaignUpdateArgs} args - Arguments to update one Campaign.
     * @example
     * // Update one Campaign
     * const campaign = await prisma.campaign.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CampaignUpdateArgs>(args: SelectSubset<T, CampaignUpdateArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Campaigns.
     * @param {CampaignDeleteManyArgs} args - Arguments to filter Campaigns to delete.
     * @example
     * // Delete a few Campaigns
     * const { count } = await prisma.campaign.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CampaignDeleteManyArgs>(args?: SelectSubset<T, CampaignDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Campaigns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Campaigns
     * const campaign = await prisma.campaign.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CampaignUpdateManyArgs>(args: SelectSubset<T, CampaignUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Campaigns and returns the data updated in the database.
     * @param {CampaignUpdateManyAndReturnArgs} args - Arguments to update many Campaigns.
     * @example
     * // Update many Campaigns
     * const campaign = await prisma.campaign.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Campaigns and only return the `id`
     * const campaignWithIdOnly = await prisma.campaign.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CampaignUpdateManyAndReturnArgs>(args: SelectSubset<T, CampaignUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Campaign.
     * @param {CampaignUpsertArgs} args - Arguments to update or create a Campaign.
     * @example
     * // Update or create a Campaign
     * const campaign = await prisma.campaign.upsert({
     *   create: {
     *     // ... data to create a Campaign
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Campaign we want to update
     *   }
     * })
     */
    upsert<T extends CampaignUpsertArgs>(args: SelectSubset<T, CampaignUpsertArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Campaigns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignCountArgs} args - Arguments to filter Campaigns to count.
     * @example
     * // Count the number of Campaigns
     * const count = await prisma.campaign.count({
     *   where: {
     *     // ... the filter for the Campaigns we want to count
     *   }
     * })
    **/
    count<T extends CampaignCountArgs>(
      args?: Subset<T, CampaignCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CampaignCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Campaign.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CampaignAggregateArgs>(args: Subset<T, CampaignAggregateArgs>): Prisma.PrismaPromise<GetCampaignAggregateType<T>>

    /**
     * Group by Campaign.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CampaignGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CampaignGroupByArgs['orderBy'] }
        : { orderBy?: CampaignGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CampaignGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCampaignGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Campaign model
   */
  readonly fields: CampaignFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Campaign.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CampaignClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    client<T extends ClientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClientDefaultArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Campaign model
   */
  interface CampaignFieldRefs {
    readonly id: FieldRef<"Campaign", 'String'>
    readonly clientId: FieldRef<"Campaign", 'String'>
    readonly name: FieldRef<"Campaign", 'String'>
    readonly startDate: FieldRef<"Campaign", 'DateTime'>
    readonly endDate: FieldRef<"Campaign", 'DateTime'>
    readonly status: FieldRef<"Campaign", 'CampaignStatus'>
    readonly metrics: FieldRef<"Campaign", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * Campaign findUnique
   */
  export type CampaignFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Campaign
     */
    omit?: CampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    /**
     * Filter, which Campaign to fetch.
     */
    where: CampaignWhereUniqueInput
  }

  /**
   * Campaign findUniqueOrThrow
   */
  export type CampaignFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Campaign
     */
    omit?: CampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    /**
     * Filter, which Campaign to fetch.
     */
    where: CampaignWhereUniqueInput
  }

  /**
   * Campaign findFirst
   */
  export type CampaignFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Campaign
     */
    omit?: CampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    /**
     * Filter, which Campaign to fetch.
     */
    where?: CampaignWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Campaigns to fetch.
     */
    orderBy?: CampaignOrderByWithRelationInput | CampaignOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Campaigns.
     */
    cursor?: CampaignWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Campaigns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Campaigns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Campaigns.
     */
    distinct?: CampaignScalarFieldEnum | CampaignScalarFieldEnum[]
  }

  /**
   * Campaign findFirstOrThrow
   */
  export type CampaignFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Campaign
     */
    omit?: CampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    /**
     * Filter, which Campaign to fetch.
     */
    where?: CampaignWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Campaigns to fetch.
     */
    orderBy?: CampaignOrderByWithRelationInput | CampaignOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Campaigns.
     */
    cursor?: CampaignWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Campaigns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Campaigns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Campaigns.
     */
    distinct?: CampaignScalarFieldEnum | CampaignScalarFieldEnum[]
  }

  /**
   * Campaign findMany
   */
  export type CampaignFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Campaign
     */
    omit?: CampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    /**
     * Filter, which Campaigns to fetch.
     */
    where?: CampaignWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Campaigns to fetch.
     */
    orderBy?: CampaignOrderByWithRelationInput | CampaignOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Campaigns.
     */
    cursor?: CampaignWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Campaigns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Campaigns.
     */
    skip?: number
    distinct?: CampaignScalarFieldEnum | CampaignScalarFieldEnum[]
  }

  /**
   * Campaign create
   */
  export type CampaignCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Campaign
     */
    omit?: CampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    /**
     * The data needed to create a Campaign.
     */
    data: XOR<CampaignCreateInput, CampaignUncheckedCreateInput>
  }

  /**
   * Campaign createMany
   */
  export type CampaignCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Campaigns.
     */
    data: CampaignCreateManyInput | CampaignCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Campaign createManyAndReturn
   */
  export type CampaignCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Campaign
     */
    omit?: CampaignOmit<ExtArgs> | null
    /**
     * The data used to create many Campaigns.
     */
    data: CampaignCreateManyInput | CampaignCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Campaign update
   */
  export type CampaignUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Campaign
     */
    omit?: CampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    /**
     * The data needed to update a Campaign.
     */
    data: XOR<CampaignUpdateInput, CampaignUncheckedUpdateInput>
    /**
     * Choose, which Campaign to update.
     */
    where: CampaignWhereUniqueInput
  }

  /**
   * Campaign updateMany
   */
  export type CampaignUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Campaigns.
     */
    data: XOR<CampaignUpdateManyMutationInput, CampaignUncheckedUpdateManyInput>
    /**
     * Filter which Campaigns to update
     */
    where?: CampaignWhereInput
    /**
     * Limit how many Campaigns to update.
     */
    limit?: number
  }

  /**
   * Campaign updateManyAndReturn
   */
  export type CampaignUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Campaign
     */
    omit?: CampaignOmit<ExtArgs> | null
    /**
     * The data used to update Campaigns.
     */
    data: XOR<CampaignUpdateManyMutationInput, CampaignUncheckedUpdateManyInput>
    /**
     * Filter which Campaigns to update
     */
    where?: CampaignWhereInput
    /**
     * Limit how many Campaigns to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Campaign upsert
   */
  export type CampaignUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Campaign
     */
    omit?: CampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    /**
     * The filter to search for the Campaign to update in case it exists.
     */
    where: CampaignWhereUniqueInput
    /**
     * In case the Campaign found by the `where` argument doesn't exist, create a new Campaign with this data.
     */
    create: XOR<CampaignCreateInput, CampaignUncheckedCreateInput>
    /**
     * In case the Campaign was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CampaignUpdateInput, CampaignUncheckedUpdateInput>
  }

  /**
   * Campaign delete
   */
  export type CampaignDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Campaign
     */
    omit?: CampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    /**
     * Filter which Campaign to delete.
     */
    where: CampaignWhereUniqueInput
  }

  /**
   * Campaign deleteMany
   */
  export type CampaignDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Campaigns to delete
     */
    where?: CampaignWhereInput
    /**
     * Limit how many Campaigns to delete.
     */
    limit?: number
  }

  /**
   * Campaign without action
   */
  export type CampaignDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Campaign
     */
    omit?: CampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
  }


  /**
   * Model MindMap
   */

  export type AggregateMindMap = {
    _count: MindMapCountAggregateOutputType | null
    _min: MindMapMinAggregateOutputType | null
    _max: MindMapMaxAggregateOutputType | null
  }

  export type MindMapMinAggregateOutputType = {
    id: string | null
    organizationId: string | null
    ownerUserId: string | null
    createdAt: Date | null
  }

  export type MindMapMaxAggregateOutputType = {
    id: string | null
    organizationId: string | null
    ownerUserId: string | null
    createdAt: Date | null
  }

  export type MindMapCountAggregateOutputType = {
    id: number
    organizationId: number
    ownerUserId: number
    data: number
    createdAt: number
    _all: number
  }


  export type MindMapMinAggregateInputType = {
    id?: true
    organizationId?: true
    ownerUserId?: true
    createdAt?: true
  }

  export type MindMapMaxAggregateInputType = {
    id?: true
    organizationId?: true
    ownerUserId?: true
    createdAt?: true
  }

  export type MindMapCountAggregateInputType = {
    id?: true
    organizationId?: true
    ownerUserId?: true
    data?: true
    createdAt?: true
    _all?: true
  }

  export type MindMapAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MindMap to aggregate.
     */
    where?: MindMapWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MindMaps to fetch.
     */
    orderBy?: MindMapOrderByWithRelationInput | MindMapOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MindMapWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MindMaps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MindMaps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MindMaps
    **/
    _count?: true | MindMapCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MindMapMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MindMapMaxAggregateInputType
  }

  export type GetMindMapAggregateType<T extends MindMapAggregateArgs> = {
        [P in keyof T & keyof AggregateMindMap]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMindMap[P]>
      : GetScalarType<T[P], AggregateMindMap[P]>
  }




  export type MindMapGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MindMapWhereInput
    orderBy?: MindMapOrderByWithAggregationInput | MindMapOrderByWithAggregationInput[]
    by: MindMapScalarFieldEnum[] | MindMapScalarFieldEnum
    having?: MindMapScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MindMapCountAggregateInputType | true
    _min?: MindMapMinAggregateInputType
    _max?: MindMapMaxAggregateInputType
  }

  export type MindMapGroupByOutputType = {
    id: string
    organizationId: string | null
    ownerUserId: string | null
    data: JsonValue
    createdAt: Date
    _count: MindMapCountAggregateOutputType | null
    _min: MindMapMinAggregateOutputType | null
    _max: MindMapMaxAggregateOutputType | null
  }

  type GetMindMapGroupByPayload<T extends MindMapGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MindMapGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MindMapGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MindMapGroupByOutputType[P]>
            : GetScalarType<T[P], MindMapGroupByOutputType[P]>
        }
      >
    >


  export type MindMapSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    ownerUserId?: boolean
    data?: boolean
    createdAt?: boolean
    organization?: boolean | MindMap$organizationArgs<ExtArgs>
    ownerUser?: boolean | MindMap$ownerUserArgs<ExtArgs>
  }, ExtArgs["result"]["mindMap"]>

  export type MindMapSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    ownerUserId?: boolean
    data?: boolean
    createdAt?: boolean
    organization?: boolean | MindMap$organizationArgs<ExtArgs>
    ownerUser?: boolean | MindMap$ownerUserArgs<ExtArgs>
  }, ExtArgs["result"]["mindMap"]>

  export type MindMapSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    ownerUserId?: boolean
    data?: boolean
    createdAt?: boolean
    organization?: boolean | MindMap$organizationArgs<ExtArgs>
    ownerUser?: boolean | MindMap$ownerUserArgs<ExtArgs>
  }, ExtArgs["result"]["mindMap"]>

  export type MindMapSelectScalar = {
    id?: boolean
    organizationId?: boolean
    ownerUserId?: boolean
    data?: boolean
    createdAt?: boolean
  }

  export type MindMapOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "organizationId" | "ownerUserId" | "data" | "createdAt", ExtArgs["result"]["mindMap"]>
  export type MindMapInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | MindMap$organizationArgs<ExtArgs>
    ownerUser?: boolean | MindMap$ownerUserArgs<ExtArgs>
  }
  export type MindMapIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | MindMap$organizationArgs<ExtArgs>
    ownerUser?: boolean | MindMap$ownerUserArgs<ExtArgs>
  }
  export type MindMapIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | MindMap$organizationArgs<ExtArgs>
    ownerUser?: boolean | MindMap$ownerUserArgs<ExtArgs>
  }

  export type $MindMapPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MindMap"
    objects: {
      organization: Prisma.$OrganizationPayload<ExtArgs> | null
      ownerUser: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      organizationId: string | null
      ownerUserId: string | null
      data: Prisma.JsonValue
      createdAt: Date
    }, ExtArgs["result"]["mindMap"]>
    composites: {}
  }

  type MindMapGetPayload<S extends boolean | null | undefined | MindMapDefaultArgs> = $Result.GetResult<Prisma.$MindMapPayload, S>

  type MindMapCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MindMapFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MindMapCountAggregateInputType | true
    }

  export interface MindMapDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MindMap'], meta: { name: 'MindMap' } }
    /**
     * Find zero or one MindMap that matches the filter.
     * @param {MindMapFindUniqueArgs} args - Arguments to find a MindMap
     * @example
     * // Get one MindMap
     * const mindMap = await prisma.mindMap.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MindMapFindUniqueArgs>(args: SelectSubset<T, MindMapFindUniqueArgs<ExtArgs>>): Prisma__MindMapClient<$Result.GetResult<Prisma.$MindMapPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MindMap that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MindMapFindUniqueOrThrowArgs} args - Arguments to find a MindMap
     * @example
     * // Get one MindMap
     * const mindMap = await prisma.mindMap.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MindMapFindUniqueOrThrowArgs>(args: SelectSubset<T, MindMapFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MindMapClient<$Result.GetResult<Prisma.$MindMapPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MindMap that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MindMapFindFirstArgs} args - Arguments to find a MindMap
     * @example
     * // Get one MindMap
     * const mindMap = await prisma.mindMap.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MindMapFindFirstArgs>(args?: SelectSubset<T, MindMapFindFirstArgs<ExtArgs>>): Prisma__MindMapClient<$Result.GetResult<Prisma.$MindMapPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MindMap that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MindMapFindFirstOrThrowArgs} args - Arguments to find a MindMap
     * @example
     * // Get one MindMap
     * const mindMap = await prisma.mindMap.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MindMapFindFirstOrThrowArgs>(args?: SelectSubset<T, MindMapFindFirstOrThrowArgs<ExtArgs>>): Prisma__MindMapClient<$Result.GetResult<Prisma.$MindMapPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MindMaps that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MindMapFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MindMaps
     * const mindMaps = await prisma.mindMap.findMany()
     * 
     * // Get first 10 MindMaps
     * const mindMaps = await prisma.mindMap.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const mindMapWithIdOnly = await prisma.mindMap.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MindMapFindManyArgs>(args?: SelectSubset<T, MindMapFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MindMapPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MindMap.
     * @param {MindMapCreateArgs} args - Arguments to create a MindMap.
     * @example
     * // Create one MindMap
     * const MindMap = await prisma.mindMap.create({
     *   data: {
     *     // ... data to create a MindMap
     *   }
     * })
     * 
     */
    create<T extends MindMapCreateArgs>(args: SelectSubset<T, MindMapCreateArgs<ExtArgs>>): Prisma__MindMapClient<$Result.GetResult<Prisma.$MindMapPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MindMaps.
     * @param {MindMapCreateManyArgs} args - Arguments to create many MindMaps.
     * @example
     * // Create many MindMaps
     * const mindMap = await prisma.mindMap.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MindMapCreateManyArgs>(args?: SelectSubset<T, MindMapCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MindMaps and returns the data saved in the database.
     * @param {MindMapCreateManyAndReturnArgs} args - Arguments to create many MindMaps.
     * @example
     * // Create many MindMaps
     * const mindMap = await prisma.mindMap.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MindMaps and only return the `id`
     * const mindMapWithIdOnly = await prisma.mindMap.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MindMapCreateManyAndReturnArgs>(args?: SelectSubset<T, MindMapCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MindMapPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MindMap.
     * @param {MindMapDeleteArgs} args - Arguments to delete one MindMap.
     * @example
     * // Delete one MindMap
     * const MindMap = await prisma.mindMap.delete({
     *   where: {
     *     // ... filter to delete one MindMap
     *   }
     * })
     * 
     */
    delete<T extends MindMapDeleteArgs>(args: SelectSubset<T, MindMapDeleteArgs<ExtArgs>>): Prisma__MindMapClient<$Result.GetResult<Prisma.$MindMapPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MindMap.
     * @param {MindMapUpdateArgs} args - Arguments to update one MindMap.
     * @example
     * // Update one MindMap
     * const mindMap = await prisma.mindMap.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MindMapUpdateArgs>(args: SelectSubset<T, MindMapUpdateArgs<ExtArgs>>): Prisma__MindMapClient<$Result.GetResult<Prisma.$MindMapPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MindMaps.
     * @param {MindMapDeleteManyArgs} args - Arguments to filter MindMaps to delete.
     * @example
     * // Delete a few MindMaps
     * const { count } = await prisma.mindMap.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MindMapDeleteManyArgs>(args?: SelectSubset<T, MindMapDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MindMaps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MindMapUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MindMaps
     * const mindMap = await prisma.mindMap.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MindMapUpdateManyArgs>(args: SelectSubset<T, MindMapUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MindMaps and returns the data updated in the database.
     * @param {MindMapUpdateManyAndReturnArgs} args - Arguments to update many MindMaps.
     * @example
     * // Update many MindMaps
     * const mindMap = await prisma.mindMap.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MindMaps and only return the `id`
     * const mindMapWithIdOnly = await prisma.mindMap.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MindMapUpdateManyAndReturnArgs>(args: SelectSubset<T, MindMapUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MindMapPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MindMap.
     * @param {MindMapUpsertArgs} args - Arguments to update or create a MindMap.
     * @example
     * // Update or create a MindMap
     * const mindMap = await prisma.mindMap.upsert({
     *   create: {
     *     // ... data to create a MindMap
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MindMap we want to update
     *   }
     * })
     */
    upsert<T extends MindMapUpsertArgs>(args: SelectSubset<T, MindMapUpsertArgs<ExtArgs>>): Prisma__MindMapClient<$Result.GetResult<Prisma.$MindMapPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MindMaps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MindMapCountArgs} args - Arguments to filter MindMaps to count.
     * @example
     * // Count the number of MindMaps
     * const count = await prisma.mindMap.count({
     *   where: {
     *     // ... the filter for the MindMaps we want to count
     *   }
     * })
    **/
    count<T extends MindMapCountArgs>(
      args?: Subset<T, MindMapCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MindMapCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MindMap.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MindMapAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MindMapAggregateArgs>(args: Subset<T, MindMapAggregateArgs>): Prisma.PrismaPromise<GetMindMapAggregateType<T>>

    /**
     * Group by MindMap.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MindMapGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MindMapGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MindMapGroupByArgs['orderBy'] }
        : { orderBy?: MindMapGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MindMapGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMindMapGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MindMap model
   */
  readonly fields: MindMapFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MindMap.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MindMapClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    organization<T extends MindMap$organizationArgs<ExtArgs> = {}>(args?: Subset<T, MindMap$organizationArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    ownerUser<T extends MindMap$ownerUserArgs<ExtArgs> = {}>(args?: Subset<T, MindMap$ownerUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MindMap model
   */
  interface MindMapFieldRefs {
    readonly id: FieldRef<"MindMap", 'String'>
    readonly organizationId: FieldRef<"MindMap", 'String'>
    readonly ownerUserId: FieldRef<"MindMap", 'String'>
    readonly data: FieldRef<"MindMap", 'Json'>
    readonly createdAt: FieldRef<"MindMap", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MindMap findUnique
   */
  export type MindMapFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MindMap
     */
    select?: MindMapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MindMap
     */
    omit?: MindMapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MindMapInclude<ExtArgs> | null
    /**
     * Filter, which MindMap to fetch.
     */
    where: MindMapWhereUniqueInput
  }

  /**
   * MindMap findUniqueOrThrow
   */
  export type MindMapFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MindMap
     */
    select?: MindMapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MindMap
     */
    omit?: MindMapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MindMapInclude<ExtArgs> | null
    /**
     * Filter, which MindMap to fetch.
     */
    where: MindMapWhereUniqueInput
  }

  /**
   * MindMap findFirst
   */
  export type MindMapFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MindMap
     */
    select?: MindMapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MindMap
     */
    omit?: MindMapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MindMapInclude<ExtArgs> | null
    /**
     * Filter, which MindMap to fetch.
     */
    where?: MindMapWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MindMaps to fetch.
     */
    orderBy?: MindMapOrderByWithRelationInput | MindMapOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MindMaps.
     */
    cursor?: MindMapWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MindMaps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MindMaps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MindMaps.
     */
    distinct?: MindMapScalarFieldEnum | MindMapScalarFieldEnum[]
  }

  /**
   * MindMap findFirstOrThrow
   */
  export type MindMapFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MindMap
     */
    select?: MindMapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MindMap
     */
    omit?: MindMapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MindMapInclude<ExtArgs> | null
    /**
     * Filter, which MindMap to fetch.
     */
    where?: MindMapWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MindMaps to fetch.
     */
    orderBy?: MindMapOrderByWithRelationInput | MindMapOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MindMaps.
     */
    cursor?: MindMapWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MindMaps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MindMaps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MindMaps.
     */
    distinct?: MindMapScalarFieldEnum | MindMapScalarFieldEnum[]
  }

  /**
   * MindMap findMany
   */
  export type MindMapFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MindMap
     */
    select?: MindMapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MindMap
     */
    omit?: MindMapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MindMapInclude<ExtArgs> | null
    /**
     * Filter, which MindMaps to fetch.
     */
    where?: MindMapWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MindMaps to fetch.
     */
    orderBy?: MindMapOrderByWithRelationInput | MindMapOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MindMaps.
     */
    cursor?: MindMapWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MindMaps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MindMaps.
     */
    skip?: number
    distinct?: MindMapScalarFieldEnum | MindMapScalarFieldEnum[]
  }

  /**
   * MindMap create
   */
  export type MindMapCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MindMap
     */
    select?: MindMapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MindMap
     */
    omit?: MindMapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MindMapInclude<ExtArgs> | null
    /**
     * The data needed to create a MindMap.
     */
    data: XOR<MindMapCreateInput, MindMapUncheckedCreateInput>
  }

  /**
   * MindMap createMany
   */
  export type MindMapCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MindMaps.
     */
    data: MindMapCreateManyInput | MindMapCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MindMap createManyAndReturn
   */
  export type MindMapCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MindMap
     */
    select?: MindMapSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MindMap
     */
    omit?: MindMapOmit<ExtArgs> | null
    /**
     * The data used to create many MindMaps.
     */
    data: MindMapCreateManyInput | MindMapCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MindMapIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MindMap update
   */
  export type MindMapUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MindMap
     */
    select?: MindMapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MindMap
     */
    omit?: MindMapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MindMapInclude<ExtArgs> | null
    /**
     * The data needed to update a MindMap.
     */
    data: XOR<MindMapUpdateInput, MindMapUncheckedUpdateInput>
    /**
     * Choose, which MindMap to update.
     */
    where: MindMapWhereUniqueInput
  }

  /**
   * MindMap updateMany
   */
  export type MindMapUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MindMaps.
     */
    data: XOR<MindMapUpdateManyMutationInput, MindMapUncheckedUpdateManyInput>
    /**
     * Filter which MindMaps to update
     */
    where?: MindMapWhereInput
    /**
     * Limit how many MindMaps to update.
     */
    limit?: number
  }

  /**
   * MindMap updateManyAndReturn
   */
  export type MindMapUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MindMap
     */
    select?: MindMapSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MindMap
     */
    omit?: MindMapOmit<ExtArgs> | null
    /**
     * The data used to update MindMaps.
     */
    data: XOR<MindMapUpdateManyMutationInput, MindMapUncheckedUpdateManyInput>
    /**
     * Filter which MindMaps to update
     */
    where?: MindMapWhereInput
    /**
     * Limit how many MindMaps to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MindMapIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MindMap upsert
   */
  export type MindMapUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MindMap
     */
    select?: MindMapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MindMap
     */
    omit?: MindMapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MindMapInclude<ExtArgs> | null
    /**
     * The filter to search for the MindMap to update in case it exists.
     */
    where: MindMapWhereUniqueInput
    /**
     * In case the MindMap found by the `where` argument doesn't exist, create a new MindMap with this data.
     */
    create: XOR<MindMapCreateInput, MindMapUncheckedCreateInput>
    /**
     * In case the MindMap was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MindMapUpdateInput, MindMapUncheckedUpdateInput>
  }

  /**
   * MindMap delete
   */
  export type MindMapDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MindMap
     */
    select?: MindMapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MindMap
     */
    omit?: MindMapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MindMapInclude<ExtArgs> | null
    /**
     * Filter which MindMap to delete.
     */
    where: MindMapWhereUniqueInput
  }

  /**
   * MindMap deleteMany
   */
  export type MindMapDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MindMaps to delete
     */
    where?: MindMapWhereInput
    /**
     * Limit how many MindMaps to delete.
     */
    limit?: number
  }

  /**
   * MindMap.organization
   */
  export type MindMap$organizationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    where?: OrganizationWhereInput
  }

  /**
   * MindMap.ownerUser
   */
  export type MindMap$ownerUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * MindMap without action
   */
  export type MindMapDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MindMap
     */
    select?: MindMapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MindMap
     */
    omit?: MindMapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MindMapInclude<ExtArgs> | null
  }


  /**
   * Model AffiliateLink
   */

  export type AggregateAffiliateLink = {
    _count: AffiliateLinkCountAggregateOutputType | null
    _avg: AffiliateLinkAvgAggregateOutputType | null
    _sum: AffiliateLinkSumAggregateOutputType | null
    _min: AffiliateLinkMinAggregateOutputType | null
    _max: AffiliateLinkMaxAggregateOutputType | null
  }

  export type AffiliateLinkAvgAggregateOutputType = {
    commissionRate: number | null
  }

  export type AffiliateLinkSumAggregateOutputType = {
    commissionRate: number | null
  }

  export type AffiliateLinkMinAggregateOutputType = {
    id: string | null
    organizationId: string | null
    userId: string | null
    code: string | null
    commissionRate: number | null
    createdAt: Date | null
  }

  export type AffiliateLinkMaxAggregateOutputType = {
    id: string | null
    organizationId: string | null
    userId: string | null
    code: string | null
    commissionRate: number | null
    createdAt: Date | null
  }

  export type AffiliateLinkCountAggregateOutputType = {
    id: number
    organizationId: number
    userId: number
    code: number
    commissionRate: number
    createdAt: number
    _all: number
  }


  export type AffiliateLinkAvgAggregateInputType = {
    commissionRate?: true
  }

  export type AffiliateLinkSumAggregateInputType = {
    commissionRate?: true
  }

  export type AffiliateLinkMinAggregateInputType = {
    id?: true
    organizationId?: true
    userId?: true
    code?: true
    commissionRate?: true
    createdAt?: true
  }

  export type AffiliateLinkMaxAggregateInputType = {
    id?: true
    organizationId?: true
    userId?: true
    code?: true
    commissionRate?: true
    createdAt?: true
  }

  export type AffiliateLinkCountAggregateInputType = {
    id?: true
    organizationId?: true
    userId?: true
    code?: true
    commissionRate?: true
    createdAt?: true
    _all?: true
  }

  export type AffiliateLinkAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AffiliateLink to aggregate.
     */
    where?: AffiliateLinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AffiliateLinks to fetch.
     */
    orderBy?: AffiliateLinkOrderByWithRelationInput | AffiliateLinkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AffiliateLinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AffiliateLinks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AffiliateLinks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AffiliateLinks
    **/
    _count?: true | AffiliateLinkCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AffiliateLinkAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AffiliateLinkSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AffiliateLinkMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AffiliateLinkMaxAggregateInputType
  }

  export type GetAffiliateLinkAggregateType<T extends AffiliateLinkAggregateArgs> = {
        [P in keyof T & keyof AggregateAffiliateLink]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAffiliateLink[P]>
      : GetScalarType<T[P], AggregateAffiliateLink[P]>
  }




  export type AffiliateLinkGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AffiliateLinkWhereInput
    orderBy?: AffiliateLinkOrderByWithAggregationInput | AffiliateLinkOrderByWithAggregationInput[]
    by: AffiliateLinkScalarFieldEnum[] | AffiliateLinkScalarFieldEnum
    having?: AffiliateLinkScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AffiliateLinkCountAggregateInputType | true
    _avg?: AffiliateLinkAvgAggregateInputType
    _sum?: AffiliateLinkSumAggregateInputType
    _min?: AffiliateLinkMinAggregateInputType
    _max?: AffiliateLinkMaxAggregateInputType
  }

  export type AffiliateLinkGroupByOutputType = {
    id: string
    organizationId: string
    userId: string
    code: string
    commissionRate: number
    createdAt: Date
    _count: AffiliateLinkCountAggregateOutputType | null
    _avg: AffiliateLinkAvgAggregateOutputType | null
    _sum: AffiliateLinkSumAggregateOutputType | null
    _min: AffiliateLinkMinAggregateOutputType | null
    _max: AffiliateLinkMaxAggregateOutputType | null
  }

  type GetAffiliateLinkGroupByPayload<T extends AffiliateLinkGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AffiliateLinkGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AffiliateLinkGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AffiliateLinkGroupByOutputType[P]>
            : GetScalarType<T[P], AffiliateLinkGroupByOutputType[P]>
        }
      >
    >


  export type AffiliateLinkSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    userId?: boolean
    code?: boolean
    commissionRate?: boolean
    createdAt?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    clicks?: boolean | AffiliateLink$clicksArgs<ExtArgs>
    _count?: boolean | AffiliateLinkCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["affiliateLink"]>

  export type AffiliateLinkSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    userId?: boolean
    code?: boolean
    commissionRate?: boolean
    createdAt?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["affiliateLink"]>

  export type AffiliateLinkSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    userId?: boolean
    code?: boolean
    commissionRate?: boolean
    createdAt?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["affiliateLink"]>

  export type AffiliateLinkSelectScalar = {
    id?: boolean
    organizationId?: boolean
    userId?: boolean
    code?: boolean
    commissionRate?: boolean
    createdAt?: boolean
  }

  export type AffiliateLinkOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "organizationId" | "userId" | "code" | "commissionRate" | "createdAt", ExtArgs["result"]["affiliateLink"]>
  export type AffiliateLinkInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    clicks?: boolean | AffiliateLink$clicksArgs<ExtArgs>
    _count?: boolean | AffiliateLinkCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AffiliateLinkIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AffiliateLinkIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AffiliateLinkPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AffiliateLink"
    objects: {
      organization: Prisma.$OrganizationPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
      clicks: Prisma.$AffiliateClickPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      organizationId: string
      userId: string
      code: string
      commissionRate: number
      createdAt: Date
    }, ExtArgs["result"]["affiliateLink"]>
    composites: {}
  }

  type AffiliateLinkGetPayload<S extends boolean | null | undefined | AffiliateLinkDefaultArgs> = $Result.GetResult<Prisma.$AffiliateLinkPayload, S>

  type AffiliateLinkCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AffiliateLinkFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AffiliateLinkCountAggregateInputType | true
    }

  export interface AffiliateLinkDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AffiliateLink'], meta: { name: 'AffiliateLink' } }
    /**
     * Find zero or one AffiliateLink that matches the filter.
     * @param {AffiliateLinkFindUniqueArgs} args - Arguments to find a AffiliateLink
     * @example
     * // Get one AffiliateLink
     * const affiliateLink = await prisma.affiliateLink.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AffiliateLinkFindUniqueArgs>(args: SelectSubset<T, AffiliateLinkFindUniqueArgs<ExtArgs>>): Prisma__AffiliateLinkClient<$Result.GetResult<Prisma.$AffiliateLinkPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AffiliateLink that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AffiliateLinkFindUniqueOrThrowArgs} args - Arguments to find a AffiliateLink
     * @example
     * // Get one AffiliateLink
     * const affiliateLink = await prisma.affiliateLink.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AffiliateLinkFindUniqueOrThrowArgs>(args: SelectSubset<T, AffiliateLinkFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AffiliateLinkClient<$Result.GetResult<Prisma.$AffiliateLinkPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AffiliateLink that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AffiliateLinkFindFirstArgs} args - Arguments to find a AffiliateLink
     * @example
     * // Get one AffiliateLink
     * const affiliateLink = await prisma.affiliateLink.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AffiliateLinkFindFirstArgs>(args?: SelectSubset<T, AffiliateLinkFindFirstArgs<ExtArgs>>): Prisma__AffiliateLinkClient<$Result.GetResult<Prisma.$AffiliateLinkPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AffiliateLink that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AffiliateLinkFindFirstOrThrowArgs} args - Arguments to find a AffiliateLink
     * @example
     * // Get one AffiliateLink
     * const affiliateLink = await prisma.affiliateLink.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AffiliateLinkFindFirstOrThrowArgs>(args?: SelectSubset<T, AffiliateLinkFindFirstOrThrowArgs<ExtArgs>>): Prisma__AffiliateLinkClient<$Result.GetResult<Prisma.$AffiliateLinkPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AffiliateLinks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AffiliateLinkFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AffiliateLinks
     * const affiliateLinks = await prisma.affiliateLink.findMany()
     * 
     * // Get first 10 AffiliateLinks
     * const affiliateLinks = await prisma.affiliateLink.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const affiliateLinkWithIdOnly = await prisma.affiliateLink.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AffiliateLinkFindManyArgs>(args?: SelectSubset<T, AffiliateLinkFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AffiliateLinkPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AffiliateLink.
     * @param {AffiliateLinkCreateArgs} args - Arguments to create a AffiliateLink.
     * @example
     * // Create one AffiliateLink
     * const AffiliateLink = await prisma.affiliateLink.create({
     *   data: {
     *     // ... data to create a AffiliateLink
     *   }
     * })
     * 
     */
    create<T extends AffiliateLinkCreateArgs>(args: SelectSubset<T, AffiliateLinkCreateArgs<ExtArgs>>): Prisma__AffiliateLinkClient<$Result.GetResult<Prisma.$AffiliateLinkPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AffiliateLinks.
     * @param {AffiliateLinkCreateManyArgs} args - Arguments to create many AffiliateLinks.
     * @example
     * // Create many AffiliateLinks
     * const affiliateLink = await prisma.affiliateLink.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AffiliateLinkCreateManyArgs>(args?: SelectSubset<T, AffiliateLinkCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AffiliateLinks and returns the data saved in the database.
     * @param {AffiliateLinkCreateManyAndReturnArgs} args - Arguments to create many AffiliateLinks.
     * @example
     * // Create many AffiliateLinks
     * const affiliateLink = await prisma.affiliateLink.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AffiliateLinks and only return the `id`
     * const affiliateLinkWithIdOnly = await prisma.affiliateLink.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AffiliateLinkCreateManyAndReturnArgs>(args?: SelectSubset<T, AffiliateLinkCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AffiliateLinkPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AffiliateLink.
     * @param {AffiliateLinkDeleteArgs} args - Arguments to delete one AffiliateLink.
     * @example
     * // Delete one AffiliateLink
     * const AffiliateLink = await prisma.affiliateLink.delete({
     *   where: {
     *     // ... filter to delete one AffiliateLink
     *   }
     * })
     * 
     */
    delete<T extends AffiliateLinkDeleteArgs>(args: SelectSubset<T, AffiliateLinkDeleteArgs<ExtArgs>>): Prisma__AffiliateLinkClient<$Result.GetResult<Prisma.$AffiliateLinkPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AffiliateLink.
     * @param {AffiliateLinkUpdateArgs} args - Arguments to update one AffiliateLink.
     * @example
     * // Update one AffiliateLink
     * const affiliateLink = await prisma.affiliateLink.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AffiliateLinkUpdateArgs>(args: SelectSubset<T, AffiliateLinkUpdateArgs<ExtArgs>>): Prisma__AffiliateLinkClient<$Result.GetResult<Prisma.$AffiliateLinkPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AffiliateLinks.
     * @param {AffiliateLinkDeleteManyArgs} args - Arguments to filter AffiliateLinks to delete.
     * @example
     * // Delete a few AffiliateLinks
     * const { count } = await prisma.affiliateLink.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AffiliateLinkDeleteManyArgs>(args?: SelectSubset<T, AffiliateLinkDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AffiliateLinks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AffiliateLinkUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AffiliateLinks
     * const affiliateLink = await prisma.affiliateLink.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AffiliateLinkUpdateManyArgs>(args: SelectSubset<T, AffiliateLinkUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AffiliateLinks and returns the data updated in the database.
     * @param {AffiliateLinkUpdateManyAndReturnArgs} args - Arguments to update many AffiliateLinks.
     * @example
     * // Update many AffiliateLinks
     * const affiliateLink = await prisma.affiliateLink.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AffiliateLinks and only return the `id`
     * const affiliateLinkWithIdOnly = await prisma.affiliateLink.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AffiliateLinkUpdateManyAndReturnArgs>(args: SelectSubset<T, AffiliateLinkUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AffiliateLinkPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AffiliateLink.
     * @param {AffiliateLinkUpsertArgs} args - Arguments to update or create a AffiliateLink.
     * @example
     * // Update or create a AffiliateLink
     * const affiliateLink = await prisma.affiliateLink.upsert({
     *   create: {
     *     // ... data to create a AffiliateLink
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AffiliateLink we want to update
     *   }
     * })
     */
    upsert<T extends AffiliateLinkUpsertArgs>(args: SelectSubset<T, AffiliateLinkUpsertArgs<ExtArgs>>): Prisma__AffiliateLinkClient<$Result.GetResult<Prisma.$AffiliateLinkPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AffiliateLinks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AffiliateLinkCountArgs} args - Arguments to filter AffiliateLinks to count.
     * @example
     * // Count the number of AffiliateLinks
     * const count = await prisma.affiliateLink.count({
     *   where: {
     *     // ... the filter for the AffiliateLinks we want to count
     *   }
     * })
    **/
    count<T extends AffiliateLinkCountArgs>(
      args?: Subset<T, AffiliateLinkCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AffiliateLinkCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AffiliateLink.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AffiliateLinkAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AffiliateLinkAggregateArgs>(args: Subset<T, AffiliateLinkAggregateArgs>): Prisma.PrismaPromise<GetAffiliateLinkAggregateType<T>>

    /**
     * Group by AffiliateLink.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AffiliateLinkGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AffiliateLinkGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AffiliateLinkGroupByArgs['orderBy'] }
        : { orderBy?: AffiliateLinkGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AffiliateLinkGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAffiliateLinkGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AffiliateLink model
   */
  readonly fields: AffiliateLinkFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AffiliateLink.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AffiliateLinkClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    clicks<T extends AffiliateLink$clicksArgs<ExtArgs> = {}>(args?: Subset<T, AffiliateLink$clicksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AffiliateClickPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AffiliateLink model
   */
  interface AffiliateLinkFieldRefs {
    readonly id: FieldRef<"AffiliateLink", 'String'>
    readonly organizationId: FieldRef<"AffiliateLink", 'String'>
    readonly userId: FieldRef<"AffiliateLink", 'String'>
    readonly code: FieldRef<"AffiliateLink", 'String'>
    readonly commissionRate: FieldRef<"AffiliateLink", 'Float'>
    readonly createdAt: FieldRef<"AffiliateLink", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AffiliateLink findUnique
   */
  export type AffiliateLinkFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AffiliateLink
     */
    select?: AffiliateLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AffiliateLink
     */
    omit?: AffiliateLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AffiliateLinkInclude<ExtArgs> | null
    /**
     * Filter, which AffiliateLink to fetch.
     */
    where: AffiliateLinkWhereUniqueInput
  }

  /**
   * AffiliateLink findUniqueOrThrow
   */
  export type AffiliateLinkFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AffiliateLink
     */
    select?: AffiliateLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AffiliateLink
     */
    omit?: AffiliateLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AffiliateLinkInclude<ExtArgs> | null
    /**
     * Filter, which AffiliateLink to fetch.
     */
    where: AffiliateLinkWhereUniqueInput
  }

  /**
   * AffiliateLink findFirst
   */
  export type AffiliateLinkFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AffiliateLink
     */
    select?: AffiliateLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AffiliateLink
     */
    omit?: AffiliateLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AffiliateLinkInclude<ExtArgs> | null
    /**
     * Filter, which AffiliateLink to fetch.
     */
    where?: AffiliateLinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AffiliateLinks to fetch.
     */
    orderBy?: AffiliateLinkOrderByWithRelationInput | AffiliateLinkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AffiliateLinks.
     */
    cursor?: AffiliateLinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AffiliateLinks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AffiliateLinks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AffiliateLinks.
     */
    distinct?: AffiliateLinkScalarFieldEnum | AffiliateLinkScalarFieldEnum[]
  }

  /**
   * AffiliateLink findFirstOrThrow
   */
  export type AffiliateLinkFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AffiliateLink
     */
    select?: AffiliateLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AffiliateLink
     */
    omit?: AffiliateLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AffiliateLinkInclude<ExtArgs> | null
    /**
     * Filter, which AffiliateLink to fetch.
     */
    where?: AffiliateLinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AffiliateLinks to fetch.
     */
    orderBy?: AffiliateLinkOrderByWithRelationInput | AffiliateLinkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AffiliateLinks.
     */
    cursor?: AffiliateLinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AffiliateLinks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AffiliateLinks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AffiliateLinks.
     */
    distinct?: AffiliateLinkScalarFieldEnum | AffiliateLinkScalarFieldEnum[]
  }

  /**
   * AffiliateLink findMany
   */
  export type AffiliateLinkFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AffiliateLink
     */
    select?: AffiliateLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AffiliateLink
     */
    omit?: AffiliateLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AffiliateLinkInclude<ExtArgs> | null
    /**
     * Filter, which AffiliateLinks to fetch.
     */
    where?: AffiliateLinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AffiliateLinks to fetch.
     */
    orderBy?: AffiliateLinkOrderByWithRelationInput | AffiliateLinkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AffiliateLinks.
     */
    cursor?: AffiliateLinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AffiliateLinks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AffiliateLinks.
     */
    skip?: number
    distinct?: AffiliateLinkScalarFieldEnum | AffiliateLinkScalarFieldEnum[]
  }

  /**
   * AffiliateLink create
   */
  export type AffiliateLinkCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AffiliateLink
     */
    select?: AffiliateLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AffiliateLink
     */
    omit?: AffiliateLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AffiliateLinkInclude<ExtArgs> | null
    /**
     * The data needed to create a AffiliateLink.
     */
    data: XOR<AffiliateLinkCreateInput, AffiliateLinkUncheckedCreateInput>
  }

  /**
   * AffiliateLink createMany
   */
  export type AffiliateLinkCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AffiliateLinks.
     */
    data: AffiliateLinkCreateManyInput | AffiliateLinkCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AffiliateLink createManyAndReturn
   */
  export type AffiliateLinkCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AffiliateLink
     */
    select?: AffiliateLinkSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AffiliateLink
     */
    omit?: AffiliateLinkOmit<ExtArgs> | null
    /**
     * The data used to create many AffiliateLinks.
     */
    data: AffiliateLinkCreateManyInput | AffiliateLinkCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AffiliateLinkIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AffiliateLink update
   */
  export type AffiliateLinkUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AffiliateLink
     */
    select?: AffiliateLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AffiliateLink
     */
    omit?: AffiliateLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AffiliateLinkInclude<ExtArgs> | null
    /**
     * The data needed to update a AffiliateLink.
     */
    data: XOR<AffiliateLinkUpdateInput, AffiliateLinkUncheckedUpdateInput>
    /**
     * Choose, which AffiliateLink to update.
     */
    where: AffiliateLinkWhereUniqueInput
  }

  /**
   * AffiliateLink updateMany
   */
  export type AffiliateLinkUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AffiliateLinks.
     */
    data: XOR<AffiliateLinkUpdateManyMutationInput, AffiliateLinkUncheckedUpdateManyInput>
    /**
     * Filter which AffiliateLinks to update
     */
    where?: AffiliateLinkWhereInput
    /**
     * Limit how many AffiliateLinks to update.
     */
    limit?: number
  }

  /**
   * AffiliateLink updateManyAndReturn
   */
  export type AffiliateLinkUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AffiliateLink
     */
    select?: AffiliateLinkSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AffiliateLink
     */
    omit?: AffiliateLinkOmit<ExtArgs> | null
    /**
     * The data used to update AffiliateLinks.
     */
    data: XOR<AffiliateLinkUpdateManyMutationInput, AffiliateLinkUncheckedUpdateManyInput>
    /**
     * Filter which AffiliateLinks to update
     */
    where?: AffiliateLinkWhereInput
    /**
     * Limit how many AffiliateLinks to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AffiliateLinkIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AffiliateLink upsert
   */
  export type AffiliateLinkUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AffiliateLink
     */
    select?: AffiliateLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AffiliateLink
     */
    omit?: AffiliateLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AffiliateLinkInclude<ExtArgs> | null
    /**
     * The filter to search for the AffiliateLink to update in case it exists.
     */
    where: AffiliateLinkWhereUniqueInput
    /**
     * In case the AffiliateLink found by the `where` argument doesn't exist, create a new AffiliateLink with this data.
     */
    create: XOR<AffiliateLinkCreateInput, AffiliateLinkUncheckedCreateInput>
    /**
     * In case the AffiliateLink was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AffiliateLinkUpdateInput, AffiliateLinkUncheckedUpdateInput>
  }

  /**
   * AffiliateLink delete
   */
  export type AffiliateLinkDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AffiliateLink
     */
    select?: AffiliateLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AffiliateLink
     */
    omit?: AffiliateLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AffiliateLinkInclude<ExtArgs> | null
    /**
     * Filter which AffiliateLink to delete.
     */
    where: AffiliateLinkWhereUniqueInput
  }

  /**
   * AffiliateLink deleteMany
   */
  export type AffiliateLinkDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AffiliateLinks to delete
     */
    where?: AffiliateLinkWhereInput
    /**
     * Limit how many AffiliateLinks to delete.
     */
    limit?: number
  }

  /**
   * AffiliateLink.clicks
   */
  export type AffiliateLink$clicksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AffiliateClick
     */
    select?: AffiliateClickSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AffiliateClick
     */
    omit?: AffiliateClickOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AffiliateClickInclude<ExtArgs> | null
    where?: AffiliateClickWhereInput
    orderBy?: AffiliateClickOrderByWithRelationInput | AffiliateClickOrderByWithRelationInput[]
    cursor?: AffiliateClickWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AffiliateClickScalarFieldEnum | AffiliateClickScalarFieldEnum[]
  }

  /**
   * AffiliateLink without action
   */
  export type AffiliateLinkDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AffiliateLink
     */
    select?: AffiliateLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AffiliateLink
     */
    omit?: AffiliateLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AffiliateLinkInclude<ExtArgs> | null
  }


  /**
   * Model AffiliateClick
   */

  export type AggregateAffiliateClick = {
    _count: AffiliateClickCountAggregateOutputType | null
    _min: AffiliateClickMinAggregateOutputType | null
    _max: AffiliateClickMaxAggregateOutputType | null
  }

  export type AffiliateClickMinAggregateOutputType = {
    id: string | null
    affiliateId: string | null
    visitorIp: string | null
    userAgent: string | null
    campaign: string | null
    createdAt: Date | null
  }

  export type AffiliateClickMaxAggregateOutputType = {
    id: string | null
    affiliateId: string | null
    visitorIp: string | null
    userAgent: string | null
    campaign: string | null
    createdAt: Date | null
  }

  export type AffiliateClickCountAggregateOutputType = {
    id: number
    affiliateId: number
    visitorIp: number
    userAgent: number
    campaign: number
    createdAt: number
    _all: number
  }


  export type AffiliateClickMinAggregateInputType = {
    id?: true
    affiliateId?: true
    visitorIp?: true
    userAgent?: true
    campaign?: true
    createdAt?: true
  }

  export type AffiliateClickMaxAggregateInputType = {
    id?: true
    affiliateId?: true
    visitorIp?: true
    userAgent?: true
    campaign?: true
    createdAt?: true
  }

  export type AffiliateClickCountAggregateInputType = {
    id?: true
    affiliateId?: true
    visitorIp?: true
    userAgent?: true
    campaign?: true
    createdAt?: true
    _all?: true
  }

  export type AffiliateClickAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AffiliateClick to aggregate.
     */
    where?: AffiliateClickWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AffiliateClicks to fetch.
     */
    orderBy?: AffiliateClickOrderByWithRelationInput | AffiliateClickOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AffiliateClickWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AffiliateClicks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AffiliateClicks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AffiliateClicks
    **/
    _count?: true | AffiliateClickCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AffiliateClickMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AffiliateClickMaxAggregateInputType
  }

  export type GetAffiliateClickAggregateType<T extends AffiliateClickAggregateArgs> = {
        [P in keyof T & keyof AggregateAffiliateClick]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAffiliateClick[P]>
      : GetScalarType<T[P], AggregateAffiliateClick[P]>
  }




  export type AffiliateClickGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AffiliateClickWhereInput
    orderBy?: AffiliateClickOrderByWithAggregationInput | AffiliateClickOrderByWithAggregationInput[]
    by: AffiliateClickScalarFieldEnum[] | AffiliateClickScalarFieldEnum
    having?: AffiliateClickScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AffiliateClickCountAggregateInputType | true
    _min?: AffiliateClickMinAggregateInputType
    _max?: AffiliateClickMaxAggregateInputType
  }

  export type AffiliateClickGroupByOutputType = {
    id: string
    affiliateId: string
    visitorIp: string | null
    userAgent: string | null
    campaign: string | null
    createdAt: Date
    _count: AffiliateClickCountAggregateOutputType | null
    _min: AffiliateClickMinAggregateOutputType | null
    _max: AffiliateClickMaxAggregateOutputType | null
  }

  type GetAffiliateClickGroupByPayload<T extends AffiliateClickGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AffiliateClickGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AffiliateClickGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AffiliateClickGroupByOutputType[P]>
            : GetScalarType<T[P], AffiliateClickGroupByOutputType[P]>
        }
      >
    >


  export type AffiliateClickSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    affiliateId?: boolean
    visitorIp?: boolean
    userAgent?: boolean
    campaign?: boolean
    createdAt?: boolean
    affiliate?: boolean | AffiliateLinkDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["affiliateClick"]>

  export type AffiliateClickSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    affiliateId?: boolean
    visitorIp?: boolean
    userAgent?: boolean
    campaign?: boolean
    createdAt?: boolean
    affiliate?: boolean | AffiliateLinkDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["affiliateClick"]>

  export type AffiliateClickSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    affiliateId?: boolean
    visitorIp?: boolean
    userAgent?: boolean
    campaign?: boolean
    createdAt?: boolean
    affiliate?: boolean | AffiliateLinkDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["affiliateClick"]>

  export type AffiliateClickSelectScalar = {
    id?: boolean
    affiliateId?: boolean
    visitorIp?: boolean
    userAgent?: boolean
    campaign?: boolean
    createdAt?: boolean
  }

  export type AffiliateClickOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "affiliateId" | "visitorIp" | "userAgent" | "campaign" | "createdAt", ExtArgs["result"]["affiliateClick"]>
  export type AffiliateClickInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    affiliate?: boolean | AffiliateLinkDefaultArgs<ExtArgs>
  }
  export type AffiliateClickIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    affiliate?: boolean | AffiliateLinkDefaultArgs<ExtArgs>
  }
  export type AffiliateClickIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    affiliate?: boolean | AffiliateLinkDefaultArgs<ExtArgs>
  }

  export type $AffiliateClickPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AffiliateClick"
    objects: {
      affiliate: Prisma.$AffiliateLinkPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      affiliateId: string
      visitorIp: string | null
      userAgent: string | null
      campaign: string | null
      createdAt: Date
    }, ExtArgs["result"]["affiliateClick"]>
    composites: {}
  }

  type AffiliateClickGetPayload<S extends boolean | null | undefined | AffiliateClickDefaultArgs> = $Result.GetResult<Prisma.$AffiliateClickPayload, S>

  type AffiliateClickCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AffiliateClickFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AffiliateClickCountAggregateInputType | true
    }

  export interface AffiliateClickDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AffiliateClick'], meta: { name: 'AffiliateClick' } }
    /**
     * Find zero or one AffiliateClick that matches the filter.
     * @param {AffiliateClickFindUniqueArgs} args - Arguments to find a AffiliateClick
     * @example
     * // Get one AffiliateClick
     * const affiliateClick = await prisma.affiliateClick.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AffiliateClickFindUniqueArgs>(args: SelectSubset<T, AffiliateClickFindUniqueArgs<ExtArgs>>): Prisma__AffiliateClickClient<$Result.GetResult<Prisma.$AffiliateClickPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AffiliateClick that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AffiliateClickFindUniqueOrThrowArgs} args - Arguments to find a AffiliateClick
     * @example
     * // Get one AffiliateClick
     * const affiliateClick = await prisma.affiliateClick.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AffiliateClickFindUniqueOrThrowArgs>(args: SelectSubset<T, AffiliateClickFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AffiliateClickClient<$Result.GetResult<Prisma.$AffiliateClickPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AffiliateClick that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AffiliateClickFindFirstArgs} args - Arguments to find a AffiliateClick
     * @example
     * // Get one AffiliateClick
     * const affiliateClick = await prisma.affiliateClick.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AffiliateClickFindFirstArgs>(args?: SelectSubset<T, AffiliateClickFindFirstArgs<ExtArgs>>): Prisma__AffiliateClickClient<$Result.GetResult<Prisma.$AffiliateClickPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AffiliateClick that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AffiliateClickFindFirstOrThrowArgs} args - Arguments to find a AffiliateClick
     * @example
     * // Get one AffiliateClick
     * const affiliateClick = await prisma.affiliateClick.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AffiliateClickFindFirstOrThrowArgs>(args?: SelectSubset<T, AffiliateClickFindFirstOrThrowArgs<ExtArgs>>): Prisma__AffiliateClickClient<$Result.GetResult<Prisma.$AffiliateClickPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AffiliateClicks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AffiliateClickFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AffiliateClicks
     * const affiliateClicks = await prisma.affiliateClick.findMany()
     * 
     * // Get first 10 AffiliateClicks
     * const affiliateClicks = await prisma.affiliateClick.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const affiliateClickWithIdOnly = await prisma.affiliateClick.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AffiliateClickFindManyArgs>(args?: SelectSubset<T, AffiliateClickFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AffiliateClickPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AffiliateClick.
     * @param {AffiliateClickCreateArgs} args - Arguments to create a AffiliateClick.
     * @example
     * // Create one AffiliateClick
     * const AffiliateClick = await prisma.affiliateClick.create({
     *   data: {
     *     // ... data to create a AffiliateClick
     *   }
     * })
     * 
     */
    create<T extends AffiliateClickCreateArgs>(args: SelectSubset<T, AffiliateClickCreateArgs<ExtArgs>>): Prisma__AffiliateClickClient<$Result.GetResult<Prisma.$AffiliateClickPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AffiliateClicks.
     * @param {AffiliateClickCreateManyArgs} args - Arguments to create many AffiliateClicks.
     * @example
     * // Create many AffiliateClicks
     * const affiliateClick = await prisma.affiliateClick.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AffiliateClickCreateManyArgs>(args?: SelectSubset<T, AffiliateClickCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AffiliateClicks and returns the data saved in the database.
     * @param {AffiliateClickCreateManyAndReturnArgs} args - Arguments to create many AffiliateClicks.
     * @example
     * // Create many AffiliateClicks
     * const affiliateClick = await prisma.affiliateClick.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AffiliateClicks and only return the `id`
     * const affiliateClickWithIdOnly = await prisma.affiliateClick.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AffiliateClickCreateManyAndReturnArgs>(args?: SelectSubset<T, AffiliateClickCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AffiliateClickPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AffiliateClick.
     * @param {AffiliateClickDeleteArgs} args - Arguments to delete one AffiliateClick.
     * @example
     * // Delete one AffiliateClick
     * const AffiliateClick = await prisma.affiliateClick.delete({
     *   where: {
     *     // ... filter to delete one AffiliateClick
     *   }
     * })
     * 
     */
    delete<T extends AffiliateClickDeleteArgs>(args: SelectSubset<T, AffiliateClickDeleteArgs<ExtArgs>>): Prisma__AffiliateClickClient<$Result.GetResult<Prisma.$AffiliateClickPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AffiliateClick.
     * @param {AffiliateClickUpdateArgs} args - Arguments to update one AffiliateClick.
     * @example
     * // Update one AffiliateClick
     * const affiliateClick = await prisma.affiliateClick.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AffiliateClickUpdateArgs>(args: SelectSubset<T, AffiliateClickUpdateArgs<ExtArgs>>): Prisma__AffiliateClickClient<$Result.GetResult<Prisma.$AffiliateClickPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AffiliateClicks.
     * @param {AffiliateClickDeleteManyArgs} args - Arguments to filter AffiliateClicks to delete.
     * @example
     * // Delete a few AffiliateClicks
     * const { count } = await prisma.affiliateClick.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AffiliateClickDeleteManyArgs>(args?: SelectSubset<T, AffiliateClickDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AffiliateClicks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AffiliateClickUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AffiliateClicks
     * const affiliateClick = await prisma.affiliateClick.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AffiliateClickUpdateManyArgs>(args: SelectSubset<T, AffiliateClickUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AffiliateClicks and returns the data updated in the database.
     * @param {AffiliateClickUpdateManyAndReturnArgs} args - Arguments to update many AffiliateClicks.
     * @example
     * // Update many AffiliateClicks
     * const affiliateClick = await prisma.affiliateClick.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AffiliateClicks and only return the `id`
     * const affiliateClickWithIdOnly = await prisma.affiliateClick.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AffiliateClickUpdateManyAndReturnArgs>(args: SelectSubset<T, AffiliateClickUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AffiliateClickPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AffiliateClick.
     * @param {AffiliateClickUpsertArgs} args - Arguments to update or create a AffiliateClick.
     * @example
     * // Update or create a AffiliateClick
     * const affiliateClick = await prisma.affiliateClick.upsert({
     *   create: {
     *     // ... data to create a AffiliateClick
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AffiliateClick we want to update
     *   }
     * })
     */
    upsert<T extends AffiliateClickUpsertArgs>(args: SelectSubset<T, AffiliateClickUpsertArgs<ExtArgs>>): Prisma__AffiliateClickClient<$Result.GetResult<Prisma.$AffiliateClickPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AffiliateClicks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AffiliateClickCountArgs} args - Arguments to filter AffiliateClicks to count.
     * @example
     * // Count the number of AffiliateClicks
     * const count = await prisma.affiliateClick.count({
     *   where: {
     *     // ... the filter for the AffiliateClicks we want to count
     *   }
     * })
    **/
    count<T extends AffiliateClickCountArgs>(
      args?: Subset<T, AffiliateClickCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AffiliateClickCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AffiliateClick.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AffiliateClickAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AffiliateClickAggregateArgs>(args: Subset<T, AffiliateClickAggregateArgs>): Prisma.PrismaPromise<GetAffiliateClickAggregateType<T>>

    /**
     * Group by AffiliateClick.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AffiliateClickGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AffiliateClickGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AffiliateClickGroupByArgs['orderBy'] }
        : { orderBy?: AffiliateClickGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AffiliateClickGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAffiliateClickGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AffiliateClick model
   */
  readonly fields: AffiliateClickFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AffiliateClick.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AffiliateClickClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    affiliate<T extends AffiliateLinkDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AffiliateLinkDefaultArgs<ExtArgs>>): Prisma__AffiliateLinkClient<$Result.GetResult<Prisma.$AffiliateLinkPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AffiliateClick model
   */
  interface AffiliateClickFieldRefs {
    readonly id: FieldRef<"AffiliateClick", 'String'>
    readonly affiliateId: FieldRef<"AffiliateClick", 'String'>
    readonly visitorIp: FieldRef<"AffiliateClick", 'String'>
    readonly userAgent: FieldRef<"AffiliateClick", 'String'>
    readonly campaign: FieldRef<"AffiliateClick", 'String'>
    readonly createdAt: FieldRef<"AffiliateClick", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AffiliateClick findUnique
   */
  export type AffiliateClickFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AffiliateClick
     */
    select?: AffiliateClickSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AffiliateClick
     */
    omit?: AffiliateClickOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AffiliateClickInclude<ExtArgs> | null
    /**
     * Filter, which AffiliateClick to fetch.
     */
    where: AffiliateClickWhereUniqueInput
  }

  /**
   * AffiliateClick findUniqueOrThrow
   */
  export type AffiliateClickFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AffiliateClick
     */
    select?: AffiliateClickSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AffiliateClick
     */
    omit?: AffiliateClickOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AffiliateClickInclude<ExtArgs> | null
    /**
     * Filter, which AffiliateClick to fetch.
     */
    where: AffiliateClickWhereUniqueInput
  }

  /**
   * AffiliateClick findFirst
   */
  export type AffiliateClickFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AffiliateClick
     */
    select?: AffiliateClickSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AffiliateClick
     */
    omit?: AffiliateClickOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AffiliateClickInclude<ExtArgs> | null
    /**
     * Filter, which AffiliateClick to fetch.
     */
    where?: AffiliateClickWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AffiliateClicks to fetch.
     */
    orderBy?: AffiliateClickOrderByWithRelationInput | AffiliateClickOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AffiliateClicks.
     */
    cursor?: AffiliateClickWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AffiliateClicks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AffiliateClicks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AffiliateClicks.
     */
    distinct?: AffiliateClickScalarFieldEnum | AffiliateClickScalarFieldEnum[]
  }

  /**
   * AffiliateClick findFirstOrThrow
   */
  export type AffiliateClickFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AffiliateClick
     */
    select?: AffiliateClickSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AffiliateClick
     */
    omit?: AffiliateClickOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AffiliateClickInclude<ExtArgs> | null
    /**
     * Filter, which AffiliateClick to fetch.
     */
    where?: AffiliateClickWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AffiliateClicks to fetch.
     */
    orderBy?: AffiliateClickOrderByWithRelationInput | AffiliateClickOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AffiliateClicks.
     */
    cursor?: AffiliateClickWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AffiliateClicks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AffiliateClicks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AffiliateClicks.
     */
    distinct?: AffiliateClickScalarFieldEnum | AffiliateClickScalarFieldEnum[]
  }

  /**
   * AffiliateClick findMany
   */
  export type AffiliateClickFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AffiliateClick
     */
    select?: AffiliateClickSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AffiliateClick
     */
    omit?: AffiliateClickOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AffiliateClickInclude<ExtArgs> | null
    /**
     * Filter, which AffiliateClicks to fetch.
     */
    where?: AffiliateClickWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AffiliateClicks to fetch.
     */
    orderBy?: AffiliateClickOrderByWithRelationInput | AffiliateClickOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AffiliateClicks.
     */
    cursor?: AffiliateClickWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AffiliateClicks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AffiliateClicks.
     */
    skip?: number
    distinct?: AffiliateClickScalarFieldEnum | AffiliateClickScalarFieldEnum[]
  }

  /**
   * AffiliateClick create
   */
  export type AffiliateClickCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AffiliateClick
     */
    select?: AffiliateClickSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AffiliateClick
     */
    omit?: AffiliateClickOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AffiliateClickInclude<ExtArgs> | null
    /**
     * The data needed to create a AffiliateClick.
     */
    data: XOR<AffiliateClickCreateInput, AffiliateClickUncheckedCreateInput>
  }

  /**
   * AffiliateClick createMany
   */
  export type AffiliateClickCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AffiliateClicks.
     */
    data: AffiliateClickCreateManyInput | AffiliateClickCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AffiliateClick createManyAndReturn
   */
  export type AffiliateClickCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AffiliateClick
     */
    select?: AffiliateClickSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AffiliateClick
     */
    omit?: AffiliateClickOmit<ExtArgs> | null
    /**
     * The data used to create many AffiliateClicks.
     */
    data: AffiliateClickCreateManyInput | AffiliateClickCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AffiliateClickIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AffiliateClick update
   */
  export type AffiliateClickUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AffiliateClick
     */
    select?: AffiliateClickSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AffiliateClick
     */
    omit?: AffiliateClickOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AffiliateClickInclude<ExtArgs> | null
    /**
     * The data needed to update a AffiliateClick.
     */
    data: XOR<AffiliateClickUpdateInput, AffiliateClickUncheckedUpdateInput>
    /**
     * Choose, which AffiliateClick to update.
     */
    where: AffiliateClickWhereUniqueInput
  }

  /**
   * AffiliateClick updateMany
   */
  export type AffiliateClickUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AffiliateClicks.
     */
    data: XOR<AffiliateClickUpdateManyMutationInput, AffiliateClickUncheckedUpdateManyInput>
    /**
     * Filter which AffiliateClicks to update
     */
    where?: AffiliateClickWhereInput
    /**
     * Limit how many AffiliateClicks to update.
     */
    limit?: number
  }

  /**
   * AffiliateClick updateManyAndReturn
   */
  export type AffiliateClickUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AffiliateClick
     */
    select?: AffiliateClickSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AffiliateClick
     */
    omit?: AffiliateClickOmit<ExtArgs> | null
    /**
     * The data used to update AffiliateClicks.
     */
    data: XOR<AffiliateClickUpdateManyMutationInput, AffiliateClickUncheckedUpdateManyInput>
    /**
     * Filter which AffiliateClicks to update
     */
    where?: AffiliateClickWhereInput
    /**
     * Limit how many AffiliateClicks to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AffiliateClickIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AffiliateClick upsert
   */
  export type AffiliateClickUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AffiliateClick
     */
    select?: AffiliateClickSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AffiliateClick
     */
    omit?: AffiliateClickOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AffiliateClickInclude<ExtArgs> | null
    /**
     * The filter to search for the AffiliateClick to update in case it exists.
     */
    where: AffiliateClickWhereUniqueInput
    /**
     * In case the AffiliateClick found by the `where` argument doesn't exist, create a new AffiliateClick with this data.
     */
    create: XOR<AffiliateClickCreateInput, AffiliateClickUncheckedCreateInput>
    /**
     * In case the AffiliateClick was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AffiliateClickUpdateInput, AffiliateClickUncheckedUpdateInput>
  }

  /**
   * AffiliateClick delete
   */
  export type AffiliateClickDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AffiliateClick
     */
    select?: AffiliateClickSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AffiliateClick
     */
    omit?: AffiliateClickOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AffiliateClickInclude<ExtArgs> | null
    /**
     * Filter which AffiliateClick to delete.
     */
    where: AffiliateClickWhereUniqueInput
  }

  /**
   * AffiliateClick deleteMany
   */
  export type AffiliateClickDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AffiliateClicks to delete
     */
    where?: AffiliateClickWhereInput
    /**
     * Limit how many AffiliateClicks to delete.
     */
    limit?: number
  }

  /**
   * AffiliateClick without action
   */
  export type AffiliateClickDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AffiliateClick
     */
    select?: AffiliateClickSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AffiliateClick
     */
    omit?: AffiliateClickOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AffiliateClickInclude<ExtArgs> | null
  }


  /**
   * Model Account
   */

  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountAvgAggregateOutputType = {
    expires_at: number | null
  }

  export type AccountSumAggregateOutputType = {
    expires_at: number | null
  }

  export type AccountMinAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
  }

  export type AccountMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
  }

  export type AccountCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    provider: number
    providerAccountId: number
    refresh_token: number
    access_token: number
    expires_at: number
    token_type: number
    scope: number
    id_token: number
    session_state: number
    _all: number
  }


  export type AccountAvgAggregateInputType = {
    expires_at?: true
  }

  export type AccountSumAggregateInputType = {
    expires_at?: true
  }

  export type AccountMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
  }

  export type AccountMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
  }

  export type AccountCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
    _all?: true
  }

  export type AccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Account to aggregate.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithAggregationInput | AccountOrderByWithAggregationInput[]
    by: AccountScalarFieldEnum[] | AccountScalarFieldEnum
    having?: AccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _avg?: AccountAvgAggregateInputType
    _sum?: AccountSumAggregateInputType
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }

  export type AccountGroupByOutputType = {
    id: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type AccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectScalar = {
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
  }

  export type AccountOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "type" | "provider" | "providerAccountId" | "refresh_token" | "access_token" | "expires_at" | "token_type" | "scope" | "id_token" | "session_state", ExtArgs["result"]["account"]>
  export type AccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AccountIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AccountIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Account"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      type: string
      provider: string
      providerAccountId: string
      refresh_token: string | null
      access_token: string | null
      expires_at: number | null
      token_type: string | null
      scope: string | null
      id_token: string | null
      session_state: string | null
    }, ExtArgs["result"]["account"]>
    composites: {}
  }

  type AccountGetPayload<S extends boolean | null | undefined | AccountDefaultArgs> = $Result.GetResult<Prisma.$AccountPayload, S>

  type AccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AccountFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AccountCountAggregateInputType | true
    }

  export interface AccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Account'], meta: { name: 'Account' } }
    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccountFindUniqueArgs>(args: SelectSubset<T, AccountFindUniqueArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Account that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs>(args: SelectSubset<T, AccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccountFindFirstArgs>(args?: SelectSubset<T, AccountFindFirstArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Account that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccountFindFirstOrThrowArgs>(args?: SelectSubset<T, AccountFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AccountFindManyArgs>(args?: SelectSubset<T, AccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
     */
    create<T extends AccountCreateArgs>(args: SelectSubset<T, AccountCreateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Accounts.
     * @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccountCreateManyArgs>(args?: SelectSubset<T, AccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Accounts and returns the data saved in the database.
     * @param {AccountCreateManyAndReturnArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Accounts and only return the `id`
     * const accountWithIdOnly = await prisma.account.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AccountCreateManyAndReturnArgs>(args?: SelectSubset<T, AccountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
     */
    delete<T extends AccountDeleteArgs>(args: SelectSubset<T, AccountDeleteArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccountUpdateArgs>(args: SelectSubset<T, AccountUpdateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccountDeleteManyArgs>(args?: SelectSubset<T, AccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccountUpdateManyArgs>(args: SelectSubset<T, AccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts and returns the data updated in the database.
     * @param {AccountUpdateManyAndReturnArgs} args - Arguments to update many Accounts.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Accounts and only return the `id`
     * const accountWithIdOnly = await prisma.account.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AccountUpdateManyAndReturnArgs>(args: SelectSubset<T, AccountUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
     */
    upsert<T extends AccountUpsertArgs>(args: SelectSubset<T, AccountUpsertArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): Prisma.PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Account model
   */
  readonly fields: AccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Account model
   */
  interface AccountFieldRefs {
    readonly id: FieldRef<"Account", 'String'>
    readonly userId: FieldRef<"Account", 'String'>
    readonly type: FieldRef<"Account", 'String'>
    readonly provider: FieldRef<"Account", 'String'>
    readonly providerAccountId: FieldRef<"Account", 'String'>
    readonly refresh_token: FieldRef<"Account", 'String'>
    readonly access_token: FieldRef<"Account", 'String'>
    readonly expires_at: FieldRef<"Account", 'Int'>
    readonly token_type: FieldRef<"Account", 'String'>
    readonly scope: FieldRef<"Account", 'String'>
    readonly id_token: FieldRef<"Account", 'String'>
    readonly session_state: FieldRef<"Account", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Account findUnique
   */
  export type AccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findUniqueOrThrow
   */
  export type AccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findFirst
   */
  export type AccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findFirstOrThrow
   */
  export type AccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findMany
   */
  export type AccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Accounts to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account create
   */
  export type AccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to create a Account.
     */
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
  }

  /**
   * Account createMany
   */
  export type AccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Account createManyAndReturn
   */
  export type AccountCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account update
   */
  export type AccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to update a Account.
     */
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    /**
     * Choose, which Account to update.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to update.
     */
    limit?: number
  }

  /**
   * Account updateManyAndReturn
   */
  export type AccountUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account upsert
   */
  export type AccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The filter to search for the Account to update in case it exists.
     */
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     */
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
  }

  /**
   * Account delete
   */
  export type AccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter which Account to delete.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Accounts to delete
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to delete.
     */
    limit?: number
  }

  /**
   * Account without action
   */
  export type AccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
  }


  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    sessionToken: string | null
    userId: string | null
    expires: Date | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    sessionToken: string | null
    userId: string | null
    expires: Date | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    sessionToken: number
    userId: number
    expires: number
    _all: number
  }


  export type SessionMinAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    id: string
    sessionToken: string
    userId: string
    expires: Date
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
  }

  export type SessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "sessionToken" | "userId" | "expires", ExtArgs["result"]["session"]>
  export type SessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      sessionToken: string
      userId: string
      expires: Date
    }, ExtArgs["result"]["session"]>
    composites: {}
  }

  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionFindUniqueArgs>(args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Session that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionFindFirstArgs>(args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionFindManyArgs>(args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
     */
    create<T extends SessionCreateArgs>(args: SelectSubset<T, SessionCreateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sessions.
     * @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionCreateManyArgs>(args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sessions and returns the data saved in the database.
     * @param {SessionCreateManyAndReturnArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
     */
    delete<T extends SessionDeleteArgs>(args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionUpdateArgs>(args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionDeleteManyArgs>(args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionUpdateManyArgs>(args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions and returns the data updated in the database.
     * @param {SessionUpdateManyAndReturnArgs} args - Arguments to update many Sessions.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SessionUpdateManyAndReturnArgs>(args: SelectSubset<T, SessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
     */
    upsert<T extends SessionUpsertArgs>(args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Session model
   */
  interface SessionFieldRefs {
    readonly id: FieldRef<"Session", 'String'>
    readonly sessionToken: FieldRef<"Session", 'String'>
    readonly userId: FieldRef<"Session", 'String'>
    readonly expires: FieldRef<"Session", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }

  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Session createManyAndReturn
   */
  export type SessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
  }

  /**
   * Session updateManyAndReturn
   */
  export type SessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }

  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to delete.
     */
    limit?: number
  }

  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
  }


  /**
   * Model VerificationToken
   */

  export type AggregateVerificationToken = {
    _count: VerificationTokenCountAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  export type VerificationTokenMinAggregateOutputType = {
    identifier: string | null
    token: string | null
    expires: Date | null
  }

  export type VerificationTokenMaxAggregateOutputType = {
    identifier: string | null
    token: string | null
    expires: Date | null
  }

  export type VerificationTokenCountAggregateOutputType = {
    identifier: number
    token: number
    expires: number
    _all: number
  }


  export type VerificationTokenMinAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
  }

  export type VerificationTokenMaxAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
  }

  export type VerificationTokenCountAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
    _all?: true
  }

  export type VerificationTokenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VerificationToken to aggregate.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VerificationTokens
    **/
    _count?: true | VerificationTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VerificationTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VerificationTokenMaxAggregateInputType
  }

  export type GetVerificationTokenAggregateType<T extends VerificationTokenAggregateArgs> = {
        [P in keyof T & keyof AggregateVerificationToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVerificationToken[P]>
      : GetScalarType<T[P], AggregateVerificationToken[P]>
  }




  export type VerificationTokenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VerificationTokenWhereInput
    orderBy?: VerificationTokenOrderByWithAggregationInput | VerificationTokenOrderByWithAggregationInput[]
    by: VerificationTokenScalarFieldEnum[] | VerificationTokenScalarFieldEnum
    having?: VerificationTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VerificationTokenCountAggregateInputType | true
    _min?: VerificationTokenMinAggregateInputType
    _max?: VerificationTokenMaxAggregateInputType
  }

  export type VerificationTokenGroupByOutputType = {
    identifier: string
    token: string
    expires: Date
    _count: VerificationTokenCountAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  type GetVerificationTokenGroupByPayload<T extends VerificationTokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VerificationTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VerificationTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
            : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
        }
      >
    >


  export type VerificationTokenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }, ExtArgs["result"]["verificationToken"]>

  export type VerificationTokenSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }, ExtArgs["result"]["verificationToken"]>

  export type VerificationTokenSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }, ExtArgs["result"]["verificationToken"]>

  export type VerificationTokenSelectScalar = {
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }

  export type VerificationTokenOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"identifier" | "token" | "expires", ExtArgs["result"]["verificationToken"]>

  export type $VerificationTokenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "VerificationToken"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      identifier: string
      token: string
      expires: Date
    }, ExtArgs["result"]["verificationToken"]>
    composites: {}
  }

  type VerificationTokenGetPayload<S extends boolean | null | undefined | VerificationTokenDefaultArgs> = $Result.GetResult<Prisma.$VerificationTokenPayload, S>

  type VerificationTokenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VerificationTokenFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VerificationTokenCountAggregateInputType | true
    }

  export interface VerificationTokenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VerificationToken'], meta: { name: 'VerificationToken' } }
    /**
     * Find zero or one VerificationToken that matches the filter.
     * @param {VerificationTokenFindUniqueArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VerificationTokenFindUniqueArgs>(args: SelectSubset<T, VerificationTokenFindUniqueArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one VerificationToken that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VerificationTokenFindUniqueOrThrowArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VerificationTokenFindUniqueOrThrowArgs>(args: SelectSubset<T, VerificationTokenFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VerificationToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindFirstArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VerificationTokenFindFirstArgs>(args?: SelectSubset<T, VerificationTokenFindFirstArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VerificationToken that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindFirstOrThrowArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VerificationTokenFindFirstOrThrowArgs>(args?: SelectSubset<T, VerificationTokenFindFirstOrThrowArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more VerificationTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany()
     * 
     * // Get first 10 VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany({ take: 10 })
     * 
     * // Only select the `identifier`
     * const verificationTokenWithIdentifierOnly = await prisma.verificationToken.findMany({ select: { identifier: true } })
     * 
     */
    findMany<T extends VerificationTokenFindManyArgs>(args?: SelectSubset<T, VerificationTokenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a VerificationToken.
     * @param {VerificationTokenCreateArgs} args - Arguments to create a VerificationToken.
     * @example
     * // Create one VerificationToken
     * const VerificationToken = await prisma.verificationToken.create({
     *   data: {
     *     // ... data to create a VerificationToken
     *   }
     * })
     * 
     */
    create<T extends VerificationTokenCreateArgs>(args: SelectSubset<T, VerificationTokenCreateArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many VerificationTokens.
     * @param {VerificationTokenCreateManyArgs} args - Arguments to create many VerificationTokens.
     * @example
     * // Create many VerificationTokens
     * const verificationToken = await prisma.verificationToken.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VerificationTokenCreateManyArgs>(args?: SelectSubset<T, VerificationTokenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many VerificationTokens and returns the data saved in the database.
     * @param {VerificationTokenCreateManyAndReturnArgs} args - Arguments to create many VerificationTokens.
     * @example
     * // Create many VerificationTokens
     * const verificationToken = await prisma.verificationToken.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many VerificationTokens and only return the `identifier`
     * const verificationTokenWithIdentifierOnly = await prisma.verificationToken.createManyAndReturn({
     *   select: { identifier: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VerificationTokenCreateManyAndReturnArgs>(args?: SelectSubset<T, VerificationTokenCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a VerificationToken.
     * @param {VerificationTokenDeleteArgs} args - Arguments to delete one VerificationToken.
     * @example
     * // Delete one VerificationToken
     * const VerificationToken = await prisma.verificationToken.delete({
     *   where: {
     *     // ... filter to delete one VerificationToken
     *   }
     * })
     * 
     */
    delete<T extends VerificationTokenDeleteArgs>(args: SelectSubset<T, VerificationTokenDeleteArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one VerificationToken.
     * @param {VerificationTokenUpdateArgs} args - Arguments to update one VerificationToken.
     * @example
     * // Update one VerificationToken
     * const verificationToken = await prisma.verificationToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VerificationTokenUpdateArgs>(args: SelectSubset<T, VerificationTokenUpdateArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more VerificationTokens.
     * @param {VerificationTokenDeleteManyArgs} args - Arguments to filter VerificationTokens to delete.
     * @example
     * // Delete a few VerificationTokens
     * const { count } = await prisma.verificationToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VerificationTokenDeleteManyArgs>(args?: SelectSubset<T, VerificationTokenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VerificationTokens
     * const verificationToken = await prisma.verificationToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VerificationTokenUpdateManyArgs>(args: SelectSubset<T, VerificationTokenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VerificationTokens and returns the data updated in the database.
     * @param {VerificationTokenUpdateManyAndReturnArgs} args - Arguments to update many VerificationTokens.
     * @example
     * // Update many VerificationTokens
     * const verificationToken = await prisma.verificationToken.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more VerificationTokens and only return the `identifier`
     * const verificationTokenWithIdentifierOnly = await prisma.verificationToken.updateManyAndReturn({
     *   select: { identifier: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends VerificationTokenUpdateManyAndReturnArgs>(args: SelectSubset<T, VerificationTokenUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one VerificationToken.
     * @param {VerificationTokenUpsertArgs} args - Arguments to update or create a VerificationToken.
     * @example
     * // Update or create a VerificationToken
     * const verificationToken = await prisma.verificationToken.upsert({
     *   create: {
     *     // ... data to create a VerificationToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VerificationToken we want to update
     *   }
     * })
     */
    upsert<T extends VerificationTokenUpsertArgs>(args: SelectSubset<T, VerificationTokenUpsertArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenCountArgs} args - Arguments to filter VerificationTokens to count.
     * @example
     * // Count the number of VerificationTokens
     * const count = await prisma.verificationToken.count({
     *   where: {
     *     // ... the filter for the VerificationTokens we want to count
     *   }
     * })
    **/
    count<T extends VerificationTokenCountArgs>(
      args?: Subset<T, VerificationTokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VerificationTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VerificationTokenAggregateArgs>(args: Subset<T, VerificationTokenAggregateArgs>): Prisma.PrismaPromise<GetVerificationTokenAggregateType<T>>

    /**
     * Group by VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VerificationTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VerificationTokenGroupByArgs['orderBy'] }
        : { orderBy?: VerificationTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VerificationTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVerificationTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VerificationToken model
   */
  readonly fields: VerificationTokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VerificationToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VerificationTokenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the VerificationToken model
   */
  interface VerificationTokenFieldRefs {
    readonly identifier: FieldRef<"VerificationToken", 'String'>
    readonly token: FieldRef<"VerificationToken", 'String'>
    readonly expires: FieldRef<"VerificationToken", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * VerificationToken findUnique
   */
  export type VerificationTokenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken findUniqueOrThrow
   */
  export type VerificationTokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken findFirst
   */
  export type VerificationTokenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationTokens.
     */
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken findFirstOrThrow
   */
  export type VerificationTokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationTokens.
     */
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken findMany
   */
  export type VerificationTokenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationTokens to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken create
   */
  export type VerificationTokenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The data needed to create a VerificationToken.
     */
    data: XOR<VerificationTokenCreateInput, VerificationTokenUncheckedCreateInput>
  }

  /**
   * VerificationToken createMany
   */
  export type VerificationTokenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VerificationTokens.
     */
    data: VerificationTokenCreateManyInput | VerificationTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VerificationToken createManyAndReturn
   */
  export type VerificationTokenCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The data used to create many VerificationTokens.
     */
    data: VerificationTokenCreateManyInput | VerificationTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VerificationToken update
   */
  export type VerificationTokenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The data needed to update a VerificationToken.
     */
    data: XOR<VerificationTokenUpdateInput, VerificationTokenUncheckedUpdateInput>
    /**
     * Choose, which VerificationToken to update.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken updateMany
   */
  export type VerificationTokenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VerificationTokens.
     */
    data: XOR<VerificationTokenUpdateManyMutationInput, VerificationTokenUncheckedUpdateManyInput>
    /**
     * Filter which VerificationTokens to update
     */
    where?: VerificationTokenWhereInput
    /**
     * Limit how many VerificationTokens to update.
     */
    limit?: number
  }

  /**
   * VerificationToken updateManyAndReturn
   */
  export type VerificationTokenUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The data used to update VerificationTokens.
     */
    data: XOR<VerificationTokenUpdateManyMutationInput, VerificationTokenUncheckedUpdateManyInput>
    /**
     * Filter which VerificationTokens to update
     */
    where?: VerificationTokenWhereInput
    /**
     * Limit how many VerificationTokens to update.
     */
    limit?: number
  }

  /**
   * VerificationToken upsert
   */
  export type VerificationTokenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The filter to search for the VerificationToken to update in case it exists.
     */
    where: VerificationTokenWhereUniqueInput
    /**
     * In case the VerificationToken found by the `where` argument doesn't exist, create a new VerificationToken with this data.
     */
    create: XOR<VerificationTokenCreateInput, VerificationTokenUncheckedCreateInput>
    /**
     * In case the VerificationToken was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VerificationTokenUpdateInput, VerificationTokenUncheckedUpdateInput>
  }

  /**
   * VerificationToken delete
   */
  export type VerificationTokenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter which VerificationToken to delete.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken deleteMany
   */
  export type VerificationTokenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VerificationTokens to delete
     */
    where?: VerificationTokenWhereInput
    /**
     * Limit how many VerificationTokens to delete.
     */
    limit?: number
  }

  /**
   * VerificationToken without action
   */
  export type VerificationTokenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password: 'password',
    image: 'image',
    emailVerified: 'emailVerified',
    role: 'role',
    metadata: 'metadata',
    createdAt: 'createdAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const OrganizationScalarFieldEnum: {
    id: 'id',
    name: 'name',
    subdomain: 'subdomain',
    billingPlan: 'billingPlan',
    createdAt: 'createdAt'
  };

  export type OrganizationScalarFieldEnum = (typeof OrganizationScalarFieldEnum)[keyof typeof OrganizationScalarFieldEnum]


  export const OrganizationMembershipScalarFieldEnum: {
    id: 'id',
    organizationId: 'organizationId',
    userId: 'userId',
    role: 'role'
  };

  export type OrganizationMembershipScalarFieldEnum = (typeof OrganizationMembershipScalarFieldEnum)[keyof typeof OrganizationMembershipScalarFieldEnum]


  export const ClientScalarFieldEnum: {
    id: 'id',
    organizationId: 'organizationId',
    name: 'name',
    email: 'email',
    phone: 'phone',
    company: 'company',
    stage: 'stage',
    valueUsd: 'valueUsd',
    isPaid: 'isPaid',
    isOnboarded: 'isOnboarded',
    competitors: 'competitors',
    notes: 'notes',
    createdAt: 'createdAt',
    assignedToMembershipId: 'assignedToMembershipId'
  };

  export type ClientScalarFieldEnum = (typeof ClientScalarFieldEnum)[keyof typeof ClientScalarFieldEnum]


  export const InteractionScalarFieldEnum: {
    id: 'id',
    date: 'date',
    type: 'type',
    summary: 'summary',
    clientId: 'clientId'
  };

  export type InteractionScalarFieldEnum = (typeof InteractionScalarFieldEnum)[keyof typeof InteractionScalarFieldEnum]


  export const PipelineScalarFieldEnum: {
    id: 'id',
    organizationId: 'organizationId',
    name: 'name',
    createdAt: 'createdAt'
  };

  export type PipelineScalarFieldEnum = (typeof PipelineScalarFieldEnum)[keyof typeof PipelineScalarFieldEnum]


  export const PipelineStageModelScalarFieldEnum: {
    id: 'id',
    pipelineId: 'pipelineId',
    name: 'name',
    position: 'position'
  };

  export type PipelineStageModelScalarFieldEnum = (typeof PipelineStageModelScalarFieldEnum)[keyof typeof PipelineStageModelScalarFieldEnum]


  export const PipelineCardScalarFieldEnum: {
    id: 'id',
    organizationId: 'organizationId',
    pipelineId: 'pipelineId',
    stageId: 'stageId',
    clientId: 'clientId',
    title: 'title',
    value: 'value',
    metadata: 'metadata',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PipelineCardScalarFieldEnum = (typeof PipelineCardScalarFieldEnum)[keyof typeof PipelineCardScalarFieldEnum]


  export const EmailTemplateScalarFieldEnum: {
    id: 'id',
    organizationId: 'organizationId',
    name: 'name',
    subject: 'subject',
    html: 'html',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type EmailTemplateScalarFieldEnum = (typeof EmailTemplateScalarFieldEnum)[keyof typeof EmailTemplateScalarFieldEnum]


  export const EmailSequenceScalarFieldEnum: {
    id: 'id',
    organizationId: 'organizationId',
    name: 'name',
    sent: 'sent',
    opens: 'opens',
    clicks: 'clicks',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type EmailSequenceScalarFieldEnum = (typeof EmailSequenceScalarFieldEnum)[keyof typeof EmailSequenceScalarFieldEnum]


  export const EmailStepScalarFieldEnum: {
    id: 'id',
    subject: 'subject',
    body: 'body',
    delayDays: 'delayDays',
    sequenceId: 'sequenceId'
  };

  export type EmailStepScalarFieldEnum = (typeof EmailStepScalarFieldEnum)[keyof typeof EmailStepScalarFieldEnum]


  export const SequenceTargetScalarFieldEnum: {
    sequenceId: 'sequenceId',
    clientId: 'clientId'
  };

  export type SequenceTargetScalarFieldEnum = (typeof SequenceTargetScalarFieldEnum)[keyof typeof SequenceTargetScalarFieldEnum]


  export const EmailEventScalarFieldEnum: {
    id: 'id',
    sequenceId: 'sequenceId',
    clientId: 'clientId',
    type: 'type',
    metadata: 'metadata',
    createdAt: 'createdAt'
  };

  export type EmailEventScalarFieldEnum = (typeof EmailEventScalarFieldEnum)[keyof typeof EmailEventScalarFieldEnum]


  export const InvoiceScalarFieldEnum: {
    id: 'id',
    organizationId: 'organizationId',
    clientId: 'clientId',
    amountUsd: 'amountUsd',
    status: 'status',
    dueDate: 'dueDate',
    createdAt: 'createdAt'
  };

  export type InvoiceScalarFieldEnum = (typeof InvoiceScalarFieldEnum)[keyof typeof InvoiceScalarFieldEnum]


  export const TransactionScalarFieldEnum: {
    id: 'id',
    invoiceId: 'invoiceId',
    organizationId: 'organizationId',
    amount: 'amount',
    currency: 'currency',
    gateway: 'gateway',
    gatewayPayload: 'gatewayPayload',
    createdAt: 'createdAt'
  };

  export type TransactionScalarFieldEnum = (typeof TransactionScalarFieldEnum)[keyof typeof TransactionScalarFieldEnum]


  export const SubscriptionScalarFieldEnum: {
    id: 'id',
    organizationId: 'organizationId',
    clientId: 'clientId',
    status: 'status',
    priceId: 'priceId',
    subscriptionId: 'subscriptionId',
    currentPeriodEnd: 'currentPeriodEnd',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SubscriptionScalarFieldEnum = (typeof SubscriptionScalarFieldEnum)[keyof typeof SubscriptionScalarFieldEnum]


  export const CalendarEventScalarFieldEnum: {
    id: 'id',
    organizationId: 'organizationId',
    title: 'title',
    start: 'start',
    end: 'end',
    level: 'level',
    description: 'description',
    createdById: 'createdById',
    createdAt: 'createdAt',
    type: 'type',
    allDay: 'allDay',
    location: 'location',
    reminders: 'reminders',
    completed: 'completed',
    seriesId: 'seriesId',
    metadata: 'metadata'
  };

  export type CalendarEventScalarFieldEnum = (typeof CalendarEventScalarFieldEnum)[keyof typeof CalendarEventScalarFieldEnum]


  export const CampaignScalarFieldEnum: {
    id: 'id',
    clientId: 'clientId',
    name: 'name',
    startDate: 'startDate',
    endDate: 'endDate',
    status: 'status',
    metrics: 'metrics'
  };

  export type CampaignScalarFieldEnum = (typeof CampaignScalarFieldEnum)[keyof typeof CampaignScalarFieldEnum]


  export const MindMapScalarFieldEnum: {
    id: 'id',
    organizationId: 'organizationId',
    ownerUserId: 'ownerUserId',
    data: 'data',
    createdAt: 'createdAt'
  };

  export type MindMapScalarFieldEnum = (typeof MindMapScalarFieldEnum)[keyof typeof MindMapScalarFieldEnum]


  export const AffiliateLinkScalarFieldEnum: {
    id: 'id',
    organizationId: 'organizationId',
    userId: 'userId',
    code: 'code',
    commissionRate: 'commissionRate',
    createdAt: 'createdAt'
  };

  export type AffiliateLinkScalarFieldEnum = (typeof AffiliateLinkScalarFieldEnum)[keyof typeof AffiliateLinkScalarFieldEnum]


  export const AffiliateClickScalarFieldEnum: {
    id: 'id',
    affiliateId: 'affiliateId',
    visitorIp: 'visitorIp',
    userAgent: 'userAgent',
    campaign: 'campaign',
    createdAt: 'createdAt'
  };

  export type AffiliateClickScalarFieldEnum = (typeof AffiliateClickScalarFieldEnum)[keyof typeof AffiliateClickScalarFieldEnum]


  export const AccountScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    provider: 'provider',
    providerAccountId: 'providerAccountId',
    refresh_token: 'refresh_token',
    access_token: 'access_token',
    expires_at: 'expires_at',
    token_type: 'token_type',
    scope: 'scope',
    id_token: 'id_token',
    session_state: 'session_state'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    sessionToken: 'sessionToken',
    userId: 'userId',
    expires: 'expires'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const VerificationTokenScalarFieldEnum: {
    identifier: 'identifier',
    token: 'token',
    expires: 'expires'
  };

  export type VerificationTokenScalarFieldEnum = (typeof VerificationTokenScalarFieldEnum)[keyof typeof VerificationTokenScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'OrgRole'
   */
  export type EnumOrgRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OrgRole'>
    


  /**
   * Reference to a field of type 'OrgRole[]'
   */
  export type ListEnumOrgRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OrgRole[]'>
    


  /**
   * Reference to a field of type 'PipelineStage'
   */
  export type EnumPipelineStageFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PipelineStage'>
    


  /**
   * Reference to a field of type 'PipelineStage[]'
   */
  export type ListEnumPipelineStageFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PipelineStage[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'InteractionType'
   */
  export type EnumInteractionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'InteractionType'>
    


  /**
   * Reference to a field of type 'InteractionType[]'
   */
  export type ListEnumInteractionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'InteractionType[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'InvoiceStatus'
   */
  export type EnumInvoiceStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'InvoiceStatus'>
    


  /**
   * Reference to a field of type 'InvoiceStatus[]'
   */
  export type ListEnumInvoiceStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'InvoiceStatus[]'>
    


  /**
   * Reference to a field of type 'CalendarItemType'
   */
  export type EnumCalendarItemTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CalendarItemType'>
    


  /**
   * Reference to a field of type 'CalendarItemType[]'
   */
  export type ListEnumCalendarItemTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CalendarItemType[]'>
    


  /**
   * Reference to a field of type 'CampaignStatus'
   */
  export type EnumCampaignStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CampaignStatus'>
    


  /**
   * Reference to a field of type 'CampaignStatus[]'
   */
  export type ListEnumCampaignStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CampaignStatus[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    email?: StringFilter<"User"> | string
    password?: StringNullableFilter<"User"> | string | null
    image?: StringNullableFilter<"User"> | string | null
    emailVerified?: DateTimeNullableFilter<"User"> | Date | string | null
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    metadata?: JsonNullableFilter<"User">
    createdAt?: DateTimeFilter<"User"> | Date | string
    accounts?: AccountListRelationFilter
    sessions?: SessionListRelationFilter
    memberships?: OrganizationMembershipListRelationFilter
    assignedClients?: ClientListRelationFilter
    mindmaps?: MindMapListRelationFilter
    affiliateLinks?: AffiliateLinkListRelationFilter
    calendarEvents?: CalendarEventListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    email?: SortOrder
    password?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    emailVerified?: SortOrderInput | SortOrder
    role?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    accounts?: AccountOrderByRelationAggregateInput
    sessions?: SessionOrderByRelationAggregateInput
    memberships?: OrganizationMembershipOrderByRelationAggregateInput
    assignedClients?: ClientOrderByRelationAggregateInput
    mindmaps?: MindMapOrderByRelationAggregateInput
    affiliateLinks?: AffiliateLinkOrderByRelationAggregateInput
    calendarEvents?: CalendarEventOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringNullableFilter<"User"> | string | null
    password?: StringNullableFilter<"User"> | string | null
    image?: StringNullableFilter<"User"> | string | null
    emailVerified?: DateTimeNullableFilter<"User"> | Date | string | null
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    metadata?: JsonNullableFilter<"User">
    createdAt?: DateTimeFilter<"User"> | Date | string
    accounts?: AccountListRelationFilter
    sessions?: SessionListRelationFilter
    memberships?: OrganizationMembershipListRelationFilter
    assignedClients?: ClientListRelationFilter
    mindmaps?: MindMapListRelationFilter
    affiliateLinks?: AffiliateLinkListRelationFilter
    calendarEvents?: CalendarEventListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    email?: SortOrder
    password?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    emailVerified?: SortOrderInput | SortOrder
    role?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringNullableWithAggregatesFilter<"User"> | string | null
    image?: StringNullableWithAggregatesFilter<"User"> | string | null
    emailVerified?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    role?: EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole
    metadata?: JsonNullableWithAggregatesFilter<"User">
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type OrganizationWhereInput = {
    AND?: OrganizationWhereInput | OrganizationWhereInput[]
    OR?: OrganizationWhereInput[]
    NOT?: OrganizationWhereInput | OrganizationWhereInput[]
    id?: StringFilter<"Organization"> | string
    name?: StringFilter<"Organization"> | string
    subdomain?: StringNullableFilter<"Organization"> | string | null
    billingPlan?: StringNullableFilter<"Organization"> | string | null
    createdAt?: DateTimeFilter<"Organization"> | Date | string
    memberships?: OrganizationMembershipListRelationFilter
    clients?: ClientListRelationFilter
    pipelines?: PipelineListRelationFilter
    invoices?: InvoiceListRelationFilter
    mindmaps?: MindMapListRelationFilter
    affiliateLinks?: AffiliateLinkListRelationFilter
    pipelineCards?: PipelineCardListRelationFilter
    transactions?: TransactionListRelationFilter
    subscriptions?: SubscriptionListRelationFilter
    emailSequences?: EmailSequenceListRelationFilter
    emailTemplates?: EmailTemplateListRelationFilter
    calendarEvents?: CalendarEventListRelationFilter
  }

  export type OrganizationOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    subdomain?: SortOrderInput | SortOrder
    billingPlan?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    memberships?: OrganizationMembershipOrderByRelationAggregateInput
    clients?: ClientOrderByRelationAggregateInput
    pipelines?: PipelineOrderByRelationAggregateInput
    invoices?: InvoiceOrderByRelationAggregateInput
    mindmaps?: MindMapOrderByRelationAggregateInput
    affiliateLinks?: AffiliateLinkOrderByRelationAggregateInput
    pipelineCards?: PipelineCardOrderByRelationAggregateInput
    transactions?: TransactionOrderByRelationAggregateInput
    subscriptions?: SubscriptionOrderByRelationAggregateInput
    emailSequences?: EmailSequenceOrderByRelationAggregateInput
    emailTemplates?: EmailTemplateOrderByRelationAggregateInput
    calendarEvents?: CalendarEventOrderByRelationAggregateInput
  }

  export type OrganizationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    subdomain?: string
    AND?: OrganizationWhereInput | OrganizationWhereInput[]
    OR?: OrganizationWhereInput[]
    NOT?: OrganizationWhereInput | OrganizationWhereInput[]
    name?: StringFilter<"Organization"> | string
    billingPlan?: StringNullableFilter<"Organization"> | string | null
    createdAt?: DateTimeFilter<"Organization"> | Date | string
    memberships?: OrganizationMembershipListRelationFilter
    clients?: ClientListRelationFilter
    pipelines?: PipelineListRelationFilter
    invoices?: InvoiceListRelationFilter
    mindmaps?: MindMapListRelationFilter
    affiliateLinks?: AffiliateLinkListRelationFilter
    pipelineCards?: PipelineCardListRelationFilter
    transactions?: TransactionListRelationFilter
    subscriptions?: SubscriptionListRelationFilter
    emailSequences?: EmailSequenceListRelationFilter
    emailTemplates?: EmailTemplateListRelationFilter
    calendarEvents?: CalendarEventListRelationFilter
  }, "id" | "subdomain">

  export type OrganizationOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    subdomain?: SortOrderInput | SortOrder
    billingPlan?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: OrganizationCountOrderByAggregateInput
    _max?: OrganizationMaxOrderByAggregateInput
    _min?: OrganizationMinOrderByAggregateInput
  }

  export type OrganizationScalarWhereWithAggregatesInput = {
    AND?: OrganizationScalarWhereWithAggregatesInput | OrganizationScalarWhereWithAggregatesInput[]
    OR?: OrganizationScalarWhereWithAggregatesInput[]
    NOT?: OrganizationScalarWhereWithAggregatesInput | OrganizationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Organization"> | string
    name?: StringWithAggregatesFilter<"Organization"> | string
    subdomain?: StringNullableWithAggregatesFilter<"Organization"> | string | null
    billingPlan?: StringNullableWithAggregatesFilter<"Organization"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Organization"> | Date | string
  }

  export type OrganizationMembershipWhereInput = {
    AND?: OrganizationMembershipWhereInput | OrganizationMembershipWhereInput[]
    OR?: OrganizationMembershipWhereInput[]
    NOT?: OrganizationMembershipWhereInput | OrganizationMembershipWhereInput[]
    id?: StringFilter<"OrganizationMembership"> | string
    organizationId?: StringFilter<"OrganizationMembership"> | string
    userId?: StringFilter<"OrganizationMembership"> | string
    role?: EnumOrgRoleFilter<"OrganizationMembership"> | $Enums.OrgRole
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    Client?: ClientListRelationFilter
  }

  export type OrganizationMembershipOrderByWithRelationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    organization?: OrganizationOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    Client?: ClientOrderByRelationAggregateInput
  }

  export type OrganizationMembershipWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    organizationId_userId?: OrganizationMembershipOrganizationIdUserIdCompoundUniqueInput
    AND?: OrganizationMembershipWhereInput | OrganizationMembershipWhereInput[]
    OR?: OrganizationMembershipWhereInput[]
    NOT?: OrganizationMembershipWhereInput | OrganizationMembershipWhereInput[]
    organizationId?: StringFilter<"OrganizationMembership"> | string
    userId?: StringFilter<"OrganizationMembership"> | string
    role?: EnumOrgRoleFilter<"OrganizationMembership"> | $Enums.OrgRole
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    Client?: ClientListRelationFilter
  }, "id" | "organizationId_userId">

  export type OrganizationMembershipOrderByWithAggregationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    _count?: OrganizationMembershipCountOrderByAggregateInput
    _max?: OrganizationMembershipMaxOrderByAggregateInput
    _min?: OrganizationMembershipMinOrderByAggregateInput
  }

  export type OrganizationMembershipScalarWhereWithAggregatesInput = {
    AND?: OrganizationMembershipScalarWhereWithAggregatesInput | OrganizationMembershipScalarWhereWithAggregatesInput[]
    OR?: OrganizationMembershipScalarWhereWithAggregatesInput[]
    NOT?: OrganizationMembershipScalarWhereWithAggregatesInput | OrganizationMembershipScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"OrganizationMembership"> | string
    organizationId?: StringWithAggregatesFilter<"OrganizationMembership"> | string
    userId?: StringWithAggregatesFilter<"OrganizationMembership"> | string
    role?: EnumOrgRoleWithAggregatesFilter<"OrganizationMembership"> | $Enums.OrgRole
  }

  export type ClientWhereInput = {
    AND?: ClientWhereInput | ClientWhereInput[]
    OR?: ClientWhereInput[]
    NOT?: ClientWhereInput | ClientWhereInput[]
    id?: StringFilter<"Client"> | string
    organizationId?: StringFilter<"Client"> | string
    name?: StringFilter<"Client"> | string
    email?: StringFilter<"Client"> | string
    phone?: StringNullableFilter<"Client"> | string | null
    company?: StringNullableFilter<"Client"> | string | null
    stage?: EnumPipelineStageFilter<"Client"> | $Enums.PipelineStage
    valueUsd?: IntFilter<"Client"> | number
    isPaid?: BoolFilter<"Client"> | boolean
    isOnboarded?: BoolFilter<"Client"> | boolean
    competitors?: JsonNullableFilter<"Client">
    notes?: JsonNullableFilter<"Client">
    createdAt?: DateTimeFilter<"Client"> | Date | string
    assignedToMembershipId?: StringNullableFilter<"Client"> | string | null
    assignedTo?: XOR<OrganizationMembershipNullableScalarRelationFilter, OrganizationMembershipWhereInput> | null
    assignedUsers?: UserListRelationFilter
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    interactions?: InteractionListRelationFilter
    invoices?: InvoiceListRelationFilter
    sequences?: SequenceTargetListRelationFilter
    pipelineCards?: PipelineCardListRelationFilter
    campaigns?: CampaignListRelationFilter
    EmailEvent?: EmailEventListRelationFilter
    Subscription?: SubscriptionListRelationFilter
  }

  export type ClientOrderByWithRelationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrderInput | SortOrder
    company?: SortOrderInput | SortOrder
    stage?: SortOrder
    valueUsd?: SortOrder
    isPaid?: SortOrder
    isOnboarded?: SortOrder
    competitors?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    assignedToMembershipId?: SortOrderInput | SortOrder
    assignedTo?: OrganizationMembershipOrderByWithRelationInput
    assignedUsers?: UserOrderByRelationAggregateInput
    organization?: OrganizationOrderByWithRelationInput
    interactions?: InteractionOrderByRelationAggregateInput
    invoices?: InvoiceOrderByRelationAggregateInput
    sequences?: SequenceTargetOrderByRelationAggregateInput
    pipelineCards?: PipelineCardOrderByRelationAggregateInput
    campaigns?: CampaignOrderByRelationAggregateInput
    EmailEvent?: EmailEventOrderByRelationAggregateInput
    Subscription?: SubscriptionOrderByRelationAggregateInput
  }

  export type ClientWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ClientWhereInput | ClientWhereInput[]
    OR?: ClientWhereInput[]
    NOT?: ClientWhereInput | ClientWhereInput[]
    organizationId?: StringFilter<"Client"> | string
    name?: StringFilter<"Client"> | string
    email?: StringFilter<"Client"> | string
    phone?: StringNullableFilter<"Client"> | string | null
    company?: StringNullableFilter<"Client"> | string | null
    stage?: EnumPipelineStageFilter<"Client"> | $Enums.PipelineStage
    valueUsd?: IntFilter<"Client"> | number
    isPaid?: BoolFilter<"Client"> | boolean
    isOnboarded?: BoolFilter<"Client"> | boolean
    competitors?: JsonNullableFilter<"Client">
    notes?: JsonNullableFilter<"Client">
    createdAt?: DateTimeFilter<"Client"> | Date | string
    assignedToMembershipId?: StringNullableFilter<"Client"> | string | null
    assignedTo?: XOR<OrganizationMembershipNullableScalarRelationFilter, OrganizationMembershipWhereInput> | null
    assignedUsers?: UserListRelationFilter
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    interactions?: InteractionListRelationFilter
    invoices?: InvoiceListRelationFilter
    sequences?: SequenceTargetListRelationFilter
    pipelineCards?: PipelineCardListRelationFilter
    campaigns?: CampaignListRelationFilter
    EmailEvent?: EmailEventListRelationFilter
    Subscription?: SubscriptionListRelationFilter
  }, "id">

  export type ClientOrderByWithAggregationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrderInput | SortOrder
    company?: SortOrderInput | SortOrder
    stage?: SortOrder
    valueUsd?: SortOrder
    isPaid?: SortOrder
    isOnboarded?: SortOrder
    competitors?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    assignedToMembershipId?: SortOrderInput | SortOrder
    _count?: ClientCountOrderByAggregateInput
    _avg?: ClientAvgOrderByAggregateInput
    _max?: ClientMaxOrderByAggregateInput
    _min?: ClientMinOrderByAggregateInput
    _sum?: ClientSumOrderByAggregateInput
  }

  export type ClientScalarWhereWithAggregatesInput = {
    AND?: ClientScalarWhereWithAggregatesInput | ClientScalarWhereWithAggregatesInput[]
    OR?: ClientScalarWhereWithAggregatesInput[]
    NOT?: ClientScalarWhereWithAggregatesInput | ClientScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Client"> | string
    organizationId?: StringWithAggregatesFilter<"Client"> | string
    name?: StringWithAggregatesFilter<"Client"> | string
    email?: StringWithAggregatesFilter<"Client"> | string
    phone?: StringNullableWithAggregatesFilter<"Client"> | string | null
    company?: StringNullableWithAggregatesFilter<"Client"> | string | null
    stage?: EnumPipelineStageWithAggregatesFilter<"Client"> | $Enums.PipelineStage
    valueUsd?: IntWithAggregatesFilter<"Client"> | number
    isPaid?: BoolWithAggregatesFilter<"Client"> | boolean
    isOnboarded?: BoolWithAggregatesFilter<"Client"> | boolean
    competitors?: JsonNullableWithAggregatesFilter<"Client">
    notes?: JsonNullableWithAggregatesFilter<"Client">
    createdAt?: DateTimeWithAggregatesFilter<"Client"> | Date | string
    assignedToMembershipId?: StringNullableWithAggregatesFilter<"Client"> | string | null
  }

  export type InteractionWhereInput = {
    AND?: InteractionWhereInput | InteractionWhereInput[]
    OR?: InteractionWhereInput[]
    NOT?: InteractionWhereInput | InteractionWhereInput[]
    id?: StringFilter<"Interaction"> | string
    date?: DateTimeFilter<"Interaction"> | Date | string
    type?: EnumInteractionTypeFilter<"Interaction"> | $Enums.InteractionType
    summary?: StringFilter<"Interaction"> | string
    clientId?: StringFilter<"Interaction"> | string
    client?: XOR<ClientScalarRelationFilter, ClientWhereInput>
  }

  export type InteractionOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    type?: SortOrder
    summary?: SortOrder
    clientId?: SortOrder
    client?: ClientOrderByWithRelationInput
  }

  export type InteractionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: InteractionWhereInput | InteractionWhereInput[]
    OR?: InteractionWhereInput[]
    NOT?: InteractionWhereInput | InteractionWhereInput[]
    date?: DateTimeFilter<"Interaction"> | Date | string
    type?: EnumInteractionTypeFilter<"Interaction"> | $Enums.InteractionType
    summary?: StringFilter<"Interaction"> | string
    clientId?: StringFilter<"Interaction"> | string
    client?: XOR<ClientScalarRelationFilter, ClientWhereInput>
  }, "id">

  export type InteractionOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    type?: SortOrder
    summary?: SortOrder
    clientId?: SortOrder
    _count?: InteractionCountOrderByAggregateInput
    _max?: InteractionMaxOrderByAggregateInput
    _min?: InteractionMinOrderByAggregateInput
  }

  export type InteractionScalarWhereWithAggregatesInput = {
    AND?: InteractionScalarWhereWithAggregatesInput | InteractionScalarWhereWithAggregatesInput[]
    OR?: InteractionScalarWhereWithAggregatesInput[]
    NOT?: InteractionScalarWhereWithAggregatesInput | InteractionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Interaction"> | string
    date?: DateTimeWithAggregatesFilter<"Interaction"> | Date | string
    type?: EnumInteractionTypeWithAggregatesFilter<"Interaction"> | $Enums.InteractionType
    summary?: StringWithAggregatesFilter<"Interaction"> | string
    clientId?: StringWithAggregatesFilter<"Interaction"> | string
  }

  export type PipelineWhereInput = {
    AND?: PipelineWhereInput | PipelineWhereInput[]
    OR?: PipelineWhereInput[]
    NOT?: PipelineWhereInput | PipelineWhereInput[]
    id?: StringFilter<"Pipeline"> | string
    organizationId?: StringFilter<"Pipeline"> | string
    name?: StringFilter<"Pipeline"> | string
    createdAt?: DateTimeFilter<"Pipeline"> | Date | string
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    stages?: PipelineStageModelListRelationFilter
    pipelineCards?: PipelineCardListRelationFilter
  }

  export type PipelineOrderByWithRelationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    organization?: OrganizationOrderByWithRelationInput
    stages?: PipelineStageModelOrderByRelationAggregateInput
    pipelineCards?: PipelineCardOrderByRelationAggregateInput
  }

  export type PipelineWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PipelineWhereInput | PipelineWhereInput[]
    OR?: PipelineWhereInput[]
    NOT?: PipelineWhereInput | PipelineWhereInput[]
    organizationId?: StringFilter<"Pipeline"> | string
    name?: StringFilter<"Pipeline"> | string
    createdAt?: DateTimeFilter<"Pipeline"> | Date | string
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    stages?: PipelineStageModelListRelationFilter
    pipelineCards?: PipelineCardListRelationFilter
  }, "id">

  export type PipelineOrderByWithAggregationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    _count?: PipelineCountOrderByAggregateInput
    _max?: PipelineMaxOrderByAggregateInput
    _min?: PipelineMinOrderByAggregateInput
  }

  export type PipelineScalarWhereWithAggregatesInput = {
    AND?: PipelineScalarWhereWithAggregatesInput | PipelineScalarWhereWithAggregatesInput[]
    OR?: PipelineScalarWhereWithAggregatesInput[]
    NOT?: PipelineScalarWhereWithAggregatesInput | PipelineScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Pipeline"> | string
    organizationId?: StringWithAggregatesFilter<"Pipeline"> | string
    name?: StringWithAggregatesFilter<"Pipeline"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Pipeline"> | Date | string
  }

  export type PipelineStageModelWhereInput = {
    AND?: PipelineStageModelWhereInput | PipelineStageModelWhereInput[]
    OR?: PipelineStageModelWhereInput[]
    NOT?: PipelineStageModelWhereInput | PipelineStageModelWhereInput[]
    id?: StringFilter<"PipelineStageModel"> | string
    pipelineId?: StringFilter<"PipelineStageModel"> | string
    name?: StringFilter<"PipelineStageModel"> | string
    position?: IntFilter<"PipelineStageModel"> | number
    pipeline?: XOR<PipelineScalarRelationFilter, PipelineWhereInput>
    cards?: PipelineCardListRelationFilter
  }

  export type PipelineStageModelOrderByWithRelationInput = {
    id?: SortOrder
    pipelineId?: SortOrder
    name?: SortOrder
    position?: SortOrder
    pipeline?: PipelineOrderByWithRelationInput
    cards?: PipelineCardOrderByRelationAggregateInput
  }

  export type PipelineStageModelWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PipelineStageModelWhereInput | PipelineStageModelWhereInput[]
    OR?: PipelineStageModelWhereInput[]
    NOT?: PipelineStageModelWhereInput | PipelineStageModelWhereInput[]
    pipelineId?: StringFilter<"PipelineStageModel"> | string
    name?: StringFilter<"PipelineStageModel"> | string
    position?: IntFilter<"PipelineStageModel"> | number
    pipeline?: XOR<PipelineScalarRelationFilter, PipelineWhereInput>
    cards?: PipelineCardListRelationFilter
  }, "id">

  export type PipelineStageModelOrderByWithAggregationInput = {
    id?: SortOrder
    pipelineId?: SortOrder
    name?: SortOrder
    position?: SortOrder
    _count?: PipelineStageModelCountOrderByAggregateInput
    _avg?: PipelineStageModelAvgOrderByAggregateInput
    _max?: PipelineStageModelMaxOrderByAggregateInput
    _min?: PipelineStageModelMinOrderByAggregateInput
    _sum?: PipelineStageModelSumOrderByAggregateInput
  }

  export type PipelineStageModelScalarWhereWithAggregatesInput = {
    AND?: PipelineStageModelScalarWhereWithAggregatesInput | PipelineStageModelScalarWhereWithAggregatesInput[]
    OR?: PipelineStageModelScalarWhereWithAggregatesInput[]
    NOT?: PipelineStageModelScalarWhereWithAggregatesInput | PipelineStageModelScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PipelineStageModel"> | string
    pipelineId?: StringWithAggregatesFilter<"PipelineStageModel"> | string
    name?: StringWithAggregatesFilter<"PipelineStageModel"> | string
    position?: IntWithAggregatesFilter<"PipelineStageModel"> | number
  }

  export type PipelineCardWhereInput = {
    AND?: PipelineCardWhereInput | PipelineCardWhereInput[]
    OR?: PipelineCardWhereInput[]
    NOT?: PipelineCardWhereInput | PipelineCardWhereInput[]
    id?: StringFilter<"PipelineCard"> | string
    organizationId?: StringFilter<"PipelineCard"> | string
    pipelineId?: StringFilter<"PipelineCard"> | string
    stageId?: StringFilter<"PipelineCard"> | string
    clientId?: StringFilter<"PipelineCard"> | string
    title?: StringFilter<"PipelineCard"> | string
    value?: FloatNullableFilter<"PipelineCard"> | number | null
    metadata?: JsonNullableFilter<"PipelineCard">
    createdAt?: DateTimeFilter<"PipelineCard"> | Date | string
    updatedAt?: DateTimeFilter<"PipelineCard"> | Date | string
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    pipeline?: XOR<PipelineScalarRelationFilter, PipelineWhereInput>
    stage?: XOR<PipelineStageModelScalarRelationFilter, PipelineStageModelWhereInput>
    client?: XOR<ClientScalarRelationFilter, ClientWhereInput>
  }

  export type PipelineCardOrderByWithRelationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    pipelineId?: SortOrder
    stageId?: SortOrder
    clientId?: SortOrder
    title?: SortOrder
    value?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    organization?: OrganizationOrderByWithRelationInput
    pipeline?: PipelineOrderByWithRelationInput
    stage?: PipelineStageModelOrderByWithRelationInput
    client?: ClientOrderByWithRelationInput
  }

  export type PipelineCardWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PipelineCardWhereInput | PipelineCardWhereInput[]
    OR?: PipelineCardWhereInput[]
    NOT?: PipelineCardWhereInput | PipelineCardWhereInput[]
    organizationId?: StringFilter<"PipelineCard"> | string
    pipelineId?: StringFilter<"PipelineCard"> | string
    stageId?: StringFilter<"PipelineCard"> | string
    clientId?: StringFilter<"PipelineCard"> | string
    title?: StringFilter<"PipelineCard"> | string
    value?: FloatNullableFilter<"PipelineCard"> | number | null
    metadata?: JsonNullableFilter<"PipelineCard">
    createdAt?: DateTimeFilter<"PipelineCard"> | Date | string
    updatedAt?: DateTimeFilter<"PipelineCard"> | Date | string
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    pipeline?: XOR<PipelineScalarRelationFilter, PipelineWhereInput>
    stage?: XOR<PipelineStageModelScalarRelationFilter, PipelineStageModelWhereInput>
    client?: XOR<ClientScalarRelationFilter, ClientWhereInput>
  }, "id">

  export type PipelineCardOrderByWithAggregationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    pipelineId?: SortOrder
    stageId?: SortOrder
    clientId?: SortOrder
    title?: SortOrder
    value?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PipelineCardCountOrderByAggregateInput
    _avg?: PipelineCardAvgOrderByAggregateInput
    _max?: PipelineCardMaxOrderByAggregateInput
    _min?: PipelineCardMinOrderByAggregateInput
    _sum?: PipelineCardSumOrderByAggregateInput
  }

  export type PipelineCardScalarWhereWithAggregatesInput = {
    AND?: PipelineCardScalarWhereWithAggregatesInput | PipelineCardScalarWhereWithAggregatesInput[]
    OR?: PipelineCardScalarWhereWithAggregatesInput[]
    NOT?: PipelineCardScalarWhereWithAggregatesInput | PipelineCardScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PipelineCard"> | string
    organizationId?: StringWithAggregatesFilter<"PipelineCard"> | string
    pipelineId?: StringWithAggregatesFilter<"PipelineCard"> | string
    stageId?: StringWithAggregatesFilter<"PipelineCard"> | string
    clientId?: StringWithAggregatesFilter<"PipelineCard"> | string
    title?: StringWithAggregatesFilter<"PipelineCard"> | string
    value?: FloatNullableWithAggregatesFilter<"PipelineCard"> | number | null
    metadata?: JsonNullableWithAggregatesFilter<"PipelineCard">
    createdAt?: DateTimeWithAggregatesFilter<"PipelineCard"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PipelineCard"> | Date | string
  }

  export type EmailTemplateWhereInput = {
    AND?: EmailTemplateWhereInput | EmailTemplateWhereInput[]
    OR?: EmailTemplateWhereInput[]
    NOT?: EmailTemplateWhereInput | EmailTemplateWhereInput[]
    id?: StringFilter<"EmailTemplate"> | string
    organizationId?: StringFilter<"EmailTemplate"> | string
    name?: StringFilter<"EmailTemplate"> | string
    subject?: StringFilter<"EmailTemplate"> | string
    html?: StringFilter<"EmailTemplate"> | string
    createdAt?: DateTimeFilter<"EmailTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"EmailTemplate"> | Date | string
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
  }

  export type EmailTemplateOrderByWithRelationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    name?: SortOrder
    subject?: SortOrder
    html?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    organization?: OrganizationOrderByWithRelationInput
  }

  export type EmailTemplateWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: EmailTemplateWhereInput | EmailTemplateWhereInput[]
    OR?: EmailTemplateWhereInput[]
    NOT?: EmailTemplateWhereInput | EmailTemplateWhereInput[]
    organizationId?: StringFilter<"EmailTemplate"> | string
    name?: StringFilter<"EmailTemplate"> | string
    subject?: StringFilter<"EmailTemplate"> | string
    html?: StringFilter<"EmailTemplate"> | string
    createdAt?: DateTimeFilter<"EmailTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"EmailTemplate"> | Date | string
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
  }, "id">

  export type EmailTemplateOrderByWithAggregationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    name?: SortOrder
    subject?: SortOrder
    html?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: EmailTemplateCountOrderByAggregateInput
    _max?: EmailTemplateMaxOrderByAggregateInput
    _min?: EmailTemplateMinOrderByAggregateInput
  }

  export type EmailTemplateScalarWhereWithAggregatesInput = {
    AND?: EmailTemplateScalarWhereWithAggregatesInput | EmailTemplateScalarWhereWithAggregatesInput[]
    OR?: EmailTemplateScalarWhereWithAggregatesInput[]
    NOT?: EmailTemplateScalarWhereWithAggregatesInput | EmailTemplateScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"EmailTemplate"> | string
    organizationId?: StringWithAggregatesFilter<"EmailTemplate"> | string
    name?: StringWithAggregatesFilter<"EmailTemplate"> | string
    subject?: StringWithAggregatesFilter<"EmailTemplate"> | string
    html?: StringWithAggregatesFilter<"EmailTemplate"> | string
    createdAt?: DateTimeWithAggregatesFilter<"EmailTemplate"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"EmailTemplate"> | Date | string
  }

  export type EmailSequenceWhereInput = {
    AND?: EmailSequenceWhereInput | EmailSequenceWhereInput[]
    OR?: EmailSequenceWhereInput[]
    NOT?: EmailSequenceWhereInput | EmailSequenceWhereInput[]
    id?: StringFilter<"EmailSequence"> | string
    organizationId?: StringFilter<"EmailSequence"> | string
    name?: StringFilter<"EmailSequence"> | string
    sent?: IntFilter<"EmailSequence"> | number
    opens?: IntFilter<"EmailSequence"> | number
    clicks?: IntFilter<"EmailSequence"> | number
    createdAt?: DateTimeFilter<"EmailSequence"> | Date | string
    updatedAt?: DateTimeFilter<"EmailSequence"> | Date | string
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    steps?: EmailStepListRelationFilter
    targets?: SequenceTargetListRelationFilter
    events?: EmailEventListRelationFilter
  }

  export type EmailSequenceOrderByWithRelationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    name?: SortOrder
    sent?: SortOrder
    opens?: SortOrder
    clicks?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    organization?: OrganizationOrderByWithRelationInput
    steps?: EmailStepOrderByRelationAggregateInput
    targets?: SequenceTargetOrderByRelationAggregateInput
    events?: EmailEventOrderByRelationAggregateInput
  }

  export type EmailSequenceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: EmailSequenceWhereInput | EmailSequenceWhereInput[]
    OR?: EmailSequenceWhereInput[]
    NOT?: EmailSequenceWhereInput | EmailSequenceWhereInput[]
    organizationId?: StringFilter<"EmailSequence"> | string
    name?: StringFilter<"EmailSequence"> | string
    sent?: IntFilter<"EmailSequence"> | number
    opens?: IntFilter<"EmailSequence"> | number
    clicks?: IntFilter<"EmailSequence"> | number
    createdAt?: DateTimeFilter<"EmailSequence"> | Date | string
    updatedAt?: DateTimeFilter<"EmailSequence"> | Date | string
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    steps?: EmailStepListRelationFilter
    targets?: SequenceTargetListRelationFilter
    events?: EmailEventListRelationFilter
  }, "id">

  export type EmailSequenceOrderByWithAggregationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    name?: SortOrder
    sent?: SortOrder
    opens?: SortOrder
    clicks?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: EmailSequenceCountOrderByAggregateInput
    _avg?: EmailSequenceAvgOrderByAggregateInput
    _max?: EmailSequenceMaxOrderByAggregateInput
    _min?: EmailSequenceMinOrderByAggregateInput
    _sum?: EmailSequenceSumOrderByAggregateInput
  }

  export type EmailSequenceScalarWhereWithAggregatesInput = {
    AND?: EmailSequenceScalarWhereWithAggregatesInput | EmailSequenceScalarWhereWithAggregatesInput[]
    OR?: EmailSequenceScalarWhereWithAggregatesInput[]
    NOT?: EmailSequenceScalarWhereWithAggregatesInput | EmailSequenceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"EmailSequence"> | string
    organizationId?: StringWithAggregatesFilter<"EmailSequence"> | string
    name?: StringWithAggregatesFilter<"EmailSequence"> | string
    sent?: IntWithAggregatesFilter<"EmailSequence"> | number
    opens?: IntWithAggregatesFilter<"EmailSequence"> | number
    clicks?: IntWithAggregatesFilter<"EmailSequence"> | number
    createdAt?: DateTimeWithAggregatesFilter<"EmailSequence"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"EmailSequence"> | Date | string
  }

  export type EmailStepWhereInput = {
    AND?: EmailStepWhereInput | EmailStepWhereInput[]
    OR?: EmailStepWhereInput[]
    NOT?: EmailStepWhereInput | EmailStepWhereInput[]
    id?: StringFilter<"EmailStep"> | string
    subject?: StringFilter<"EmailStep"> | string
    body?: StringFilter<"EmailStep"> | string
    delayDays?: IntFilter<"EmailStep"> | number
    sequenceId?: StringFilter<"EmailStep"> | string
    sequence?: XOR<EmailSequenceScalarRelationFilter, EmailSequenceWhereInput>
  }

  export type EmailStepOrderByWithRelationInput = {
    id?: SortOrder
    subject?: SortOrder
    body?: SortOrder
    delayDays?: SortOrder
    sequenceId?: SortOrder
    sequence?: EmailSequenceOrderByWithRelationInput
  }

  export type EmailStepWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: EmailStepWhereInput | EmailStepWhereInput[]
    OR?: EmailStepWhereInput[]
    NOT?: EmailStepWhereInput | EmailStepWhereInput[]
    subject?: StringFilter<"EmailStep"> | string
    body?: StringFilter<"EmailStep"> | string
    delayDays?: IntFilter<"EmailStep"> | number
    sequenceId?: StringFilter<"EmailStep"> | string
    sequence?: XOR<EmailSequenceScalarRelationFilter, EmailSequenceWhereInput>
  }, "id">

  export type EmailStepOrderByWithAggregationInput = {
    id?: SortOrder
    subject?: SortOrder
    body?: SortOrder
    delayDays?: SortOrder
    sequenceId?: SortOrder
    _count?: EmailStepCountOrderByAggregateInput
    _avg?: EmailStepAvgOrderByAggregateInput
    _max?: EmailStepMaxOrderByAggregateInput
    _min?: EmailStepMinOrderByAggregateInput
    _sum?: EmailStepSumOrderByAggregateInput
  }

  export type EmailStepScalarWhereWithAggregatesInput = {
    AND?: EmailStepScalarWhereWithAggregatesInput | EmailStepScalarWhereWithAggregatesInput[]
    OR?: EmailStepScalarWhereWithAggregatesInput[]
    NOT?: EmailStepScalarWhereWithAggregatesInput | EmailStepScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"EmailStep"> | string
    subject?: StringWithAggregatesFilter<"EmailStep"> | string
    body?: StringWithAggregatesFilter<"EmailStep"> | string
    delayDays?: IntWithAggregatesFilter<"EmailStep"> | number
    sequenceId?: StringWithAggregatesFilter<"EmailStep"> | string
  }

  export type SequenceTargetWhereInput = {
    AND?: SequenceTargetWhereInput | SequenceTargetWhereInput[]
    OR?: SequenceTargetWhereInput[]
    NOT?: SequenceTargetWhereInput | SequenceTargetWhereInput[]
    sequenceId?: StringFilter<"SequenceTarget"> | string
    clientId?: StringFilter<"SequenceTarget"> | string
    sequence?: XOR<EmailSequenceScalarRelationFilter, EmailSequenceWhereInput>
    client?: XOR<ClientScalarRelationFilter, ClientWhereInput>
  }

  export type SequenceTargetOrderByWithRelationInput = {
    sequenceId?: SortOrder
    clientId?: SortOrder
    sequence?: EmailSequenceOrderByWithRelationInput
    client?: ClientOrderByWithRelationInput
  }

  export type SequenceTargetWhereUniqueInput = Prisma.AtLeast<{
    sequenceId_clientId?: SequenceTargetSequenceIdClientIdCompoundUniqueInput
    AND?: SequenceTargetWhereInput | SequenceTargetWhereInput[]
    OR?: SequenceTargetWhereInput[]
    NOT?: SequenceTargetWhereInput | SequenceTargetWhereInput[]
    sequenceId?: StringFilter<"SequenceTarget"> | string
    clientId?: StringFilter<"SequenceTarget"> | string
    sequence?: XOR<EmailSequenceScalarRelationFilter, EmailSequenceWhereInput>
    client?: XOR<ClientScalarRelationFilter, ClientWhereInput>
  }, "sequenceId_clientId">

  export type SequenceTargetOrderByWithAggregationInput = {
    sequenceId?: SortOrder
    clientId?: SortOrder
    _count?: SequenceTargetCountOrderByAggregateInput
    _max?: SequenceTargetMaxOrderByAggregateInput
    _min?: SequenceTargetMinOrderByAggregateInput
  }

  export type SequenceTargetScalarWhereWithAggregatesInput = {
    AND?: SequenceTargetScalarWhereWithAggregatesInput | SequenceTargetScalarWhereWithAggregatesInput[]
    OR?: SequenceTargetScalarWhereWithAggregatesInput[]
    NOT?: SequenceTargetScalarWhereWithAggregatesInput | SequenceTargetScalarWhereWithAggregatesInput[]
    sequenceId?: StringWithAggregatesFilter<"SequenceTarget"> | string
    clientId?: StringWithAggregatesFilter<"SequenceTarget"> | string
  }

  export type EmailEventWhereInput = {
    AND?: EmailEventWhereInput | EmailEventWhereInput[]
    OR?: EmailEventWhereInput[]
    NOT?: EmailEventWhereInput | EmailEventWhereInput[]
    id?: StringFilter<"EmailEvent"> | string
    sequenceId?: StringNullableFilter<"EmailEvent"> | string | null
    clientId?: StringNullableFilter<"EmailEvent"> | string | null
    type?: StringFilter<"EmailEvent"> | string
    metadata?: JsonNullableFilter<"EmailEvent">
    createdAt?: DateTimeFilter<"EmailEvent"> | Date | string
    sequence?: XOR<EmailSequenceNullableScalarRelationFilter, EmailSequenceWhereInput> | null
    client?: XOR<ClientNullableScalarRelationFilter, ClientWhereInput> | null
  }

  export type EmailEventOrderByWithRelationInput = {
    id?: SortOrder
    sequenceId?: SortOrderInput | SortOrder
    clientId?: SortOrderInput | SortOrder
    type?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    sequence?: EmailSequenceOrderByWithRelationInput
    client?: ClientOrderByWithRelationInput
  }

  export type EmailEventWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: EmailEventWhereInput | EmailEventWhereInput[]
    OR?: EmailEventWhereInput[]
    NOT?: EmailEventWhereInput | EmailEventWhereInput[]
    sequenceId?: StringNullableFilter<"EmailEvent"> | string | null
    clientId?: StringNullableFilter<"EmailEvent"> | string | null
    type?: StringFilter<"EmailEvent"> | string
    metadata?: JsonNullableFilter<"EmailEvent">
    createdAt?: DateTimeFilter<"EmailEvent"> | Date | string
    sequence?: XOR<EmailSequenceNullableScalarRelationFilter, EmailSequenceWhereInput> | null
    client?: XOR<ClientNullableScalarRelationFilter, ClientWhereInput> | null
  }, "id">

  export type EmailEventOrderByWithAggregationInput = {
    id?: SortOrder
    sequenceId?: SortOrderInput | SortOrder
    clientId?: SortOrderInput | SortOrder
    type?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: EmailEventCountOrderByAggregateInput
    _max?: EmailEventMaxOrderByAggregateInput
    _min?: EmailEventMinOrderByAggregateInput
  }

  export type EmailEventScalarWhereWithAggregatesInput = {
    AND?: EmailEventScalarWhereWithAggregatesInput | EmailEventScalarWhereWithAggregatesInput[]
    OR?: EmailEventScalarWhereWithAggregatesInput[]
    NOT?: EmailEventScalarWhereWithAggregatesInput | EmailEventScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"EmailEvent"> | string
    sequenceId?: StringNullableWithAggregatesFilter<"EmailEvent"> | string | null
    clientId?: StringNullableWithAggregatesFilter<"EmailEvent"> | string | null
    type?: StringWithAggregatesFilter<"EmailEvent"> | string
    metadata?: JsonNullableWithAggregatesFilter<"EmailEvent">
    createdAt?: DateTimeWithAggregatesFilter<"EmailEvent"> | Date | string
  }

  export type InvoiceWhereInput = {
    AND?: InvoiceWhereInput | InvoiceWhereInput[]
    OR?: InvoiceWhereInput[]
    NOT?: InvoiceWhereInput | InvoiceWhereInput[]
    id?: StringFilter<"Invoice"> | string
    organizationId?: StringFilter<"Invoice"> | string
    clientId?: StringFilter<"Invoice"> | string
    amountUsd?: IntFilter<"Invoice"> | number
    status?: EnumInvoiceStatusFilter<"Invoice"> | $Enums.InvoiceStatus
    dueDate?: DateTimeFilter<"Invoice"> | Date | string
    createdAt?: DateTimeFilter<"Invoice"> | Date | string
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    client?: XOR<ClientScalarRelationFilter, ClientWhereInput>
    transactions?: TransactionListRelationFilter
  }

  export type InvoiceOrderByWithRelationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    clientId?: SortOrder
    amountUsd?: SortOrder
    status?: SortOrder
    dueDate?: SortOrder
    createdAt?: SortOrder
    organization?: OrganizationOrderByWithRelationInput
    client?: ClientOrderByWithRelationInput
    transactions?: TransactionOrderByRelationAggregateInput
  }

  export type InvoiceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: InvoiceWhereInput | InvoiceWhereInput[]
    OR?: InvoiceWhereInput[]
    NOT?: InvoiceWhereInput | InvoiceWhereInput[]
    organizationId?: StringFilter<"Invoice"> | string
    clientId?: StringFilter<"Invoice"> | string
    amountUsd?: IntFilter<"Invoice"> | number
    status?: EnumInvoiceStatusFilter<"Invoice"> | $Enums.InvoiceStatus
    dueDate?: DateTimeFilter<"Invoice"> | Date | string
    createdAt?: DateTimeFilter<"Invoice"> | Date | string
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    client?: XOR<ClientScalarRelationFilter, ClientWhereInput>
    transactions?: TransactionListRelationFilter
  }, "id">

  export type InvoiceOrderByWithAggregationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    clientId?: SortOrder
    amountUsd?: SortOrder
    status?: SortOrder
    dueDate?: SortOrder
    createdAt?: SortOrder
    _count?: InvoiceCountOrderByAggregateInput
    _avg?: InvoiceAvgOrderByAggregateInput
    _max?: InvoiceMaxOrderByAggregateInput
    _min?: InvoiceMinOrderByAggregateInput
    _sum?: InvoiceSumOrderByAggregateInput
  }

  export type InvoiceScalarWhereWithAggregatesInput = {
    AND?: InvoiceScalarWhereWithAggregatesInput | InvoiceScalarWhereWithAggregatesInput[]
    OR?: InvoiceScalarWhereWithAggregatesInput[]
    NOT?: InvoiceScalarWhereWithAggregatesInput | InvoiceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Invoice"> | string
    organizationId?: StringWithAggregatesFilter<"Invoice"> | string
    clientId?: StringWithAggregatesFilter<"Invoice"> | string
    amountUsd?: IntWithAggregatesFilter<"Invoice"> | number
    status?: EnumInvoiceStatusWithAggregatesFilter<"Invoice"> | $Enums.InvoiceStatus
    dueDate?: DateTimeWithAggregatesFilter<"Invoice"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Invoice"> | Date | string
  }

  export type TransactionWhereInput = {
    AND?: TransactionWhereInput | TransactionWhereInput[]
    OR?: TransactionWhereInput[]
    NOT?: TransactionWhereInput | TransactionWhereInput[]
    id?: StringFilter<"Transaction"> | string
    invoiceId?: StringFilter<"Transaction"> | string
    organizationId?: StringNullableFilter<"Transaction"> | string | null
    amount?: FloatFilter<"Transaction"> | number
    currency?: StringFilter<"Transaction"> | string
    gateway?: StringFilter<"Transaction"> | string
    gatewayPayload?: JsonNullableFilter<"Transaction">
    createdAt?: DateTimeFilter<"Transaction"> | Date | string
    invoice?: XOR<InvoiceScalarRelationFilter, InvoiceWhereInput>
    organization?: XOR<OrganizationNullableScalarRelationFilter, OrganizationWhereInput> | null
  }

  export type TransactionOrderByWithRelationInput = {
    id?: SortOrder
    invoiceId?: SortOrder
    organizationId?: SortOrderInput | SortOrder
    amount?: SortOrder
    currency?: SortOrder
    gateway?: SortOrder
    gatewayPayload?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    invoice?: InvoiceOrderByWithRelationInput
    organization?: OrganizationOrderByWithRelationInput
  }

  export type TransactionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TransactionWhereInput | TransactionWhereInput[]
    OR?: TransactionWhereInput[]
    NOT?: TransactionWhereInput | TransactionWhereInput[]
    invoiceId?: StringFilter<"Transaction"> | string
    organizationId?: StringNullableFilter<"Transaction"> | string | null
    amount?: FloatFilter<"Transaction"> | number
    currency?: StringFilter<"Transaction"> | string
    gateway?: StringFilter<"Transaction"> | string
    gatewayPayload?: JsonNullableFilter<"Transaction">
    createdAt?: DateTimeFilter<"Transaction"> | Date | string
    invoice?: XOR<InvoiceScalarRelationFilter, InvoiceWhereInput>
    organization?: XOR<OrganizationNullableScalarRelationFilter, OrganizationWhereInput> | null
  }, "id">

  export type TransactionOrderByWithAggregationInput = {
    id?: SortOrder
    invoiceId?: SortOrder
    organizationId?: SortOrderInput | SortOrder
    amount?: SortOrder
    currency?: SortOrder
    gateway?: SortOrder
    gatewayPayload?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: TransactionCountOrderByAggregateInput
    _avg?: TransactionAvgOrderByAggregateInput
    _max?: TransactionMaxOrderByAggregateInput
    _min?: TransactionMinOrderByAggregateInput
    _sum?: TransactionSumOrderByAggregateInput
  }

  export type TransactionScalarWhereWithAggregatesInput = {
    AND?: TransactionScalarWhereWithAggregatesInput | TransactionScalarWhereWithAggregatesInput[]
    OR?: TransactionScalarWhereWithAggregatesInput[]
    NOT?: TransactionScalarWhereWithAggregatesInput | TransactionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Transaction"> | string
    invoiceId?: StringWithAggregatesFilter<"Transaction"> | string
    organizationId?: StringNullableWithAggregatesFilter<"Transaction"> | string | null
    amount?: FloatWithAggregatesFilter<"Transaction"> | number
    currency?: StringWithAggregatesFilter<"Transaction"> | string
    gateway?: StringWithAggregatesFilter<"Transaction"> | string
    gatewayPayload?: JsonNullableWithAggregatesFilter<"Transaction">
    createdAt?: DateTimeWithAggregatesFilter<"Transaction"> | Date | string
  }

  export type SubscriptionWhereInput = {
    AND?: SubscriptionWhereInput | SubscriptionWhereInput[]
    OR?: SubscriptionWhereInput[]
    NOT?: SubscriptionWhereInput | SubscriptionWhereInput[]
    id?: StringFilter<"Subscription"> | string
    organizationId?: StringFilter<"Subscription"> | string
    clientId?: StringNullableFilter<"Subscription"> | string | null
    status?: StringFilter<"Subscription"> | string
    priceId?: StringNullableFilter<"Subscription"> | string | null
    subscriptionId?: StringNullableFilter<"Subscription"> | string | null
    currentPeriodEnd?: DateTimeNullableFilter<"Subscription"> | Date | string | null
    createdAt?: DateTimeFilter<"Subscription"> | Date | string
    updatedAt?: DateTimeFilter<"Subscription"> | Date | string
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    client?: XOR<ClientNullableScalarRelationFilter, ClientWhereInput> | null
  }

  export type SubscriptionOrderByWithRelationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    clientId?: SortOrderInput | SortOrder
    status?: SortOrder
    priceId?: SortOrderInput | SortOrder
    subscriptionId?: SortOrderInput | SortOrder
    currentPeriodEnd?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    organization?: OrganizationOrderByWithRelationInput
    client?: ClientOrderByWithRelationInput
  }

  export type SubscriptionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SubscriptionWhereInput | SubscriptionWhereInput[]
    OR?: SubscriptionWhereInput[]
    NOT?: SubscriptionWhereInput | SubscriptionWhereInput[]
    organizationId?: StringFilter<"Subscription"> | string
    clientId?: StringNullableFilter<"Subscription"> | string | null
    status?: StringFilter<"Subscription"> | string
    priceId?: StringNullableFilter<"Subscription"> | string | null
    subscriptionId?: StringNullableFilter<"Subscription"> | string | null
    currentPeriodEnd?: DateTimeNullableFilter<"Subscription"> | Date | string | null
    createdAt?: DateTimeFilter<"Subscription"> | Date | string
    updatedAt?: DateTimeFilter<"Subscription"> | Date | string
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    client?: XOR<ClientNullableScalarRelationFilter, ClientWhereInput> | null
  }, "id">

  export type SubscriptionOrderByWithAggregationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    clientId?: SortOrderInput | SortOrder
    status?: SortOrder
    priceId?: SortOrderInput | SortOrder
    subscriptionId?: SortOrderInput | SortOrder
    currentPeriodEnd?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SubscriptionCountOrderByAggregateInput
    _max?: SubscriptionMaxOrderByAggregateInput
    _min?: SubscriptionMinOrderByAggregateInput
  }

  export type SubscriptionScalarWhereWithAggregatesInput = {
    AND?: SubscriptionScalarWhereWithAggregatesInput | SubscriptionScalarWhereWithAggregatesInput[]
    OR?: SubscriptionScalarWhereWithAggregatesInput[]
    NOT?: SubscriptionScalarWhereWithAggregatesInput | SubscriptionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Subscription"> | string
    organizationId?: StringWithAggregatesFilter<"Subscription"> | string
    clientId?: StringNullableWithAggregatesFilter<"Subscription"> | string | null
    status?: StringWithAggregatesFilter<"Subscription"> | string
    priceId?: StringNullableWithAggregatesFilter<"Subscription"> | string | null
    subscriptionId?: StringNullableWithAggregatesFilter<"Subscription"> | string | null
    currentPeriodEnd?: DateTimeNullableWithAggregatesFilter<"Subscription"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Subscription"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Subscription"> | Date | string
  }

  export type CalendarEventWhereInput = {
    AND?: CalendarEventWhereInput | CalendarEventWhereInput[]
    OR?: CalendarEventWhereInput[]
    NOT?: CalendarEventWhereInput | CalendarEventWhereInput[]
    id?: StringFilter<"CalendarEvent"> | string
    organizationId?: StringFilter<"CalendarEvent"> | string
    title?: StringFilter<"CalendarEvent"> | string
    start?: DateTimeFilter<"CalendarEvent"> | Date | string
    end?: DateTimeNullableFilter<"CalendarEvent"> | Date | string | null
    level?: StringNullableFilter<"CalendarEvent"> | string | null
    description?: StringNullableFilter<"CalendarEvent"> | string | null
    createdById?: StringNullableFilter<"CalendarEvent"> | string | null
    createdAt?: DateTimeFilter<"CalendarEvent"> | Date | string
    type?: EnumCalendarItemTypeFilter<"CalendarEvent"> | $Enums.CalendarItemType
    allDay?: BoolFilter<"CalendarEvent"> | boolean
    location?: StringNullableFilter<"CalendarEvent"> | string | null
    reminders?: IntNullableListFilter<"CalendarEvent">
    completed?: BoolFilter<"CalendarEvent"> | boolean
    seriesId?: StringNullableFilter<"CalendarEvent"> | string | null
    metadata?: JsonNullableFilter<"CalendarEvent">
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    createdBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type CalendarEventOrderByWithRelationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    title?: SortOrder
    start?: SortOrder
    end?: SortOrderInput | SortOrder
    level?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    createdById?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    type?: SortOrder
    allDay?: SortOrder
    location?: SortOrderInput | SortOrder
    reminders?: SortOrder
    completed?: SortOrder
    seriesId?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    organization?: OrganizationOrderByWithRelationInput
    createdBy?: UserOrderByWithRelationInput
  }

  export type CalendarEventWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CalendarEventWhereInput | CalendarEventWhereInput[]
    OR?: CalendarEventWhereInput[]
    NOT?: CalendarEventWhereInput | CalendarEventWhereInput[]
    organizationId?: StringFilter<"CalendarEvent"> | string
    title?: StringFilter<"CalendarEvent"> | string
    start?: DateTimeFilter<"CalendarEvent"> | Date | string
    end?: DateTimeNullableFilter<"CalendarEvent"> | Date | string | null
    level?: StringNullableFilter<"CalendarEvent"> | string | null
    description?: StringNullableFilter<"CalendarEvent"> | string | null
    createdById?: StringNullableFilter<"CalendarEvent"> | string | null
    createdAt?: DateTimeFilter<"CalendarEvent"> | Date | string
    type?: EnumCalendarItemTypeFilter<"CalendarEvent"> | $Enums.CalendarItemType
    allDay?: BoolFilter<"CalendarEvent"> | boolean
    location?: StringNullableFilter<"CalendarEvent"> | string | null
    reminders?: IntNullableListFilter<"CalendarEvent">
    completed?: BoolFilter<"CalendarEvent"> | boolean
    seriesId?: StringNullableFilter<"CalendarEvent"> | string | null
    metadata?: JsonNullableFilter<"CalendarEvent">
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    createdBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type CalendarEventOrderByWithAggregationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    title?: SortOrder
    start?: SortOrder
    end?: SortOrderInput | SortOrder
    level?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    createdById?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    type?: SortOrder
    allDay?: SortOrder
    location?: SortOrderInput | SortOrder
    reminders?: SortOrder
    completed?: SortOrder
    seriesId?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    _count?: CalendarEventCountOrderByAggregateInput
    _avg?: CalendarEventAvgOrderByAggregateInput
    _max?: CalendarEventMaxOrderByAggregateInput
    _min?: CalendarEventMinOrderByAggregateInput
    _sum?: CalendarEventSumOrderByAggregateInput
  }

  export type CalendarEventScalarWhereWithAggregatesInput = {
    AND?: CalendarEventScalarWhereWithAggregatesInput | CalendarEventScalarWhereWithAggregatesInput[]
    OR?: CalendarEventScalarWhereWithAggregatesInput[]
    NOT?: CalendarEventScalarWhereWithAggregatesInput | CalendarEventScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CalendarEvent"> | string
    organizationId?: StringWithAggregatesFilter<"CalendarEvent"> | string
    title?: StringWithAggregatesFilter<"CalendarEvent"> | string
    start?: DateTimeWithAggregatesFilter<"CalendarEvent"> | Date | string
    end?: DateTimeNullableWithAggregatesFilter<"CalendarEvent"> | Date | string | null
    level?: StringNullableWithAggregatesFilter<"CalendarEvent"> | string | null
    description?: StringNullableWithAggregatesFilter<"CalendarEvent"> | string | null
    createdById?: StringNullableWithAggregatesFilter<"CalendarEvent"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"CalendarEvent"> | Date | string
    type?: EnumCalendarItemTypeWithAggregatesFilter<"CalendarEvent"> | $Enums.CalendarItemType
    allDay?: BoolWithAggregatesFilter<"CalendarEvent"> | boolean
    location?: StringNullableWithAggregatesFilter<"CalendarEvent"> | string | null
    reminders?: IntNullableListFilter<"CalendarEvent">
    completed?: BoolWithAggregatesFilter<"CalendarEvent"> | boolean
    seriesId?: StringNullableWithAggregatesFilter<"CalendarEvent"> | string | null
    metadata?: JsonNullableWithAggregatesFilter<"CalendarEvent">
  }

  export type CampaignWhereInput = {
    AND?: CampaignWhereInput | CampaignWhereInput[]
    OR?: CampaignWhereInput[]
    NOT?: CampaignWhereInput | CampaignWhereInput[]
    id?: StringFilter<"Campaign"> | string
    clientId?: StringFilter<"Campaign"> | string
    name?: StringFilter<"Campaign"> | string
    startDate?: DateTimeNullableFilter<"Campaign"> | Date | string | null
    endDate?: DateTimeNullableFilter<"Campaign"> | Date | string | null
    status?: EnumCampaignStatusFilter<"Campaign"> | $Enums.CampaignStatus
    metrics?: JsonNullableFilter<"Campaign">
    client?: XOR<ClientScalarRelationFilter, ClientWhereInput>
  }

  export type CampaignOrderByWithRelationInput = {
    id?: SortOrder
    clientId?: SortOrder
    name?: SortOrder
    startDate?: SortOrderInput | SortOrder
    endDate?: SortOrderInput | SortOrder
    status?: SortOrder
    metrics?: SortOrderInput | SortOrder
    client?: ClientOrderByWithRelationInput
  }

  export type CampaignWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CampaignWhereInput | CampaignWhereInput[]
    OR?: CampaignWhereInput[]
    NOT?: CampaignWhereInput | CampaignWhereInput[]
    clientId?: StringFilter<"Campaign"> | string
    name?: StringFilter<"Campaign"> | string
    startDate?: DateTimeNullableFilter<"Campaign"> | Date | string | null
    endDate?: DateTimeNullableFilter<"Campaign"> | Date | string | null
    status?: EnumCampaignStatusFilter<"Campaign"> | $Enums.CampaignStatus
    metrics?: JsonNullableFilter<"Campaign">
    client?: XOR<ClientScalarRelationFilter, ClientWhereInput>
  }, "id">

  export type CampaignOrderByWithAggregationInput = {
    id?: SortOrder
    clientId?: SortOrder
    name?: SortOrder
    startDate?: SortOrderInput | SortOrder
    endDate?: SortOrderInput | SortOrder
    status?: SortOrder
    metrics?: SortOrderInput | SortOrder
    _count?: CampaignCountOrderByAggregateInput
    _max?: CampaignMaxOrderByAggregateInput
    _min?: CampaignMinOrderByAggregateInput
  }

  export type CampaignScalarWhereWithAggregatesInput = {
    AND?: CampaignScalarWhereWithAggregatesInput | CampaignScalarWhereWithAggregatesInput[]
    OR?: CampaignScalarWhereWithAggregatesInput[]
    NOT?: CampaignScalarWhereWithAggregatesInput | CampaignScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Campaign"> | string
    clientId?: StringWithAggregatesFilter<"Campaign"> | string
    name?: StringWithAggregatesFilter<"Campaign"> | string
    startDate?: DateTimeNullableWithAggregatesFilter<"Campaign"> | Date | string | null
    endDate?: DateTimeNullableWithAggregatesFilter<"Campaign"> | Date | string | null
    status?: EnumCampaignStatusWithAggregatesFilter<"Campaign"> | $Enums.CampaignStatus
    metrics?: JsonNullableWithAggregatesFilter<"Campaign">
  }

  export type MindMapWhereInput = {
    AND?: MindMapWhereInput | MindMapWhereInput[]
    OR?: MindMapWhereInput[]
    NOT?: MindMapWhereInput | MindMapWhereInput[]
    id?: StringFilter<"MindMap"> | string
    organizationId?: StringNullableFilter<"MindMap"> | string | null
    ownerUserId?: StringNullableFilter<"MindMap"> | string | null
    data?: JsonFilter<"MindMap">
    createdAt?: DateTimeFilter<"MindMap"> | Date | string
    organization?: XOR<OrganizationNullableScalarRelationFilter, OrganizationWhereInput> | null
    ownerUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type MindMapOrderByWithRelationInput = {
    id?: SortOrder
    organizationId?: SortOrderInput | SortOrder
    ownerUserId?: SortOrderInput | SortOrder
    data?: SortOrder
    createdAt?: SortOrder
    organization?: OrganizationOrderByWithRelationInput
    ownerUser?: UserOrderByWithRelationInput
  }

  export type MindMapWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MindMapWhereInput | MindMapWhereInput[]
    OR?: MindMapWhereInput[]
    NOT?: MindMapWhereInput | MindMapWhereInput[]
    organizationId?: StringNullableFilter<"MindMap"> | string | null
    ownerUserId?: StringNullableFilter<"MindMap"> | string | null
    data?: JsonFilter<"MindMap">
    createdAt?: DateTimeFilter<"MindMap"> | Date | string
    organization?: XOR<OrganizationNullableScalarRelationFilter, OrganizationWhereInput> | null
    ownerUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type MindMapOrderByWithAggregationInput = {
    id?: SortOrder
    organizationId?: SortOrderInput | SortOrder
    ownerUserId?: SortOrderInput | SortOrder
    data?: SortOrder
    createdAt?: SortOrder
    _count?: MindMapCountOrderByAggregateInput
    _max?: MindMapMaxOrderByAggregateInput
    _min?: MindMapMinOrderByAggregateInput
  }

  export type MindMapScalarWhereWithAggregatesInput = {
    AND?: MindMapScalarWhereWithAggregatesInput | MindMapScalarWhereWithAggregatesInput[]
    OR?: MindMapScalarWhereWithAggregatesInput[]
    NOT?: MindMapScalarWhereWithAggregatesInput | MindMapScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MindMap"> | string
    organizationId?: StringNullableWithAggregatesFilter<"MindMap"> | string | null
    ownerUserId?: StringNullableWithAggregatesFilter<"MindMap"> | string | null
    data?: JsonWithAggregatesFilter<"MindMap">
    createdAt?: DateTimeWithAggregatesFilter<"MindMap"> | Date | string
  }

  export type AffiliateLinkWhereInput = {
    AND?: AffiliateLinkWhereInput | AffiliateLinkWhereInput[]
    OR?: AffiliateLinkWhereInput[]
    NOT?: AffiliateLinkWhereInput | AffiliateLinkWhereInput[]
    id?: StringFilter<"AffiliateLink"> | string
    organizationId?: StringFilter<"AffiliateLink"> | string
    userId?: StringFilter<"AffiliateLink"> | string
    code?: StringFilter<"AffiliateLink"> | string
    commissionRate?: FloatFilter<"AffiliateLink"> | number
    createdAt?: DateTimeFilter<"AffiliateLink"> | Date | string
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    clicks?: AffiliateClickListRelationFilter
  }

  export type AffiliateLinkOrderByWithRelationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    userId?: SortOrder
    code?: SortOrder
    commissionRate?: SortOrder
    createdAt?: SortOrder
    organization?: OrganizationOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    clicks?: AffiliateClickOrderByRelationAggregateInput
  }

  export type AffiliateLinkWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    code?: string
    AND?: AffiliateLinkWhereInput | AffiliateLinkWhereInput[]
    OR?: AffiliateLinkWhereInput[]
    NOT?: AffiliateLinkWhereInput | AffiliateLinkWhereInput[]
    organizationId?: StringFilter<"AffiliateLink"> | string
    userId?: StringFilter<"AffiliateLink"> | string
    commissionRate?: FloatFilter<"AffiliateLink"> | number
    createdAt?: DateTimeFilter<"AffiliateLink"> | Date | string
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    clicks?: AffiliateClickListRelationFilter
  }, "id" | "code">

  export type AffiliateLinkOrderByWithAggregationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    userId?: SortOrder
    code?: SortOrder
    commissionRate?: SortOrder
    createdAt?: SortOrder
    _count?: AffiliateLinkCountOrderByAggregateInput
    _avg?: AffiliateLinkAvgOrderByAggregateInput
    _max?: AffiliateLinkMaxOrderByAggregateInput
    _min?: AffiliateLinkMinOrderByAggregateInput
    _sum?: AffiliateLinkSumOrderByAggregateInput
  }

  export type AffiliateLinkScalarWhereWithAggregatesInput = {
    AND?: AffiliateLinkScalarWhereWithAggregatesInput | AffiliateLinkScalarWhereWithAggregatesInput[]
    OR?: AffiliateLinkScalarWhereWithAggregatesInput[]
    NOT?: AffiliateLinkScalarWhereWithAggregatesInput | AffiliateLinkScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AffiliateLink"> | string
    organizationId?: StringWithAggregatesFilter<"AffiliateLink"> | string
    userId?: StringWithAggregatesFilter<"AffiliateLink"> | string
    code?: StringWithAggregatesFilter<"AffiliateLink"> | string
    commissionRate?: FloatWithAggregatesFilter<"AffiliateLink"> | number
    createdAt?: DateTimeWithAggregatesFilter<"AffiliateLink"> | Date | string
  }

  export type AffiliateClickWhereInput = {
    AND?: AffiliateClickWhereInput | AffiliateClickWhereInput[]
    OR?: AffiliateClickWhereInput[]
    NOT?: AffiliateClickWhereInput | AffiliateClickWhereInput[]
    id?: StringFilter<"AffiliateClick"> | string
    affiliateId?: StringFilter<"AffiliateClick"> | string
    visitorIp?: StringNullableFilter<"AffiliateClick"> | string | null
    userAgent?: StringNullableFilter<"AffiliateClick"> | string | null
    campaign?: StringNullableFilter<"AffiliateClick"> | string | null
    createdAt?: DateTimeFilter<"AffiliateClick"> | Date | string
    affiliate?: XOR<AffiliateLinkScalarRelationFilter, AffiliateLinkWhereInput>
  }

  export type AffiliateClickOrderByWithRelationInput = {
    id?: SortOrder
    affiliateId?: SortOrder
    visitorIp?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    campaign?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    affiliate?: AffiliateLinkOrderByWithRelationInput
  }

  export type AffiliateClickWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AffiliateClickWhereInput | AffiliateClickWhereInput[]
    OR?: AffiliateClickWhereInput[]
    NOT?: AffiliateClickWhereInput | AffiliateClickWhereInput[]
    affiliateId?: StringFilter<"AffiliateClick"> | string
    visitorIp?: StringNullableFilter<"AffiliateClick"> | string | null
    userAgent?: StringNullableFilter<"AffiliateClick"> | string | null
    campaign?: StringNullableFilter<"AffiliateClick"> | string | null
    createdAt?: DateTimeFilter<"AffiliateClick"> | Date | string
    affiliate?: XOR<AffiliateLinkScalarRelationFilter, AffiliateLinkWhereInput>
  }, "id">

  export type AffiliateClickOrderByWithAggregationInput = {
    id?: SortOrder
    affiliateId?: SortOrder
    visitorIp?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    campaign?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: AffiliateClickCountOrderByAggregateInput
    _max?: AffiliateClickMaxOrderByAggregateInput
    _min?: AffiliateClickMinOrderByAggregateInput
  }

  export type AffiliateClickScalarWhereWithAggregatesInput = {
    AND?: AffiliateClickScalarWhereWithAggregatesInput | AffiliateClickScalarWhereWithAggregatesInput[]
    OR?: AffiliateClickScalarWhereWithAggregatesInput[]
    NOT?: AffiliateClickScalarWhereWithAggregatesInput | AffiliateClickScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AffiliateClick"> | string
    affiliateId?: StringWithAggregatesFilter<"AffiliateClick"> | string
    visitorIp?: StringNullableWithAggregatesFilter<"AffiliateClick"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"AffiliateClick"> | string | null
    campaign?: StringNullableWithAggregatesFilter<"AffiliateClick"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"AffiliateClick"> | Date | string
  }

  export type AccountWhereInput = {
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    id?: StringFilter<"Account"> | string
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type AccountOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrderInput | SortOrder
    access_token?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    token_type?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    id_token?: SortOrderInput | SortOrder
    session_state?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AccountWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    provider_providerAccountId?: AccountProviderProviderAccountIdCompoundUniqueInput
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "provider_providerAccountId">

  export type AccountOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrderInput | SortOrder
    access_token?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    token_type?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    id_token?: SortOrderInput | SortOrder
    session_state?: SortOrderInput | SortOrder
    _count?: AccountCountOrderByAggregateInput
    _avg?: AccountAvgOrderByAggregateInput
    _max?: AccountMaxOrderByAggregateInput
    _min?: AccountMinOrderByAggregateInput
    _sum?: AccountSumOrderByAggregateInput
  }

  export type AccountScalarWhereWithAggregatesInput = {
    AND?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    OR?: AccountScalarWhereWithAggregatesInput[]
    NOT?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Account"> | string
    userId?: StringWithAggregatesFilter<"Account"> | string
    type?: StringWithAggregatesFilter<"Account"> | string
    provider?: StringWithAggregatesFilter<"Account"> | string
    providerAccountId?: StringWithAggregatesFilter<"Account"> | string
    refresh_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    access_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    expires_at?: IntNullableWithAggregatesFilter<"Account"> | number | null
    token_type?: StringNullableWithAggregatesFilter<"Account"> | string | null
    scope?: StringNullableWithAggregatesFilter<"Account"> | string | null
    id_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    session_state?: StringNullableWithAggregatesFilter<"Account"> | string | null
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    id?: StringFilter<"Session"> | string
    sessionToken?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    expires?: DateTimeFilter<"Session"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    sessionToken?: string
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    userId?: StringFilter<"Session"> | string
    expires?: DateTimeFilter<"Session"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "sessionToken">

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Session"> | string
    sessionToken?: StringWithAggregatesFilter<"Session"> | string
    userId?: StringWithAggregatesFilter<"Session"> | string
    expires?: DateTimeWithAggregatesFilter<"Session"> | Date | string
  }

  export type VerificationTokenWhereInput = {
    AND?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    OR?: VerificationTokenWhereInput[]
    NOT?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    identifier?: StringFilter<"VerificationToken"> | string
    token?: StringFilter<"VerificationToken"> | string
    expires?: DateTimeFilter<"VerificationToken"> | Date | string
  }

  export type VerificationTokenOrderByWithRelationInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenWhereUniqueInput = Prisma.AtLeast<{
    token?: string
    identifier_token?: VerificationTokenIdentifierTokenCompoundUniqueInput
    AND?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    OR?: VerificationTokenWhereInput[]
    NOT?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    identifier?: StringFilter<"VerificationToken"> | string
    expires?: DateTimeFilter<"VerificationToken"> | Date | string
  }, "token" | "identifier_token">

  export type VerificationTokenOrderByWithAggregationInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    _count?: VerificationTokenCountOrderByAggregateInput
    _max?: VerificationTokenMaxOrderByAggregateInput
    _min?: VerificationTokenMinOrderByAggregateInput
  }

  export type VerificationTokenScalarWhereWithAggregatesInput = {
    AND?: VerificationTokenScalarWhereWithAggregatesInput | VerificationTokenScalarWhereWithAggregatesInput[]
    OR?: VerificationTokenScalarWhereWithAggregatesInput[]
    NOT?: VerificationTokenScalarWhereWithAggregatesInput | VerificationTokenScalarWhereWithAggregatesInput[]
    identifier?: StringWithAggregatesFilter<"VerificationToken"> | string
    token?: StringWithAggregatesFilter<"VerificationToken"> | string
    expires?: DateTimeWithAggregatesFilter<"VerificationToken"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    name?: string | null
    email: string
    password?: string | null
    image?: string | null
    emailVerified?: Date | string | null
    role?: $Enums.UserRole
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    memberships?: OrganizationMembershipCreateNestedManyWithoutUserInput
    assignedClients?: ClientCreateNestedManyWithoutAssignedUsersInput
    mindmaps?: MindMapCreateNestedManyWithoutOwnerUserInput
    affiliateLinks?: AffiliateLinkCreateNestedManyWithoutUserInput
    calendarEvents?: CalendarEventCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name?: string | null
    email: string
    password?: string | null
    image?: string | null
    emailVerified?: Date | string | null
    role?: $Enums.UserRole
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    memberships?: OrganizationMembershipUncheckedCreateNestedManyWithoutUserInput
    assignedClients?: ClientUncheckedCreateNestedManyWithoutAssignedUsersInput
    mindmaps?: MindMapUncheckedCreateNestedManyWithoutOwnerUserInput
    affiliateLinks?: AffiliateLinkUncheckedCreateNestedManyWithoutUserInput
    calendarEvents?: CalendarEventUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    memberships?: OrganizationMembershipUpdateManyWithoutUserNestedInput
    assignedClients?: ClientUpdateManyWithoutAssignedUsersNestedInput
    mindmaps?: MindMapUpdateManyWithoutOwnerUserNestedInput
    affiliateLinks?: AffiliateLinkUpdateManyWithoutUserNestedInput
    calendarEvents?: CalendarEventUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    memberships?: OrganizationMembershipUncheckedUpdateManyWithoutUserNestedInput
    assignedClients?: ClientUncheckedUpdateManyWithoutAssignedUsersNestedInput
    mindmaps?: MindMapUncheckedUpdateManyWithoutOwnerUserNestedInput
    affiliateLinks?: AffiliateLinkUncheckedUpdateManyWithoutUserNestedInput
    calendarEvents?: CalendarEventUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    name?: string | null
    email: string
    password?: string | null
    image?: string | null
    emailVerified?: Date | string | null
    role?: $Enums.UserRole
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrganizationCreateInput = {
    id?: string
    name: string
    subdomain?: string | null
    billingPlan?: string | null
    createdAt?: Date | string
    memberships?: OrganizationMembershipCreateNestedManyWithoutOrganizationInput
    clients?: ClientCreateNestedManyWithoutOrganizationInput
    pipelines?: PipelineCreateNestedManyWithoutOrganizationInput
    invoices?: InvoiceCreateNestedManyWithoutOrganizationInput
    mindmaps?: MindMapCreateNestedManyWithoutOrganizationInput
    affiliateLinks?: AffiliateLinkCreateNestedManyWithoutOrganizationInput
    pipelineCards?: PipelineCardCreateNestedManyWithoutOrganizationInput
    transactions?: TransactionCreateNestedManyWithoutOrganizationInput
    subscriptions?: SubscriptionCreateNestedManyWithoutOrganizationInput
    emailSequences?: EmailSequenceCreateNestedManyWithoutOrganizationInput
    emailTemplates?: EmailTemplateCreateNestedManyWithoutOrganizationInput
    calendarEvents?: CalendarEventCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateInput = {
    id?: string
    name: string
    subdomain?: string | null
    billingPlan?: string | null
    createdAt?: Date | string
    memberships?: OrganizationMembershipUncheckedCreateNestedManyWithoutOrganizationInput
    clients?: ClientUncheckedCreateNestedManyWithoutOrganizationInput
    pipelines?: PipelineUncheckedCreateNestedManyWithoutOrganizationInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutOrganizationInput
    mindmaps?: MindMapUncheckedCreateNestedManyWithoutOrganizationInput
    affiliateLinks?: AffiliateLinkUncheckedCreateNestedManyWithoutOrganizationInput
    pipelineCards?: PipelineCardUncheckedCreateNestedManyWithoutOrganizationInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutOrganizationInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutOrganizationInput
    emailSequences?: EmailSequenceUncheckedCreateNestedManyWithoutOrganizationInput
    emailTemplates?: EmailTemplateUncheckedCreateNestedManyWithoutOrganizationInput
    calendarEvents?: CalendarEventUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: NullableStringFieldUpdateOperationsInput | string | null
    billingPlan?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    memberships?: OrganizationMembershipUpdateManyWithoutOrganizationNestedInput
    clients?: ClientUpdateManyWithoutOrganizationNestedInput
    pipelines?: PipelineUpdateManyWithoutOrganizationNestedInput
    invoices?: InvoiceUpdateManyWithoutOrganizationNestedInput
    mindmaps?: MindMapUpdateManyWithoutOrganizationNestedInput
    affiliateLinks?: AffiliateLinkUpdateManyWithoutOrganizationNestedInput
    pipelineCards?: PipelineCardUpdateManyWithoutOrganizationNestedInput
    transactions?: TransactionUpdateManyWithoutOrganizationNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutOrganizationNestedInput
    emailSequences?: EmailSequenceUpdateManyWithoutOrganizationNestedInput
    emailTemplates?: EmailTemplateUpdateManyWithoutOrganizationNestedInput
    calendarEvents?: CalendarEventUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: NullableStringFieldUpdateOperationsInput | string | null
    billingPlan?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    memberships?: OrganizationMembershipUncheckedUpdateManyWithoutOrganizationNestedInput
    clients?: ClientUncheckedUpdateManyWithoutOrganizationNestedInput
    pipelines?: PipelineUncheckedUpdateManyWithoutOrganizationNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutOrganizationNestedInput
    mindmaps?: MindMapUncheckedUpdateManyWithoutOrganizationNestedInput
    affiliateLinks?: AffiliateLinkUncheckedUpdateManyWithoutOrganizationNestedInput
    pipelineCards?: PipelineCardUncheckedUpdateManyWithoutOrganizationNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutOrganizationNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutOrganizationNestedInput
    emailSequences?: EmailSequenceUncheckedUpdateManyWithoutOrganizationNestedInput
    emailTemplates?: EmailTemplateUncheckedUpdateManyWithoutOrganizationNestedInput
    calendarEvents?: CalendarEventUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationCreateManyInput = {
    id?: string
    name: string
    subdomain?: string | null
    billingPlan?: string | null
    createdAt?: Date | string
  }

  export type OrganizationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: NullableStringFieldUpdateOperationsInput | string | null
    billingPlan?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrganizationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: NullableStringFieldUpdateOperationsInput | string | null
    billingPlan?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrganizationMembershipCreateInput = {
    id?: string
    role?: $Enums.OrgRole
    organization: OrganizationCreateNestedOneWithoutMembershipsInput
    user: UserCreateNestedOneWithoutMembershipsInput
    Client?: ClientCreateNestedManyWithoutAssignedToInput
  }

  export type OrganizationMembershipUncheckedCreateInput = {
    id?: string
    organizationId: string
    userId: string
    role?: $Enums.OrgRole
    Client?: ClientUncheckedCreateNestedManyWithoutAssignedToInput
  }

  export type OrganizationMembershipUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumOrgRoleFieldUpdateOperationsInput | $Enums.OrgRole
    organization?: OrganizationUpdateOneRequiredWithoutMembershipsNestedInput
    user?: UserUpdateOneRequiredWithoutMembershipsNestedInput
    Client?: ClientUpdateManyWithoutAssignedToNestedInput
  }

  export type OrganizationMembershipUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumOrgRoleFieldUpdateOperationsInput | $Enums.OrgRole
    Client?: ClientUncheckedUpdateManyWithoutAssignedToNestedInput
  }

  export type OrganizationMembershipCreateManyInput = {
    id?: string
    organizationId: string
    userId: string
    role?: $Enums.OrgRole
  }

  export type OrganizationMembershipUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumOrgRoleFieldUpdateOperationsInput | $Enums.OrgRole
  }

  export type OrganizationMembershipUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumOrgRoleFieldUpdateOperationsInput | $Enums.OrgRole
  }

  export type ClientCreateInput = {
    id?: string
    name: string
    email: string
    phone?: string | null
    company?: string | null
    stage?: $Enums.PipelineStage
    valueUsd?: number
    isPaid?: boolean
    isOnboarded?: boolean
    competitors?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    assignedTo?: OrganizationMembershipCreateNestedOneWithoutClientInput
    assignedUsers?: UserCreateNestedManyWithoutAssignedClientsInput
    organization: OrganizationCreateNestedOneWithoutClientsInput
    interactions?: InteractionCreateNestedManyWithoutClientInput
    invoices?: InvoiceCreateNestedManyWithoutClientInput
    sequences?: SequenceTargetCreateNestedManyWithoutClientInput
    pipelineCards?: PipelineCardCreateNestedManyWithoutClientInput
    campaigns?: CampaignCreateNestedManyWithoutClientInput
    EmailEvent?: EmailEventCreateNestedManyWithoutClientInput
    Subscription?: SubscriptionCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateInput = {
    id?: string
    organizationId: string
    name: string
    email: string
    phone?: string | null
    company?: string | null
    stage?: $Enums.PipelineStage
    valueUsd?: number
    isPaid?: boolean
    isOnboarded?: boolean
    competitors?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    assignedToMembershipId?: string | null
    assignedUsers?: UserUncheckedCreateNestedManyWithoutAssignedClientsInput
    interactions?: InteractionUncheckedCreateNestedManyWithoutClientInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutClientInput
    sequences?: SequenceTargetUncheckedCreateNestedManyWithoutClientInput
    pipelineCards?: PipelineCardUncheckedCreateNestedManyWithoutClientInput
    campaigns?: CampaignUncheckedCreateNestedManyWithoutClientInput
    EmailEvent?: EmailEventUncheckedCreateNestedManyWithoutClientInput
    Subscription?: SubscriptionUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    stage?: EnumPipelineStageFieldUpdateOperationsInput | $Enums.PipelineStage
    valueUsd?: IntFieldUpdateOperationsInput | number
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    isOnboarded?: BoolFieldUpdateOperationsInput | boolean
    competitors?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedTo?: OrganizationMembershipUpdateOneWithoutClientNestedInput
    assignedUsers?: UserUpdateManyWithoutAssignedClientsNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutClientsNestedInput
    interactions?: InteractionUpdateManyWithoutClientNestedInput
    invoices?: InvoiceUpdateManyWithoutClientNestedInput
    sequences?: SequenceTargetUpdateManyWithoutClientNestedInput
    pipelineCards?: PipelineCardUpdateManyWithoutClientNestedInput
    campaigns?: CampaignUpdateManyWithoutClientNestedInput
    EmailEvent?: EmailEventUpdateManyWithoutClientNestedInput
    Subscription?: SubscriptionUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    stage?: EnumPipelineStageFieldUpdateOperationsInput | $Enums.PipelineStage
    valueUsd?: IntFieldUpdateOperationsInput | number
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    isOnboarded?: BoolFieldUpdateOperationsInput | boolean
    competitors?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedToMembershipId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedUsers?: UserUncheckedUpdateManyWithoutAssignedClientsNestedInput
    interactions?: InteractionUncheckedUpdateManyWithoutClientNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutClientNestedInput
    sequences?: SequenceTargetUncheckedUpdateManyWithoutClientNestedInput
    pipelineCards?: PipelineCardUncheckedUpdateManyWithoutClientNestedInput
    campaigns?: CampaignUncheckedUpdateManyWithoutClientNestedInput
    EmailEvent?: EmailEventUncheckedUpdateManyWithoutClientNestedInput
    Subscription?: SubscriptionUncheckedUpdateManyWithoutClientNestedInput
  }

  export type ClientCreateManyInput = {
    id?: string
    organizationId: string
    name: string
    email: string
    phone?: string | null
    company?: string | null
    stage?: $Enums.PipelineStage
    valueUsd?: number
    isPaid?: boolean
    isOnboarded?: boolean
    competitors?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    assignedToMembershipId?: string | null
  }

  export type ClientUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    stage?: EnumPipelineStageFieldUpdateOperationsInput | $Enums.PipelineStage
    valueUsd?: IntFieldUpdateOperationsInput | number
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    isOnboarded?: BoolFieldUpdateOperationsInput | boolean
    competitors?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClientUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    stage?: EnumPipelineStageFieldUpdateOperationsInput | $Enums.PipelineStage
    valueUsd?: IntFieldUpdateOperationsInput | number
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    isOnboarded?: BoolFieldUpdateOperationsInput | boolean
    competitors?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedToMembershipId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InteractionCreateInput = {
    id?: string
    date?: Date | string
    type: $Enums.InteractionType
    summary: string
    client: ClientCreateNestedOneWithoutInteractionsInput
  }

  export type InteractionUncheckedCreateInput = {
    id?: string
    date?: Date | string
    type: $Enums.InteractionType
    summary: string
    clientId: string
  }

  export type InteractionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumInteractionTypeFieldUpdateOperationsInput | $Enums.InteractionType
    summary?: StringFieldUpdateOperationsInput | string
    client?: ClientUpdateOneRequiredWithoutInteractionsNestedInput
  }

  export type InteractionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumInteractionTypeFieldUpdateOperationsInput | $Enums.InteractionType
    summary?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
  }

  export type InteractionCreateManyInput = {
    id?: string
    date?: Date | string
    type: $Enums.InteractionType
    summary: string
    clientId: string
  }

  export type InteractionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumInteractionTypeFieldUpdateOperationsInput | $Enums.InteractionType
    summary?: StringFieldUpdateOperationsInput | string
  }

  export type InteractionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumInteractionTypeFieldUpdateOperationsInput | $Enums.InteractionType
    summary?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
  }

  export type PipelineCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutPipelinesInput
    stages?: PipelineStageModelCreateNestedManyWithoutPipelineInput
    pipelineCards?: PipelineCardCreateNestedManyWithoutPipelineInput
  }

  export type PipelineUncheckedCreateInput = {
    id?: string
    organizationId: string
    name: string
    createdAt?: Date | string
    stages?: PipelineStageModelUncheckedCreateNestedManyWithoutPipelineInput
    pipelineCards?: PipelineCardUncheckedCreateNestedManyWithoutPipelineInput
  }

  export type PipelineUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutPipelinesNestedInput
    stages?: PipelineStageModelUpdateManyWithoutPipelineNestedInput
    pipelineCards?: PipelineCardUpdateManyWithoutPipelineNestedInput
  }

  export type PipelineUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stages?: PipelineStageModelUncheckedUpdateManyWithoutPipelineNestedInput
    pipelineCards?: PipelineCardUncheckedUpdateManyWithoutPipelineNestedInput
  }

  export type PipelineCreateManyInput = {
    id?: string
    organizationId: string
    name: string
    createdAt?: Date | string
  }

  export type PipelineUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PipelineUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PipelineStageModelCreateInput = {
    id?: string
    name: string
    position: number
    pipeline: PipelineCreateNestedOneWithoutStagesInput
    cards?: PipelineCardCreateNestedManyWithoutStageInput
  }

  export type PipelineStageModelUncheckedCreateInput = {
    id?: string
    pipelineId: string
    name: string
    position: number
    cards?: PipelineCardUncheckedCreateNestedManyWithoutStageInput
  }

  export type PipelineStageModelUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    pipeline?: PipelineUpdateOneRequiredWithoutStagesNestedInput
    cards?: PipelineCardUpdateManyWithoutStageNestedInput
  }

  export type PipelineStageModelUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    pipelineId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    cards?: PipelineCardUncheckedUpdateManyWithoutStageNestedInput
  }

  export type PipelineStageModelCreateManyInput = {
    id?: string
    pipelineId: string
    name: string
    position: number
  }

  export type PipelineStageModelUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
  }

  export type PipelineStageModelUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    pipelineId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
  }

  export type PipelineCardCreateInput = {
    id?: string
    title: string
    value?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutPipelineCardsInput
    pipeline: PipelineCreateNestedOneWithoutPipelineCardsInput
    stage: PipelineStageModelCreateNestedOneWithoutCardsInput
    client: ClientCreateNestedOneWithoutPipelineCardsInput
  }

  export type PipelineCardUncheckedCreateInput = {
    id?: string
    organizationId: string
    pipelineId: string
    stageId: string
    clientId: string
    title: string
    value?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PipelineCardUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    value?: NullableFloatFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutPipelineCardsNestedInput
    pipeline?: PipelineUpdateOneRequiredWithoutPipelineCardsNestedInput
    stage?: PipelineStageModelUpdateOneRequiredWithoutCardsNestedInput
    client?: ClientUpdateOneRequiredWithoutPipelineCardsNestedInput
  }

  export type PipelineCardUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    pipelineId?: StringFieldUpdateOperationsInput | string
    stageId?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    value?: NullableFloatFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PipelineCardCreateManyInput = {
    id?: string
    organizationId: string
    pipelineId: string
    stageId: string
    clientId: string
    title: string
    value?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PipelineCardUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    value?: NullableFloatFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PipelineCardUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    pipelineId?: StringFieldUpdateOperationsInput | string
    stageId?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    value?: NullableFloatFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailTemplateCreateInput = {
    id?: string
    name: string
    subject: string
    html: string
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutEmailTemplatesInput
  }

  export type EmailTemplateUncheckedCreateInput = {
    id?: string
    organizationId: string
    name: string
    subject: string
    html: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmailTemplateUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    html?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutEmailTemplatesNestedInput
  }

  export type EmailTemplateUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    html?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailTemplateCreateManyInput = {
    id?: string
    organizationId: string
    name: string
    subject: string
    html: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmailTemplateUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    html?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailTemplateUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    html?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailSequenceCreateInput = {
    id?: string
    name: string
    sent?: number
    opens?: number
    clicks?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutEmailSequencesInput
    steps?: EmailStepCreateNestedManyWithoutSequenceInput
    targets?: SequenceTargetCreateNestedManyWithoutSequenceInput
    events?: EmailEventCreateNestedManyWithoutSequenceInput
  }

  export type EmailSequenceUncheckedCreateInput = {
    id?: string
    organizationId: string
    name: string
    sent?: number
    opens?: number
    clicks?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    steps?: EmailStepUncheckedCreateNestedManyWithoutSequenceInput
    targets?: SequenceTargetUncheckedCreateNestedManyWithoutSequenceInput
    events?: EmailEventUncheckedCreateNestedManyWithoutSequenceInput
  }

  export type EmailSequenceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    sent?: IntFieldUpdateOperationsInput | number
    opens?: IntFieldUpdateOperationsInput | number
    clicks?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutEmailSequencesNestedInput
    steps?: EmailStepUpdateManyWithoutSequenceNestedInput
    targets?: SequenceTargetUpdateManyWithoutSequenceNestedInput
    events?: EmailEventUpdateManyWithoutSequenceNestedInput
  }

  export type EmailSequenceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    sent?: IntFieldUpdateOperationsInput | number
    opens?: IntFieldUpdateOperationsInput | number
    clicks?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    steps?: EmailStepUncheckedUpdateManyWithoutSequenceNestedInput
    targets?: SequenceTargetUncheckedUpdateManyWithoutSequenceNestedInput
    events?: EmailEventUncheckedUpdateManyWithoutSequenceNestedInput
  }

  export type EmailSequenceCreateManyInput = {
    id?: string
    organizationId: string
    name: string
    sent?: number
    opens?: number
    clicks?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmailSequenceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    sent?: IntFieldUpdateOperationsInput | number
    opens?: IntFieldUpdateOperationsInput | number
    clicks?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailSequenceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    sent?: IntFieldUpdateOperationsInput | number
    opens?: IntFieldUpdateOperationsInput | number
    clicks?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailStepCreateInput = {
    id?: string
    subject: string
    body: string
    delayDays?: number
    sequence: EmailSequenceCreateNestedOneWithoutStepsInput
  }

  export type EmailStepUncheckedCreateInput = {
    id?: string
    subject: string
    body: string
    delayDays?: number
    sequenceId: string
  }

  export type EmailStepUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    delayDays?: IntFieldUpdateOperationsInput | number
    sequence?: EmailSequenceUpdateOneRequiredWithoutStepsNestedInput
  }

  export type EmailStepUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    delayDays?: IntFieldUpdateOperationsInput | number
    sequenceId?: StringFieldUpdateOperationsInput | string
  }

  export type EmailStepCreateManyInput = {
    id?: string
    subject: string
    body: string
    delayDays?: number
    sequenceId: string
  }

  export type EmailStepUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    delayDays?: IntFieldUpdateOperationsInput | number
  }

  export type EmailStepUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    delayDays?: IntFieldUpdateOperationsInput | number
    sequenceId?: StringFieldUpdateOperationsInput | string
  }

  export type SequenceTargetCreateInput = {
    sequence: EmailSequenceCreateNestedOneWithoutTargetsInput
    client: ClientCreateNestedOneWithoutSequencesInput
  }

  export type SequenceTargetUncheckedCreateInput = {
    sequenceId: string
    clientId: string
  }

  export type SequenceTargetUpdateInput = {
    sequence?: EmailSequenceUpdateOneRequiredWithoutTargetsNestedInput
    client?: ClientUpdateOneRequiredWithoutSequencesNestedInput
  }

  export type SequenceTargetUncheckedUpdateInput = {
    sequenceId?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
  }

  export type SequenceTargetCreateManyInput = {
    sequenceId: string
    clientId: string
  }

  export type SequenceTargetUpdateManyMutationInput = {

  }

  export type SequenceTargetUncheckedUpdateManyInput = {
    sequenceId?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
  }

  export type EmailEventCreateInput = {
    id?: string
    type: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    sequence?: EmailSequenceCreateNestedOneWithoutEventsInput
    client?: ClientCreateNestedOneWithoutEmailEventInput
  }

  export type EmailEventUncheckedCreateInput = {
    id?: string
    sequenceId?: string | null
    clientId?: string | null
    type: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type EmailEventUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sequence?: EmailSequenceUpdateOneWithoutEventsNestedInput
    client?: ClientUpdateOneWithoutEmailEventNestedInput
  }

  export type EmailEventUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sequenceId?: NullableStringFieldUpdateOperationsInput | string | null
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailEventCreateManyInput = {
    id?: string
    sequenceId?: string | null
    clientId?: string | null
    type: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type EmailEventUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailEventUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sequenceId?: NullableStringFieldUpdateOperationsInput | string | null
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvoiceCreateInput = {
    id?: string
    amountUsd: number
    status?: $Enums.InvoiceStatus
    dueDate: Date | string
    createdAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutInvoicesInput
    client: ClientCreateNestedOneWithoutInvoicesInput
    transactions?: TransactionCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceUncheckedCreateInput = {
    id?: string
    organizationId: string
    clientId: string
    amountUsd: number
    status?: $Enums.InvoiceStatus
    dueDate: Date | string
    createdAt?: Date | string
    transactions?: TransactionUncheckedCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    amountUsd?: IntFieldUpdateOperationsInput | number
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | $Enums.InvoiceStatus
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutInvoicesNestedInput
    client?: ClientUpdateOneRequiredWithoutInvoicesNestedInput
    transactions?: TransactionUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
    amountUsd?: IntFieldUpdateOperationsInput | number
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | $Enums.InvoiceStatus
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions?: TransactionUncheckedUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceCreateManyInput = {
    id?: string
    organizationId: string
    clientId: string
    amountUsd: number
    status?: $Enums.InvoiceStatus
    dueDate: Date | string
    createdAt?: Date | string
  }

  export type InvoiceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    amountUsd?: IntFieldUpdateOperationsInput | number
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | $Enums.InvoiceStatus
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvoiceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
    amountUsd?: IntFieldUpdateOperationsInput | number
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | $Enums.InvoiceStatus
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionCreateInput = {
    id?: string
    amount: number
    currency?: string
    gateway: string
    gatewayPayload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    invoice: InvoiceCreateNestedOneWithoutTransactionsInput
    organization?: OrganizationCreateNestedOneWithoutTransactionsInput
  }

  export type TransactionUncheckedCreateInput = {
    id?: string
    invoiceId: string
    organizationId?: string | null
    amount: number
    currency?: string
    gateway: string
    gatewayPayload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type TransactionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    gateway?: StringFieldUpdateOperationsInput | string
    gatewayPayload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invoice?: InvoiceUpdateOneRequiredWithoutTransactionsNestedInput
    organization?: OrganizationUpdateOneWithoutTransactionsNestedInput
  }

  export type TransactionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    invoiceId?: StringFieldUpdateOperationsInput | string
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    gateway?: StringFieldUpdateOperationsInput | string
    gatewayPayload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionCreateManyInput = {
    id?: string
    invoiceId: string
    organizationId?: string | null
    amount: number
    currency?: string
    gateway: string
    gatewayPayload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type TransactionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    gateway?: StringFieldUpdateOperationsInput | string
    gatewayPayload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    invoiceId?: StringFieldUpdateOperationsInput | string
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    gateway?: StringFieldUpdateOperationsInput | string
    gatewayPayload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionCreateInput = {
    id?: string
    status: string
    priceId?: string | null
    subscriptionId?: string | null
    currentPeriodEnd?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutSubscriptionsInput
    client?: ClientCreateNestedOneWithoutSubscriptionInput
  }

  export type SubscriptionUncheckedCreateInput = {
    id?: string
    organizationId: string
    clientId?: string | null
    status: string
    priceId?: string | null
    subscriptionId?: string | null
    currentPeriodEnd?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubscriptionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    priceId?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    currentPeriodEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutSubscriptionsNestedInput
    client?: ClientUpdateOneWithoutSubscriptionNestedInput
  }

  export type SubscriptionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    priceId?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    currentPeriodEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionCreateManyInput = {
    id?: string
    organizationId: string
    clientId?: string | null
    status: string
    priceId?: string | null
    subscriptionId?: string | null
    currentPeriodEnd?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubscriptionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    priceId?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    currentPeriodEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    priceId?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    currentPeriodEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CalendarEventCreateInput = {
    id?: string
    title: string
    start: Date | string
    end?: Date | string | null
    level?: string | null
    description?: string | null
    createdAt?: Date | string
    type?: $Enums.CalendarItemType
    allDay?: boolean
    location?: string | null
    reminders?: CalendarEventCreateremindersInput | number[]
    completed?: boolean
    seriesId?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    organization: OrganizationCreateNestedOneWithoutCalendarEventsInput
    createdBy?: UserCreateNestedOneWithoutCalendarEventsInput
  }

  export type CalendarEventUncheckedCreateInput = {
    id?: string
    organizationId: string
    title: string
    start: Date | string
    end?: Date | string | null
    level?: string | null
    description?: string | null
    createdById?: string | null
    createdAt?: Date | string
    type?: $Enums.CalendarItemType
    allDay?: boolean
    location?: string | null
    reminders?: CalendarEventCreateremindersInput | number[]
    completed?: boolean
    seriesId?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type CalendarEventUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    level?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumCalendarItemTypeFieldUpdateOperationsInput | $Enums.CalendarItemType
    allDay?: BoolFieldUpdateOperationsInput | boolean
    location?: NullableStringFieldUpdateOperationsInput | string | null
    reminders?: CalendarEventUpdateremindersInput | number[]
    completed?: BoolFieldUpdateOperationsInput | boolean
    seriesId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    organization?: OrganizationUpdateOneRequiredWithoutCalendarEventsNestedInput
    createdBy?: UserUpdateOneWithoutCalendarEventsNestedInput
  }

  export type CalendarEventUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    level?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumCalendarItemTypeFieldUpdateOperationsInput | $Enums.CalendarItemType
    allDay?: BoolFieldUpdateOperationsInput | boolean
    location?: NullableStringFieldUpdateOperationsInput | string | null
    reminders?: CalendarEventUpdateremindersInput | number[]
    completed?: BoolFieldUpdateOperationsInput | boolean
    seriesId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type CalendarEventCreateManyInput = {
    id?: string
    organizationId: string
    title: string
    start: Date | string
    end?: Date | string | null
    level?: string | null
    description?: string | null
    createdById?: string | null
    createdAt?: Date | string
    type?: $Enums.CalendarItemType
    allDay?: boolean
    location?: string | null
    reminders?: CalendarEventCreateremindersInput | number[]
    completed?: boolean
    seriesId?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type CalendarEventUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    level?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumCalendarItemTypeFieldUpdateOperationsInput | $Enums.CalendarItemType
    allDay?: BoolFieldUpdateOperationsInput | boolean
    location?: NullableStringFieldUpdateOperationsInput | string | null
    reminders?: CalendarEventUpdateremindersInput | number[]
    completed?: BoolFieldUpdateOperationsInput | boolean
    seriesId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type CalendarEventUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    level?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumCalendarItemTypeFieldUpdateOperationsInput | $Enums.CalendarItemType
    allDay?: BoolFieldUpdateOperationsInput | boolean
    location?: NullableStringFieldUpdateOperationsInput | string | null
    reminders?: CalendarEventUpdateremindersInput | number[]
    completed?: BoolFieldUpdateOperationsInput | boolean
    seriesId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type CampaignCreateInput = {
    id?: string
    name: string
    startDate?: Date | string | null
    endDate?: Date | string | null
    status?: $Enums.CampaignStatus
    metrics?: NullableJsonNullValueInput | InputJsonValue
    client: ClientCreateNestedOneWithoutCampaignsInput
  }

  export type CampaignUncheckedCreateInput = {
    id?: string
    clientId: string
    name: string
    startDate?: Date | string | null
    endDate?: Date | string | null
    status?: $Enums.CampaignStatus
    metrics?: NullableJsonNullValueInput | InputJsonValue
  }

  export type CampaignUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumCampaignStatusFieldUpdateOperationsInput | $Enums.CampaignStatus
    metrics?: NullableJsonNullValueInput | InputJsonValue
    client?: ClientUpdateOneRequiredWithoutCampaignsNestedInput
  }

  export type CampaignUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumCampaignStatusFieldUpdateOperationsInput | $Enums.CampaignStatus
    metrics?: NullableJsonNullValueInput | InputJsonValue
  }

  export type CampaignCreateManyInput = {
    id?: string
    clientId: string
    name: string
    startDate?: Date | string | null
    endDate?: Date | string | null
    status?: $Enums.CampaignStatus
    metrics?: NullableJsonNullValueInput | InputJsonValue
  }

  export type CampaignUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumCampaignStatusFieldUpdateOperationsInput | $Enums.CampaignStatus
    metrics?: NullableJsonNullValueInput | InputJsonValue
  }

  export type CampaignUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumCampaignStatusFieldUpdateOperationsInput | $Enums.CampaignStatus
    metrics?: NullableJsonNullValueInput | InputJsonValue
  }

  export type MindMapCreateInput = {
    id?: string
    data: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    organization?: OrganizationCreateNestedOneWithoutMindmapsInput
    ownerUser?: UserCreateNestedOneWithoutMindmapsInput
  }

  export type MindMapUncheckedCreateInput = {
    id?: string
    organizationId?: string | null
    ownerUserId?: string | null
    data: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type MindMapUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneWithoutMindmapsNestedInput
    ownerUser?: UserUpdateOneWithoutMindmapsNestedInput
  }

  export type MindMapUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    ownerUserId?: NullableStringFieldUpdateOperationsInput | string | null
    data?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MindMapCreateManyInput = {
    id?: string
    organizationId?: string | null
    ownerUserId?: string | null
    data: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type MindMapUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MindMapUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    ownerUserId?: NullableStringFieldUpdateOperationsInput | string | null
    data?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AffiliateLinkCreateInput = {
    id?: string
    code: string
    commissionRate?: number
    createdAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutAffiliateLinksInput
    user: UserCreateNestedOneWithoutAffiliateLinksInput
    clicks?: AffiliateClickCreateNestedManyWithoutAffiliateInput
  }

  export type AffiliateLinkUncheckedCreateInput = {
    id?: string
    organizationId: string
    userId: string
    code: string
    commissionRate?: number
    createdAt?: Date | string
    clicks?: AffiliateClickUncheckedCreateNestedManyWithoutAffiliateInput
  }

  export type AffiliateLinkUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    commissionRate?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutAffiliateLinksNestedInput
    user?: UserUpdateOneRequiredWithoutAffiliateLinksNestedInput
    clicks?: AffiliateClickUpdateManyWithoutAffiliateNestedInput
  }

  export type AffiliateLinkUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    commissionRate?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clicks?: AffiliateClickUncheckedUpdateManyWithoutAffiliateNestedInput
  }

  export type AffiliateLinkCreateManyInput = {
    id?: string
    organizationId: string
    userId: string
    code: string
    commissionRate?: number
    createdAt?: Date | string
  }

  export type AffiliateLinkUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    commissionRate?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AffiliateLinkUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    commissionRate?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AffiliateClickCreateInput = {
    id?: string
    visitorIp?: string | null
    userAgent?: string | null
    campaign?: string | null
    createdAt?: Date | string
    affiliate: AffiliateLinkCreateNestedOneWithoutClicksInput
  }

  export type AffiliateClickUncheckedCreateInput = {
    id?: string
    affiliateId: string
    visitorIp?: string | null
    userAgent?: string | null
    campaign?: string | null
    createdAt?: Date | string
  }

  export type AffiliateClickUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    visitorIp?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    campaign?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    affiliate?: AffiliateLinkUpdateOneRequiredWithoutClicksNestedInput
  }

  export type AffiliateClickUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    affiliateId?: StringFieldUpdateOperationsInput | string
    visitorIp?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    campaign?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AffiliateClickCreateManyInput = {
    id?: string
    affiliateId: string
    visitorIp?: string | null
    userAgent?: string | null
    campaign?: string | null
    createdAt?: Date | string
  }

  export type AffiliateClickUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    visitorIp?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    campaign?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AffiliateClickUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    affiliateId?: StringFieldUpdateOperationsInput | string
    visitorIp?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    campaign?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountCreateInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    user: UserCreateNestedOneWithoutAccountsInput
  }

  export type AccountUncheckedCreateInput = {
    id?: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutAccountsNestedInput
  }

  export type AccountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountCreateManyInput = {
    id?: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionCreateInput = {
    id?: string
    sessionToken: string
    expires: Date | string
    user: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateInput = {
    id?: string
    sessionToken: string
    userId: string
    expires: Date | string
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateManyInput = {
    id?: string
    sessionToken: string
    userId: string
    expires: Date | string
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenCreateInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUncheckedCreateInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUpdateInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenUncheckedUpdateInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenCreateManyInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUpdateManyMutationInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenUncheckedUpdateManyInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type AccountListRelationFilter = {
    every?: AccountWhereInput
    some?: AccountWhereInput
    none?: AccountWhereInput
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type OrganizationMembershipListRelationFilter = {
    every?: OrganizationMembershipWhereInput
    some?: OrganizationMembershipWhereInput
    none?: OrganizationMembershipWhereInput
  }

  export type ClientListRelationFilter = {
    every?: ClientWhereInput
    some?: ClientWhereInput
    none?: ClientWhereInput
  }

  export type MindMapListRelationFilter = {
    every?: MindMapWhereInput
    some?: MindMapWhereInput
    none?: MindMapWhereInput
  }

  export type AffiliateLinkListRelationFilter = {
    every?: AffiliateLinkWhereInput
    some?: AffiliateLinkWhereInput
    none?: AffiliateLinkWhereInput
  }

  export type CalendarEventListRelationFilter = {
    every?: CalendarEventWhereInput
    some?: CalendarEventWhereInput
    none?: CalendarEventWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AccountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrganizationMembershipOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClientOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MindMapOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AffiliateLinkOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CalendarEventOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    image?: SortOrder
    emailVerified?: SortOrder
    role?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    image?: SortOrder
    emailVerified?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    image?: SortOrder
    emailVerified?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type PipelineListRelationFilter = {
    every?: PipelineWhereInput
    some?: PipelineWhereInput
    none?: PipelineWhereInput
  }

  export type InvoiceListRelationFilter = {
    every?: InvoiceWhereInput
    some?: InvoiceWhereInput
    none?: InvoiceWhereInput
  }

  export type PipelineCardListRelationFilter = {
    every?: PipelineCardWhereInput
    some?: PipelineCardWhereInput
    none?: PipelineCardWhereInput
  }

  export type TransactionListRelationFilter = {
    every?: TransactionWhereInput
    some?: TransactionWhereInput
    none?: TransactionWhereInput
  }

  export type SubscriptionListRelationFilter = {
    every?: SubscriptionWhereInput
    some?: SubscriptionWhereInput
    none?: SubscriptionWhereInput
  }

  export type EmailSequenceListRelationFilter = {
    every?: EmailSequenceWhereInput
    some?: EmailSequenceWhereInput
    none?: EmailSequenceWhereInput
  }

  export type EmailTemplateListRelationFilter = {
    every?: EmailTemplateWhereInput
    some?: EmailTemplateWhereInput
    none?: EmailTemplateWhereInput
  }

  export type PipelineOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InvoiceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PipelineCardOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TransactionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SubscriptionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EmailSequenceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EmailTemplateOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrganizationCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    subdomain?: SortOrder
    billingPlan?: SortOrder
    createdAt?: SortOrder
  }

  export type OrganizationMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    subdomain?: SortOrder
    billingPlan?: SortOrder
    createdAt?: SortOrder
  }

  export type OrganizationMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    subdomain?: SortOrder
    billingPlan?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumOrgRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.OrgRole | EnumOrgRoleFieldRefInput<$PrismaModel>
    in?: $Enums.OrgRole[] | ListEnumOrgRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrgRole[] | ListEnumOrgRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumOrgRoleFilter<$PrismaModel> | $Enums.OrgRole
  }

  export type OrganizationScalarRelationFilter = {
    is?: OrganizationWhereInput
    isNot?: OrganizationWhereInput
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type OrganizationMembershipOrganizationIdUserIdCompoundUniqueInput = {
    organizationId: string
    userId: string
  }

  export type OrganizationMembershipCountOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
  }

  export type OrganizationMembershipMaxOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
  }

  export type OrganizationMembershipMinOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
  }

  export type EnumOrgRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OrgRole | EnumOrgRoleFieldRefInput<$PrismaModel>
    in?: $Enums.OrgRole[] | ListEnumOrgRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrgRole[] | ListEnumOrgRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumOrgRoleWithAggregatesFilter<$PrismaModel> | $Enums.OrgRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOrgRoleFilter<$PrismaModel>
    _max?: NestedEnumOrgRoleFilter<$PrismaModel>
  }

  export type EnumPipelineStageFilter<$PrismaModel = never> = {
    equals?: $Enums.PipelineStage | EnumPipelineStageFieldRefInput<$PrismaModel>
    in?: $Enums.PipelineStage[] | ListEnumPipelineStageFieldRefInput<$PrismaModel>
    notIn?: $Enums.PipelineStage[] | ListEnumPipelineStageFieldRefInput<$PrismaModel>
    not?: NestedEnumPipelineStageFilter<$PrismaModel> | $Enums.PipelineStage
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type OrganizationMembershipNullableScalarRelationFilter = {
    is?: OrganizationMembershipWhereInput | null
    isNot?: OrganizationMembershipWhereInput | null
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type InteractionListRelationFilter = {
    every?: InteractionWhereInput
    some?: InteractionWhereInput
    none?: InteractionWhereInput
  }

  export type SequenceTargetListRelationFilter = {
    every?: SequenceTargetWhereInput
    some?: SequenceTargetWhereInput
    none?: SequenceTargetWhereInput
  }

  export type CampaignListRelationFilter = {
    every?: CampaignWhereInput
    some?: CampaignWhereInput
    none?: CampaignWhereInput
  }

  export type EmailEventListRelationFilter = {
    every?: EmailEventWhereInput
    some?: EmailEventWhereInput
    none?: EmailEventWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InteractionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SequenceTargetOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CampaignOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EmailEventOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClientCountOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    company?: SortOrder
    stage?: SortOrder
    valueUsd?: SortOrder
    isPaid?: SortOrder
    isOnboarded?: SortOrder
    competitors?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    assignedToMembershipId?: SortOrder
  }

  export type ClientAvgOrderByAggregateInput = {
    valueUsd?: SortOrder
  }

  export type ClientMaxOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    company?: SortOrder
    stage?: SortOrder
    valueUsd?: SortOrder
    isPaid?: SortOrder
    isOnboarded?: SortOrder
    createdAt?: SortOrder
    assignedToMembershipId?: SortOrder
  }

  export type ClientMinOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    company?: SortOrder
    stage?: SortOrder
    valueUsd?: SortOrder
    isPaid?: SortOrder
    isOnboarded?: SortOrder
    createdAt?: SortOrder
    assignedToMembershipId?: SortOrder
  }

  export type ClientSumOrderByAggregateInput = {
    valueUsd?: SortOrder
  }

  export type EnumPipelineStageWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PipelineStage | EnumPipelineStageFieldRefInput<$PrismaModel>
    in?: $Enums.PipelineStage[] | ListEnumPipelineStageFieldRefInput<$PrismaModel>
    notIn?: $Enums.PipelineStage[] | ListEnumPipelineStageFieldRefInput<$PrismaModel>
    not?: NestedEnumPipelineStageWithAggregatesFilter<$PrismaModel> | $Enums.PipelineStage
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPipelineStageFilter<$PrismaModel>
    _max?: NestedEnumPipelineStageFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumInteractionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.InteractionType | EnumInteractionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.InteractionType[] | ListEnumInteractionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.InteractionType[] | ListEnumInteractionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumInteractionTypeFilter<$PrismaModel> | $Enums.InteractionType
  }

  export type ClientScalarRelationFilter = {
    is?: ClientWhereInput
    isNot?: ClientWhereInput
  }

  export type InteractionCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    type?: SortOrder
    summary?: SortOrder
    clientId?: SortOrder
  }

  export type InteractionMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    type?: SortOrder
    summary?: SortOrder
    clientId?: SortOrder
  }

  export type InteractionMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    type?: SortOrder
    summary?: SortOrder
    clientId?: SortOrder
  }

  export type EnumInteractionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.InteractionType | EnumInteractionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.InteractionType[] | ListEnumInteractionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.InteractionType[] | ListEnumInteractionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumInteractionTypeWithAggregatesFilter<$PrismaModel> | $Enums.InteractionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumInteractionTypeFilter<$PrismaModel>
    _max?: NestedEnumInteractionTypeFilter<$PrismaModel>
  }

  export type PipelineStageModelListRelationFilter = {
    every?: PipelineStageModelWhereInput
    some?: PipelineStageModelWhereInput
    none?: PipelineStageModelWhereInput
  }

  export type PipelineStageModelOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PipelineCountOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
  }

  export type PipelineMaxOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
  }

  export type PipelineMinOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
  }

  export type PipelineScalarRelationFilter = {
    is?: PipelineWhereInput
    isNot?: PipelineWhereInput
  }

  export type PipelineStageModelCountOrderByAggregateInput = {
    id?: SortOrder
    pipelineId?: SortOrder
    name?: SortOrder
    position?: SortOrder
  }

  export type PipelineStageModelAvgOrderByAggregateInput = {
    position?: SortOrder
  }

  export type PipelineStageModelMaxOrderByAggregateInput = {
    id?: SortOrder
    pipelineId?: SortOrder
    name?: SortOrder
    position?: SortOrder
  }

  export type PipelineStageModelMinOrderByAggregateInput = {
    id?: SortOrder
    pipelineId?: SortOrder
    name?: SortOrder
    position?: SortOrder
  }

  export type PipelineStageModelSumOrderByAggregateInput = {
    position?: SortOrder
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type PipelineStageModelScalarRelationFilter = {
    is?: PipelineStageModelWhereInput
    isNot?: PipelineStageModelWhereInput
  }

  export type PipelineCardCountOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    pipelineId?: SortOrder
    stageId?: SortOrder
    clientId?: SortOrder
    title?: SortOrder
    value?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PipelineCardAvgOrderByAggregateInput = {
    value?: SortOrder
  }

  export type PipelineCardMaxOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    pipelineId?: SortOrder
    stageId?: SortOrder
    clientId?: SortOrder
    title?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PipelineCardMinOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    pipelineId?: SortOrder
    stageId?: SortOrder
    clientId?: SortOrder
    title?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PipelineCardSumOrderByAggregateInput = {
    value?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type EmailTemplateCountOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    name?: SortOrder
    subject?: SortOrder
    html?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmailTemplateMaxOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    name?: SortOrder
    subject?: SortOrder
    html?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmailTemplateMinOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    name?: SortOrder
    subject?: SortOrder
    html?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmailStepListRelationFilter = {
    every?: EmailStepWhereInput
    some?: EmailStepWhereInput
    none?: EmailStepWhereInput
  }

  export type EmailStepOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EmailSequenceCountOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    name?: SortOrder
    sent?: SortOrder
    opens?: SortOrder
    clicks?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmailSequenceAvgOrderByAggregateInput = {
    sent?: SortOrder
    opens?: SortOrder
    clicks?: SortOrder
  }

  export type EmailSequenceMaxOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    name?: SortOrder
    sent?: SortOrder
    opens?: SortOrder
    clicks?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmailSequenceMinOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    name?: SortOrder
    sent?: SortOrder
    opens?: SortOrder
    clicks?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmailSequenceSumOrderByAggregateInput = {
    sent?: SortOrder
    opens?: SortOrder
    clicks?: SortOrder
  }

  export type EmailSequenceScalarRelationFilter = {
    is?: EmailSequenceWhereInput
    isNot?: EmailSequenceWhereInput
  }

  export type EmailStepCountOrderByAggregateInput = {
    id?: SortOrder
    subject?: SortOrder
    body?: SortOrder
    delayDays?: SortOrder
    sequenceId?: SortOrder
  }

  export type EmailStepAvgOrderByAggregateInput = {
    delayDays?: SortOrder
  }

  export type EmailStepMaxOrderByAggregateInput = {
    id?: SortOrder
    subject?: SortOrder
    body?: SortOrder
    delayDays?: SortOrder
    sequenceId?: SortOrder
  }

  export type EmailStepMinOrderByAggregateInput = {
    id?: SortOrder
    subject?: SortOrder
    body?: SortOrder
    delayDays?: SortOrder
    sequenceId?: SortOrder
  }

  export type EmailStepSumOrderByAggregateInput = {
    delayDays?: SortOrder
  }

  export type SequenceTargetSequenceIdClientIdCompoundUniqueInput = {
    sequenceId: string
    clientId: string
  }

  export type SequenceTargetCountOrderByAggregateInput = {
    sequenceId?: SortOrder
    clientId?: SortOrder
  }

  export type SequenceTargetMaxOrderByAggregateInput = {
    sequenceId?: SortOrder
    clientId?: SortOrder
  }

  export type SequenceTargetMinOrderByAggregateInput = {
    sequenceId?: SortOrder
    clientId?: SortOrder
  }

  export type EmailSequenceNullableScalarRelationFilter = {
    is?: EmailSequenceWhereInput | null
    isNot?: EmailSequenceWhereInput | null
  }

  export type ClientNullableScalarRelationFilter = {
    is?: ClientWhereInput | null
    isNot?: ClientWhereInput | null
  }

  export type EmailEventCountOrderByAggregateInput = {
    id?: SortOrder
    sequenceId?: SortOrder
    clientId?: SortOrder
    type?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
  }

  export type EmailEventMaxOrderByAggregateInput = {
    id?: SortOrder
    sequenceId?: SortOrder
    clientId?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
  }

  export type EmailEventMinOrderByAggregateInput = {
    id?: SortOrder
    sequenceId?: SortOrder
    clientId?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumInvoiceStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.InvoiceStatus | EnumInvoiceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.InvoiceStatus[] | ListEnumInvoiceStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.InvoiceStatus[] | ListEnumInvoiceStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumInvoiceStatusFilter<$PrismaModel> | $Enums.InvoiceStatus
  }

  export type InvoiceCountOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    clientId?: SortOrder
    amountUsd?: SortOrder
    status?: SortOrder
    dueDate?: SortOrder
    createdAt?: SortOrder
  }

  export type InvoiceAvgOrderByAggregateInput = {
    amountUsd?: SortOrder
  }

  export type InvoiceMaxOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    clientId?: SortOrder
    amountUsd?: SortOrder
    status?: SortOrder
    dueDate?: SortOrder
    createdAt?: SortOrder
  }

  export type InvoiceMinOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    clientId?: SortOrder
    amountUsd?: SortOrder
    status?: SortOrder
    dueDate?: SortOrder
    createdAt?: SortOrder
  }

  export type InvoiceSumOrderByAggregateInput = {
    amountUsd?: SortOrder
  }

  export type EnumInvoiceStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.InvoiceStatus | EnumInvoiceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.InvoiceStatus[] | ListEnumInvoiceStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.InvoiceStatus[] | ListEnumInvoiceStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumInvoiceStatusWithAggregatesFilter<$PrismaModel> | $Enums.InvoiceStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumInvoiceStatusFilter<$PrismaModel>
    _max?: NestedEnumInvoiceStatusFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type InvoiceScalarRelationFilter = {
    is?: InvoiceWhereInput
    isNot?: InvoiceWhereInput
  }

  export type OrganizationNullableScalarRelationFilter = {
    is?: OrganizationWhereInput | null
    isNot?: OrganizationWhereInput | null
  }

  export type TransactionCountOrderByAggregateInput = {
    id?: SortOrder
    invoiceId?: SortOrder
    organizationId?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    gateway?: SortOrder
    gatewayPayload?: SortOrder
    createdAt?: SortOrder
  }

  export type TransactionAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type TransactionMaxOrderByAggregateInput = {
    id?: SortOrder
    invoiceId?: SortOrder
    organizationId?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    gateway?: SortOrder
    createdAt?: SortOrder
  }

  export type TransactionMinOrderByAggregateInput = {
    id?: SortOrder
    invoiceId?: SortOrder
    organizationId?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    gateway?: SortOrder
    createdAt?: SortOrder
  }

  export type TransactionSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type SubscriptionCountOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    clientId?: SortOrder
    status?: SortOrder
    priceId?: SortOrder
    subscriptionId?: SortOrder
    currentPeriodEnd?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SubscriptionMaxOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    clientId?: SortOrder
    status?: SortOrder
    priceId?: SortOrder
    subscriptionId?: SortOrder
    currentPeriodEnd?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SubscriptionMinOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    clientId?: SortOrder
    status?: SortOrder
    priceId?: SortOrder
    subscriptionId?: SortOrder
    currentPeriodEnd?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumCalendarItemTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.CalendarItemType | EnumCalendarItemTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CalendarItemType[] | ListEnumCalendarItemTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CalendarItemType[] | ListEnumCalendarItemTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCalendarItemTypeFilter<$PrismaModel> | $Enums.CalendarItemType
  }

  export type IntNullableListFilter<$PrismaModel = never> = {
    equals?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    has?: number | IntFieldRefInput<$PrismaModel> | null
    hasEvery?: number[] | ListIntFieldRefInput<$PrismaModel>
    hasSome?: number[] | ListIntFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type CalendarEventCountOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    title?: SortOrder
    start?: SortOrder
    end?: SortOrder
    level?: SortOrder
    description?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    type?: SortOrder
    allDay?: SortOrder
    location?: SortOrder
    reminders?: SortOrder
    completed?: SortOrder
    seriesId?: SortOrder
    metadata?: SortOrder
  }

  export type CalendarEventAvgOrderByAggregateInput = {
    reminders?: SortOrder
  }

  export type CalendarEventMaxOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    title?: SortOrder
    start?: SortOrder
    end?: SortOrder
    level?: SortOrder
    description?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    type?: SortOrder
    allDay?: SortOrder
    location?: SortOrder
    completed?: SortOrder
    seriesId?: SortOrder
  }

  export type CalendarEventMinOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    title?: SortOrder
    start?: SortOrder
    end?: SortOrder
    level?: SortOrder
    description?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    type?: SortOrder
    allDay?: SortOrder
    location?: SortOrder
    completed?: SortOrder
    seriesId?: SortOrder
  }

  export type CalendarEventSumOrderByAggregateInput = {
    reminders?: SortOrder
  }

  export type EnumCalendarItemTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CalendarItemType | EnumCalendarItemTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CalendarItemType[] | ListEnumCalendarItemTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CalendarItemType[] | ListEnumCalendarItemTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCalendarItemTypeWithAggregatesFilter<$PrismaModel> | $Enums.CalendarItemType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCalendarItemTypeFilter<$PrismaModel>
    _max?: NestedEnumCalendarItemTypeFilter<$PrismaModel>
  }

  export type EnumCampaignStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.CampaignStatus | EnumCampaignStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CampaignStatus[] | ListEnumCampaignStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CampaignStatus[] | ListEnumCampaignStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCampaignStatusFilter<$PrismaModel> | $Enums.CampaignStatus
  }

  export type CampaignCountOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    name?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    status?: SortOrder
    metrics?: SortOrder
  }

  export type CampaignMaxOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    name?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    status?: SortOrder
  }

  export type CampaignMinOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    name?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    status?: SortOrder
  }

  export type EnumCampaignStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CampaignStatus | EnumCampaignStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CampaignStatus[] | ListEnumCampaignStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CampaignStatus[] | ListEnumCampaignStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCampaignStatusWithAggregatesFilter<$PrismaModel> | $Enums.CampaignStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCampaignStatusFilter<$PrismaModel>
    _max?: NestedEnumCampaignStatusFilter<$PrismaModel>
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type MindMapCountOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    ownerUserId?: SortOrder
    data?: SortOrder
    createdAt?: SortOrder
  }

  export type MindMapMaxOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    ownerUserId?: SortOrder
    createdAt?: SortOrder
  }

  export type MindMapMinOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    ownerUserId?: SortOrder
    createdAt?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type AffiliateClickListRelationFilter = {
    every?: AffiliateClickWhereInput
    some?: AffiliateClickWhereInput
    none?: AffiliateClickWhereInput
  }

  export type AffiliateClickOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AffiliateLinkCountOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    userId?: SortOrder
    code?: SortOrder
    commissionRate?: SortOrder
    createdAt?: SortOrder
  }

  export type AffiliateLinkAvgOrderByAggregateInput = {
    commissionRate?: SortOrder
  }

  export type AffiliateLinkMaxOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    userId?: SortOrder
    code?: SortOrder
    commissionRate?: SortOrder
    createdAt?: SortOrder
  }

  export type AffiliateLinkMinOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    userId?: SortOrder
    code?: SortOrder
    commissionRate?: SortOrder
    createdAt?: SortOrder
  }

  export type AffiliateLinkSumOrderByAggregateInput = {
    commissionRate?: SortOrder
  }

  export type AffiliateLinkScalarRelationFilter = {
    is?: AffiliateLinkWhereInput
    isNot?: AffiliateLinkWhereInput
  }

  export type AffiliateClickCountOrderByAggregateInput = {
    id?: SortOrder
    affiliateId?: SortOrder
    visitorIp?: SortOrder
    userAgent?: SortOrder
    campaign?: SortOrder
    createdAt?: SortOrder
  }

  export type AffiliateClickMaxOrderByAggregateInput = {
    id?: SortOrder
    affiliateId?: SortOrder
    visitorIp?: SortOrder
    userAgent?: SortOrder
    campaign?: SortOrder
    createdAt?: SortOrder
  }

  export type AffiliateClickMinOrderByAggregateInput = {
    id?: SortOrder
    affiliateId?: SortOrder
    visitorIp?: SortOrder
    userAgent?: SortOrder
    campaign?: SortOrder
    createdAt?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type AccountProviderProviderAccountIdCompoundUniqueInput = {
    provider: string
    providerAccountId: string
  }

  export type AccountCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountAvgOrderByAggregateInput = {
    expires_at?: SortOrder
  }

  export type AccountMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountSumOrderByAggregateInput = {
    expires_at?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenIdentifierTokenCompoundUniqueInput = {
    identifier: string
    token: string
  }

  export type VerificationTokenCountOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenMaxOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenMinOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type AccountCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type OrganizationMembershipCreateNestedManyWithoutUserInput = {
    create?: XOR<OrganizationMembershipCreateWithoutUserInput, OrganizationMembershipUncheckedCreateWithoutUserInput> | OrganizationMembershipCreateWithoutUserInput[] | OrganizationMembershipUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrganizationMembershipCreateOrConnectWithoutUserInput | OrganizationMembershipCreateOrConnectWithoutUserInput[]
    createMany?: OrganizationMembershipCreateManyUserInputEnvelope
    connect?: OrganizationMembershipWhereUniqueInput | OrganizationMembershipWhereUniqueInput[]
  }

  export type ClientCreateNestedManyWithoutAssignedUsersInput = {
    create?: XOR<ClientCreateWithoutAssignedUsersInput, ClientUncheckedCreateWithoutAssignedUsersInput> | ClientCreateWithoutAssignedUsersInput[] | ClientUncheckedCreateWithoutAssignedUsersInput[]
    connectOrCreate?: ClientCreateOrConnectWithoutAssignedUsersInput | ClientCreateOrConnectWithoutAssignedUsersInput[]
    connect?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
  }

  export type MindMapCreateNestedManyWithoutOwnerUserInput = {
    create?: XOR<MindMapCreateWithoutOwnerUserInput, MindMapUncheckedCreateWithoutOwnerUserInput> | MindMapCreateWithoutOwnerUserInput[] | MindMapUncheckedCreateWithoutOwnerUserInput[]
    connectOrCreate?: MindMapCreateOrConnectWithoutOwnerUserInput | MindMapCreateOrConnectWithoutOwnerUserInput[]
    createMany?: MindMapCreateManyOwnerUserInputEnvelope
    connect?: MindMapWhereUniqueInput | MindMapWhereUniqueInput[]
  }

  export type AffiliateLinkCreateNestedManyWithoutUserInput = {
    create?: XOR<AffiliateLinkCreateWithoutUserInput, AffiliateLinkUncheckedCreateWithoutUserInput> | AffiliateLinkCreateWithoutUserInput[] | AffiliateLinkUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AffiliateLinkCreateOrConnectWithoutUserInput | AffiliateLinkCreateOrConnectWithoutUserInput[]
    createMany?: AffiliateLinkCreateManyUserInputEnvelope
    connect?: AffiliateLinkWhereUniqueInput | AffiliateLinkWhereUniqueInput[]
  }

  export type CalendarEventCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<CalendarEventCreateWithoutCreatedByInput, CalendarEventUncheckedCreateWithoutCreatedByInput> | CalendarEventCreateWithoutCreatedByInput[] | CalendarEventUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: CalendarEventCreateOrConnectWithoutCreatedByInput | CalendarEventCreateOrConnectWithoutCreatedByInput[]
    createMany?: CalendarEventCreateManyCreatedByInputEnvelope
    connect?: CalendarEventWhereUniqueInput | CalendarEventWhereUniqueInput[]
  }

  export type AccountUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type OrganizationMembershipUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<OrganizationMembershipCreateWithoutUserInput, OrganizationMembershipUncheckedCreateWithoutUserInput> | OrganizationMembershipCreateWithoutUserInput[] | OrganizationMembershipUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrganizationMembershipCreateOrConnectWithoutUserInput | OrganizationMembershipCreateOrConnectWithoutUserInput[]
    createMany?: OrganizationMembershipCreateManyUserInputEnvelope
    connect?: OrganizationMembershipWhereUniqueInput | OrganizationMembershipWhereUniqueInput[]
  }

  export type ClientUncheckedCreateNestedManyWithoutAssignedUsersInput = {
    create?: XOR<ClientCreateWithoutAssignedUsersInput, ClientUncheckedCreateWithoutAssignedUsersInput> | ClientCreateWithoutAssignedUsersInput[] | ClientUncheckedCreateWithoutAssignedUsersInput[]
    connectOrCreate?: ClientCreateOrConnectWithoutAssignedUsersInput | ClientCreateOrConnectWithoutAssignedUsersInput[]
    connect?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
  }

  export type MindMapUncheckedCreateNestedManyWithoutOwnerUserInput = {
    create?: XOR<MindMapCreateWithoutOwnerUserInput, MindMapUncheckedCreateWithoutOwnerUserInput> | MindMapCreateWithoutOwnerUserInput[] | MindMapUncheckedCreateWithoutOwnerUserInput[]
    connectOrCreate?: MindMapCreateOrConnectWithoutOwnerUserInput | MindMapCreateOrConnectWithoutOwnerUserInput[]
    createMany?: MindMapCreateManyOwnerUserInputEnvelope
    connect?: MindMapWhereUniqueInput | MindMapWhereUniqueInput[]
  }

  export type AffiliateLinkUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AffiliateLinkCreateWithoutUserInput, AffiliateLinkUncheckedCreateWithoutUserInput> | AffiliateLinkCreateWithoutUserInput[] | AffiliateLinkUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AffiliateLinkCreateOrConnectWithoutUserInput | AffiliateLinkCreateOrConnectWithoutUserInput[]
    createMany?: AffiliateLinkCreateManyUserInputEnvelope
    connect?: AffiliateLinkWhereUniqueInput | AffiliateLinkWhereUniqueInput[]
  }

  export type CalendarEventUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<CalendarEventCreateWithoutCreatedByInput, CalendarEventUncheckedCreateWithoutCreatedByInput> | CalendarEventCreateWithoutCreatedByInput[] | CalendarEventUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: CalendarEventCreateOrConnectWithoutCreatedByInput | CalendarEventCreateOrConnectWithoutCreatedByInput[]
    createMany?: CalendarEventCreateManyCreatedByInputEnvelope
    connect?: CalendarEventWhereUniqueInput | CalendarEventWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type AccountUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type SessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type OrganizationMembershipUpdateManyWithoutUserNestedInput = {
    create?: XOR<OrganizationMembershipCreateWithoutUserInput, OrganizationMembershipUncheckedCreateWithoutUserInput> | OrganizationMembershipCreateWithoutUserInput[] | OrganizationMembershipUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrganizationMembershipCreateOrConnectWithoutUserInput | OrganizationMembershipCreateOrConnectWithoutUserInput[]
    upsert?: OrganizationMembershipUpsertWithWhereUniqueWithoutUserInput | OrganizationMembershipUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OrganizationMembershipCreateManyUserInputEnvelope
    set?: OrganizationMembershipWhereUniqueInput | OrganizationMembershipWhereUniqueInput[]
    disconnect?: OrganizationMembershipWhereUniqueInput | OrganizationMembershipWhereUniqueInput[]
    delete?: OrganizationMembershipWhereUniqueInput | OrganizationMembershipWhereUniqueInput[]
    connect?: OrganizationMembershipWhereUniqueInput | OrganizationMembershipWhereUniqueInput[]
    update?: OrganizationMembershipUpdateWithWhereUniqueWithoutUserInput | OrganizationMembershipUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OrganizationMembershipUpdateManyWithWhereWithoutUserInput | OrganizationMembershipUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OrganizationMembershipScalarWhereInput | OrganizationMembershipScalarWhereInput[]
  }

  export type ClientUpdateManyWithoutAssignedUsersNestedInput = {
    create?: XOR<ClientCreateWithoutAssignedUsersInput, ClientUncheckedCreateWithoutAssignedUsersInput> | ClientCreateWithoutAssignedUsersInput[] | ClientUncheckedCreateWithoutAssignedUsersInput[]
    connectOrCreate?: ClientCreateOrConnectWithoutAssignedUsersInput | ClientCreateOrConnectWithoutAssignedUsersInput[]
    upsert?: ClientUpsertWithWhereUniqueWithoutAssignedUsersInput | ClientUpsertWithWhereUniqueWithoutAssignedUsersInput[]
    set?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    disconnect?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    delete?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    connect?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    update?: ClientUpdateWithWhereUniqueWithoutAssignedUsersInput | ClientUpdateWithWhereUniqueWithoutAssignedUsersInput[]
    updateMany?: ClientUpdateManyWithWhereWithoutAssignedUsersInput | ClientUpdateManyWithWhereWithoutAssignedUsersInput[]
    deleteMany?: ClientScalarWhereInput | ClientScalarWhereInput[]
  }

  export type MindMapUpdateManyWithoutOwnerUserNestedInput = {
    create?: XOR<MindMapCreateWithoutOwnerUserInput, MindMapUncheckedCreateWithoutOwnerUserInput> | MindMapCreateWithoutOwnerUserInput[] | MindMapUncheckedCreateWithoutOwnerUserInput[]
    connectOrCreate?: MindMapCreateOrConnectWithoutOwnerUserInput | MindMapCreateOrConnectWithoutOwnerUserInput[]
    upsert?: MindMapUpsertWithWhereUniqueWithoutOwnerUserInput | MindMapUpsertWithWhereUniqueWithoutOwnerUserInput[]
    createMany?: MindMapCreateManyOwnerUserInputEnvelope
    set?: MindMapWhereUniqueInput | MindMapWhereUniqueInput[]
    disconnect?: MindMapWhereUniqueInput | MindMapWhereUniqueInput[]
    delete?: MindMapWhereUniqueInput | MindMapWhereUniqueInput[]
    connect?: MindMapWhereUniqueInput | MindMapWhereUniqueInput[]
    update?: MindMapUpdateWithWhereUniqueWithoutOwnerUserInput | MindMapUpdateWithWhereUniqueWithoutOwnerUserInput[]
    updateMany?: MindMapUpdateManyWithWhereWithoutOwnerUserInput | MindMapUpdateManyWithWhereWithoutOwnerUserInput[]
    deleteMany?: MindMapScalarWhereInput | MindMapScalarWhereInput[]
  }

  export type AffiliateLinkUpdateManyWithoutUserNestedInput = {
    create?: XOR<AffiliateLinkCreateWithoutUserInput, AffiliateLinkUncheckedCreateWithoutUserInput> | AffiliateLinkCreateWithoutUserInput[] | AffiliateLinkUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AffiliateLinkCreateOrConnectWithoutUserInput | AffiliateLinkCreateOrConnectWithoutUserInput[]
    upsert?: AffiliateLinkUpsertWithWhereUniqueWithoutUserInput | AffiliateLinkUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AffiliateLinkCreateManyUserInputEnvelope
    set?: AffiliateLinkWhereUniqueInput | AffiliateLinkWhereUniqueInput[]
    disconnect?: AffiliateLinkWhereUniqueInput | AffiliateLinkWhereUniqueInput[]
    delete?: AffiliateLinkWhereUniqueInput | AffiliateLinkWhereUniqueInput[]
    connect?: AffiliateLinkWhereUniqueInput | AffiliateLinkWhereUniqueInput[]
    update?: AffiliateLinkUpdateWithWhereUniqueWithoutUserInput | AffiliateLinkUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AffiliateLinkUpdateManyWithWhereWithoutUserInput | AffiliateLinkUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AffiliateLinkScalarWhereInput | AffiliateLinkScalarWhereInput[]
  }

  export type CalendarEventUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<CalendarEventCreateWithoutCreatedByInput, CalendarEventUncheckedCreateWithoutCreatedByInput> | CalendarEventCreateWithoutCreatedByInput[] | CalendarEventUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: CalendarEventCreateOrConnectWithoutCreatedByInput | CalendarEventCreateOrConnectWithoutCreatedByInput[]
    upsert?: CalendarEventUpsertWithWhereUniqueWithoutCreatedByInput | CalendarEventUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: CalendarEventCreateManyCreatedByInputEnvelope
    set?: CalendarEventWhereUniqueInput | CalendarEventWhereUniqueInput[]
    disconnect?: CalendarEventWhereUniqueInput | CalendarEventWhereUniqueInput[]
    delete?: CalendarEventWhereUniqueInput | CalendarEventWhereUniqueInput[]
    connect?: CalendarEventWhereUniqueInput | CalendarEventWhereUniqueInput[]
    update?: CalendarEventUpdateWithWhereUniqueWithoutCreatedByInput | CalendarEventUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: CalendarEventUpdateManyWithWhereWithoutCreatedByInput | CalendarEventUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: CalendarEventScalarWhereInput | CalendarEventScalarWhereInput[]
  }

  export type AccountUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type SessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type OrganizationMembershipUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<OrganizationMembershipCreateWithoutUserInput, OrganizationMembershipUncheckedCreateWithoutUserInput> | OrganizationMembershipCreateWithoutUserInput[] | OrganizationMembershipUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrganizationMembershipCreateOrConnectWithoutUserInput | OrganizationMembershipCreateOrConnectWithoutUserInput[]
    upsert?: OrganizationMembershipUpsertWithWhereUniqueWithoutUserInput | OrganizationMembershipUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OrganizationMembershipCreateManyUserInputEnvelope
    set?: OrganizationMembershipWhereUniqueInput | OrganizationMembershipWhereUniqueInput[]
    disconnect?: OrganizationMembershipWhereUniqueInput | OrganizationMembershipWhereUniqueInput[]
    delete?: OrganizationMembershipWhereUniqueInput | OrganizationMembershipWhereUniqueInput[]
    connect?: OrganizationMembershipWhereUniqueInput | OrganizationMembershipWhereUniqueInput[]
    update?: OrganizationMembershipUpdateWithWhereUniqueWithoutUserInput | OrganizationMembershipUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OrganizationMembershipUpdateManyWithWhereWithoutUserInput | OrganizationMembershipUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OrganizationMembershipScalarWhereInput | OrganizationMembershipScalarWhereInput[]
  }

  export type ClientUncheckedUpdateManyWithoutAssignedUsersNestedInput = {
    create?: XOR<ClientCreateWithoutAssignedUsersInput, ClientUncheckedCreateWithoutAssignedUsersInput> | ClientCreateWithoutAssignedUsersInput[] | ClientUncheckedCreateWithoutAssignedUsersInput[]
    connectOrCreate?: ClientCreateOrConnectWithoutAssignedUsersInput | ClientCreateOrConnectWithoutAssignedUsersInput[]
    upsert?: ClientUpsertWithWhereUniqueWithoutAssignedUsersInput | ClientUpsertWithWhereUniqueWithoutAssignedUsersInput[]
    set?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    disconnect?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    delete?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    connect?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    update?: ClientUpdateWithWhereUniqueWithoutAssignedUsersInput | ClientUpdateWithWhereUniqueWithoutAssignedUsersInput[]
    updateMany?: ClientUpdateManyWithWhereWithoutAssignedUsersInput | ClientUpdateManyWithWhereWithoutAssignedUsersInput[]
    deleteMany?: ClientScalarWhereInput | ClientScalarWhereInput[]
  }

  export type MindMapUncheckedUpdateManyWithoutOwnerUserNestedInput = {
    create?: XOR<MindMapCreateWithoutOwnerUserInput, MindMapUncheckedCreateWithoutOwnerUserInput> | MindMapCreateWithoutOwnerUserInput[] | MindMapUncheckedCreateWithoutOwnerUserInput[]
    connectOrCreate?: MindMapCreateOrConnectWithoutOwnerUserInput | MindMapCreateOrConnectWithoutOwnerUserInput[]
    upsert?: MindMapUpsertWithWhereUniqueWithoutOwnerUserInput | MindMapUpsertWithWhereUniqueWithoutOwnerUserInput[]
    createMany?: MindMapCreateManyOwnerUserInputEnvelope
    set?: MindMapWhereUniqueInput | MindMapWhereUniqueInput[]
    disconnect?: MindMapWhereUniqueInput | MindMapWhereUniqueInput[]
    delete?: MindMapWhereUniqueInput | MindMapWhereUniqueInput[]
    connect?: MindMapWhereUniqueInput | MindMapWhereUniqueInput[]
    update?: MindMapUpdateWithWhereUniqueWithoutOwnerUserInput | MindMapUpdateWithWhereUniqueWithoutOwnerUserInput[]
    updateMany?: MindMapUpdateManyWithWhereWithoutOwnerUserInput | MindMapUpdateManyWithWhereWithoutOwnerUserInput[]
    deleteMany?: MindMapScalarWhereInput | MindMapScalarWhereInput[]
  }

  export type AffiliateLinkUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AffiliateLinkCreateWithoutUserInput, AffiliateLinkUncheckedCreateWithoutUserInput> | AffiliateLinkCreateWithoutUserInput[] | AffiliateLinkUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AffiliateLinkCreateOrConnectWithoutUserInput | AffiliateLinkCreateOrConnectWithoutUserInput[]
    upsert?: AffiliateLinkUpsertWithWhereUniqueWithoutUserInput | AffiliateLinkUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AffiliateLinkCreateManyUserInputEnvelope
    set?: AffiliateLinkWhereUniqueInput | AffiliateLinkWhereUniqueInput[]
    disconnect?: AffiliateLinkWhereUniqueInput | AffiliateLinkWhereUniqueInput[]
    delete?: AffiliateLinkWhereUniqueInput | AffiliateLinkWhereUniqueInput[]
    connect?: AffiliateLinkWhereUniqueInput | AffiliateLinkWhereUniqueInput[]
    update?: AffiliateLinkUpdateWithWhereUniqueWithoutUserInput | AffiliateLinkUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AffiliateLinkUpdateManyWithWhereWithoutUserInput | AffiliateLinkUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AffiliateLinkScalarWhereInput | AffiliateLinkScalarWhereInput[]
  }

  export type CalendarEventUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<CalendarEventCreateWithoutCreatedByInput, CalendarEventUncheckedCreateWithoutCreatedByInput> | CalendarEventCreateWithoutCreatedByInput[] | CalendarEventUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: CalendarEventCreateOrConnectWithoutCreatedByInput | CalendarEventCreateOrConnectWithoutCreatedByInput[]
    upsert?: CalendarEventUpsertWithWhereUniqueWithoutCreatedByInput | CalendarEventUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: CalendarEventCreateManyCreatedByInputEnvelope
    set?: CalendarEventWhereUniqueInput | CalendarEventWhereUniqueInput[]
    disconnect?: CalendarEventWhereUniqueInput | CalendarEventWhereUniqueInput[]
    delete?: CalendarEventWhereUniqueInput | CalendarEventWhereUniqueInput[]
    connect?: CalendarEventWhereUniqueInput | CalendarEventWhereUniqueInput[]
    update?: CalendarEventUpdateWithWhereUniqueWithoutCreatedByInput | CalendarEventUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: CalendarEventUpdateManyWithWhereWithoutCreatedByInput | CalendarEventUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: CalendarEventScalarWhereInput | CalendarEventScalarWhereInput[]
  }

  export type OrganizationMembershipCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<OrganizationMembershipCreateWithoutOrganizationInput, OrganizationMembershipUncheckedCreateWithoutOrganizationInput> | OrganizationMembershipCreateWithoutOrganizationInput[] | OrganizationMembershipUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: OrganizationMembershipCreateOrConnectWithoutOrganizationInput | OrganizationMembershipCreateOrConnectWithoutOrganizationInput[]
    createMany?: OrganizationMembershipCreateManyOrganizationInputEnvelope
    connect?: OrganizationMembershipWhereUniqueInput | OrganizationMembershipWhereUniqueInput[]
  }

  export type ClientCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<ClientCreateWithoutOrganizationInput, ClientUncheckedCreateWithoutOrganizationInput> | ClientCreateWithoutOrganizationInput[] | ClientUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: ClientCreateOrConnectWithoutOrganizationInput | ClientCreateOrConnectWithoutOrganizationInput[]
    createMany?: ClientCreateManyOrganizationInputEnvelope
    connect?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
  }

  export type PipelineCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<PipelineCreateWithoutOrganizationInput, PipelineUncheckedCreateWithoutOrganizationInput> | PipelineCreateWithoutOrganizationInput[] | PipelineUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: PipelineCreateOrConnectWithoutOrganizationInput | PipelineCreateOrConnectWithoutOrganizationInput[]
    createMany?: PipelineCreateManyOrganizationInputEnvelope
    connect?: PipelineWhereUniqueInput | PipelineWhereUniqueInput[]
  }

  export type InvoiceCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<InvoiceCreateWithoutOrganizationInput, InvoiceUncheckedCreateWithoutOrganizationInput> | InvoiceCreateWithoutOrganizationInput[] | InvoiceUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutOrganizationInput | InvoiceCreateOrConnectWithoutOrganizationInput[]
    createMany?: InvoiceCreateManyOrganizationInputEnvelope
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
  }

  export type MindMapCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<MindMapCreateWithoutOrganizationInput, MindMapUncheckedCreateWithoutOrganizationInput> | MindMapCreateWithoutOrganizationInput[] | MindMapUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: MindMapCreateOrConnectWithoutOrganizationInput | MindMapCreateOrConnectWithoutOrganizationInput[]
    createMany?: MindMapCreateManyOrganizationInputEnvelope
    connect?: MindMapWhereUniqueInput | MindMapWhereUniqueInput[]
  }

  export type AffiliateLinkCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<AffiliateLinkCreateWithoutOrganizationInput, AffiliateLinkUncheckedCreateWithoutOrganizationInput> | AffiliateLinkCreateWithoutOrganizationInput[] | AffiliateLinkUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: AffiliateLinkCreateOrConnectWithoutOrganizationInput | AffiliateLinkCreateOrConnectWithoutOrganizationInput[]
    createMany?: AffiliateLinkCreateManyOrganizationInputEnvelope
    connect?: AffiliateLinkWhereUniqueInput | AffiliateLinkWhereUniqueInput[]
  }

  export type PipelineCardCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<PipelineCardCreateWithoutOrganizationInput, PipelineCardUncheckedCreateWithoutOrganizationInput> | PipelineCardCreateWithoutOrganizationInput[] | PipelineCardUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: PipelineCardCreateOrConnectWithoutOrganizationInput | PipelineCardCreateOrConnectWithoutOrganizationInput[]
    createMany?: PipelineCardCreateManyOrganizationInputEnvelope
    connect?: PipelineCardWhereUniqueInput | PipelineCardWhereUniqueInput[]
  }

  export type TransactionCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<TransactionCreateWithoutOrganizationInput, TransactionUncheckedCreateWithoutOrganizationInput> | TransactionCreateWithoutOrganizationInput[] | TransactionUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutOrganizationInput | TransactionCreateOrConnectWithoutOrganizationInput[]
    createMany?: TransactionCreateManyOrganizationInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type SubscriptionCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<SubscriptionCreateWithoutOrganizationInput, SubscriptionUncheckedCreateWithoutOrganizationInput> | SubscriptionCreateWithoutOrganizationInput[] | SubscriptionUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutOrganizationInput | SubscriptionCreateOrConnectWithoutOrganizationInput[]
    createMany?: SubscriptionCreateManyOrganizationInputEnvelope
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
  }

  export type EmailSequenceCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<EmailSequenceCreateWithoutOrganizationInput, EmailSequenceUncheckedCreateWithoutOrganizationInput> | EmailSequenceCreateWithoutOrganizationInput[] | EmailSequenceUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: EmailSequenceCreateOrConnectWithoutOrganizationInput | EmailSequenceCreateOrConnectWithoutOrganizationInput[]
    createMany?: EmailSequenceCreateManyOrganizationInputEnvelope
    connect?: EmailSequenceWhereUniqueInput | EmailSequenceWhereUniqueInput[]
  }

  export type EmailTemplateCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<EmailTemplateCreateWithoutOrganizationInput, EmailTemplateUncheckedCreateWithoutOrganizationInput> | EmailTemplateCreateWithoutOrganizationInput[] | EmailTemplateUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: EmailTemplateCreateOrConnectWithoutOrganizationInput | EmailTemplateCreateOrConnectWithoutOrganizationInput[]
    createMany?: EmailTemplateCreateManyOrganizationInputEnvelope
    connect?: EmailTemplateWhereUniqueInput | EmailTemplateWhereUniqueInput[]
  }

  export type CalendarEventCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<CalendarEventCreateWithoutOrganizationInput, CalendarEventUncheckedCreateWithoutOrganizationInput> | CalendarEventCreateWithoutOrganizationInput[] | CalendarEventUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: CalendarEventCreateOrConnectWithoutOrganizationInput | CalendarEventCreateOrConnectWithoutOrganizationInput[]
    createMany?: CalendarEventCreateManyOrganizationInputEnvelope
    connect?: CalendarEventWhereUniqueInput | CalendarEventWhereUniqueInput[]
  }

  export type OrganizationMembershipUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<OrganizationMembershipCreateWithoutOrganizationInput, OrganizationMembershipUncheckedCreateWithoutOrganizationInput> | OrganizationMembershipCreateWithoutOrganizationInput[] | OrganizationMembershipUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: OrganizationMembershipCreateOrConnectWithoutOrganizationInput | OrganizationMembershipCreateOrConnectWithoutOrganizationInput[]
    createMany?: OrganizationMembershipCreateManyOrganizationInputEnvelope
    connect?: OrganizationMembershipWhereUniqueInput | OrganizationMembershipWhereUniqueInput[]
  }

  export type ClientUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<ClientCreateWithoutOrganizationInput, ClientUncheckedCreateWithoutOrganizationInput> | ClientCreateWithoutOrganizationInput[] | ClientUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: ClientCreateOrConnectWithoutOrganizationInput | ClientCreateOrConnectWithoutOrganizationInput[]
    createMany?: ClientCreateManyOrganizationInputEnvelope
    connect?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
  }

  export type PipelineUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<PipelineCreateWithoutOrganizationInput, PipelineUncheckedCreateWithoutOrganizationInput> | PipelineCreateWithoutOrganizationInput[] | PipelineUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: PipelineCreateOrConnectWithoutOrganizationInput | PipelineCreateOrConnectWithoutOrganizationInput[]
    createMany?: PipelineCreateManyOrganizationInputEnvelope
    connect?: PipelineWhereUniqueInput | PipelineWhereUniqueInput[]
  }

  export type InvoiceUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<InvoiceCreateWithoutOrganizationInput, InvoiceUncheckedCreateWithoutOrganizationInput> | InvoiceCreateWithoutOrganizationInput[] | InvoiceUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutOrganizationInput | InvoiceCreateOrConnectWithoutOrganizationInput[]
    createMany?: InvoiceCreateManyOrganizationInputEnvelope
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
  }

  export type MindMapUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<MindMapCreateWithoutOrganizationInput, MindMapUncheckedCreateWithoutOrganizationInput> | MindMapCreateWithoutOrganizationInput[] | MindMapUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: MindMapCreateOrConnectWithoutOrganizationInput | MindMapCreateOrConnectWithoutOrganizationInput[]
    createMany?: MindMapCreateManyOrganizationInputEnvelope
    connect?: MindMapWhereUniqueInput | MindMapWhereUniqueInput[]
  }

  export type AffiliateLinkUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<AffiliateLinkCreateWithoutOrganizationInput, AffiliateLinkUncheckedCreateWithoutOrganizationInput> | AffiliateLinkCreateWithoutOrganizationInput[] | AffiliateLinkUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: AffiliateLinkCreateOrConnectWithoutOrganizationInput | AffiliateLinkCreateOrConnectWithoutOrganizationInput[]
    createMany?: AffiliateLinkCreateManyOrganizationInputEnvelope
    connect?: AffiliateLinkWhereUniqueInput | AffiliateLinkWhereUniqueInput[]
  }

  export type PipelineCardUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<PipelineCardCreateWithoutOrganizationInput, PipelineCardUncheckedCreateWithoutOrganizationInput> | PipelineCardCreateWithoutOrganizationInput[] | PipelineCardUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: PipelineCardCreateOrConnectWithoutOrganizationInput | PipelineCardCreateOrConnectWithoutOrganizationInput[]
    createMany?: PipelineCardCreateManyOrganizationInputEnvelope
    connect?: PipelineCardWhereUniqueInput | PipelineCardWhereUniqueInput[]
  }

  export type TransactionUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<TransactionCreateWithoutOrganizationInput, TransactionUncheckedCreateWithoutOrganizationInput> | TransactionCreateWithoutOrganizationInput[] | TransactionUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutOrganizationInput | TransactionCreateOrConnectWithoutOrganizationInput[]
    createMany?: TransactionCreateManyOrganizationInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type SubscriptionUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<SubscriptionCreateWithoutOrganizationInput, SubscriptionUncheckedCreateWithoutOrganizationInput> | SubscriptionCreateWithoutOrganizationInput[] | SubscriptionUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutOrganizationInput | SubscriptionCreateOrConnectWithoutOrganizationInput[]
    createMany?: SubscriptionCreateManyOrganizationInputEnvelope
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
  }

  export type EmailSequenceUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<EmailSequenceCreateWithoutOrganizationInput, EmailSequenceUncheckedCreateWithoutOrganizationInput> | EmailSequenceCreateWithoutOrganizationInput[] | EmailSequenceUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: EmailSequenceCreateOrConnectWithoutOrganizationInput | EmailSequenceCreateOrConnectWithoutOrganizationInput[]
    createMany?: EmailSequenceCreateManyOrganizationInputEnvelope
    connect?: EmailSequenceWhereUniqueInput | EmailSequenceWhereUniqueInput[]
  }

  export type EmailTemplateUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<EmailTemplateCreateWithoutOrganizationInput, EmailTemplateUncheckedCreateWithoutOrganizationInput> | EmailTemplateCreateWithoutOrganizationInput[] | EmailTemplateUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: EmailTemplateCreateOrConnectWithoutOrganizationInput | EmailTemplateCreateOrConnectWithoutOrganizationInput[]
    createMany?: EmailTemplateCreateManyOrganizationInputEnvelope
    connect?: EmailTemplateWhereUniqueInput | EmailTemplateWhereUniqueInput[]
  }

  export type CalendarEventUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<CalendarEventCreateWithoutOrganizationInput, CalendarEventUncheckedCreateWithoutOrganizationInput> | CalendarEventCreateWithoutOrganizationInput[] | CalendarEventUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: CalendarEventCreateOrConnectWithoutOrganizationInput | CalendarEventCreateOrConnectWithoutOrganizationInput[]
    createMany?: CalendarEventCreateManyOrganizationInputEnvelope
    connect?: CalendarEventWhereUniqueInput | CalendarEventWhereUniqueInput[]
  }

  export type OrganizationMembershipUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<OrganizationMembershipCreateWithoutOrganizationInput, OrganizationMembershipUncheckedCreateWithoutOrganizationInput> | OrganizationMembershipCreateWithoutOrganizationInput[] | OrganizationMembershipUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: OrganizationMembershipCreateOrConnectWithoutOrganizationInput | OrganizationMembershipCreateOrConnectWithoutOrganizationInput[]
    upsert?: OrganizationMembershipUpsertWithWhereUniqueWithoutOrganizationInput | OrganizationMembershipUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: OrganizationMembershipCreateManyOrganizationInputEnvelope
    set?: OrganizationMembershipWhereUniqueInput | OrganizationMembershipWhereUniqueInput[]
    disconnect?: OrganizationMembershipWhereUniqueInput | OrganizationMembershipWhereUniqueInput[]
    delete?: OrganizationMembershipWhereUniqueInput | OrganizationMembershipWhereUniqueInput[]
    connect?: OrganizationMembershipWhereUniqueInput | OrganizationMembershipWhereUniqueInput[]
    update?: OrganizationMembershipUpdateWithWhereUniqueWithoutOrganizationInput | OrganizationMembershipUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: OrganizationMembershipUpdateManyWithWhereWithoutOrganizationInput | OrganizationMembershipUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: OrganizationMembershipScalarWhereInput | OrganizationMembershipScalarWhereInput[]
  }

  export type ClientUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<ClientCreateWithoutOrganizationInput, ClientUncheckedCreateWithoutOrganizationInput> | ClientCreateWithoutOrganizationInput[] | ClientUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: ClientCreateOrConnectWithoutOrganizationInput | ClientCreateOrConnectWithoutOrganizationInput[]
    upsert?: ClientUpsertWithWhereUniqueWithoutOrganizationInput | ClientUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: ClientCreateManyOrganizationInputEnvelope
    set?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    disconnect?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    delete?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    connect?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    update?: ClientUpdateWithWhereUniqueWithoutOrganizationInput | ClientUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: ClientUpdateManyWithWhereWithoutOrganizationInput | ClientUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: ClientScalarWhereInput | ClientScalarWhereInput[]
  }

  export type PipelineUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<PipelineCreateWithoutOrganizationInput, PipelineUncheckedCreateWithoutOrganizationInput> | PipelineCreateWithoutOrganizationInput[] | PipelineUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: PipelineCreateOrConnectWithoutOrganizationInput | PipelineCreateOrConnectWithoutOrganizationInput[]
    upsert?: PipelineUpsertWithWhereUniqueWithoutOrganizationInput | PipelineUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: PipelineCreateManyOrganizationInputEnvelope
    set?: PipelineWhereUniqueInput | PipelineWhereUniqueInput[]
    disconnect?: PipelineWhereUniqueInput | PipelineWhereUniqueInput[]
    delete?: PipelineWhereUniqueInput | PipelineWhereUniqueInput[]
    connect?: PipelineWhereUniqueInput | PipelineWhereUniqueInput[]
    update?: PipelineUpdateWithWhereUniqueWithoutOrganizationInput | PipelineUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: PipelineUpdateManyWithWhereWithoutOrganizationInput | PipelineUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: PipelineScalarWhereInput | PipelineScalarWhereInput[]
  }

  export type InvoiceUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<InvoiceCreateWithoutOrganizationInput, InvoiceUncheckedCreateWithoutOrganizationInput> | InvoiceCreateWithoutOrganizationInput[] | InvoiceUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutOrganizationInput | InvoiceCreateOrConnectWithoutOrganizationInput[]
    upsert?: InvoiceUpsertWithWhereUniqueWithoutOrganizationInput | InvoiceUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: InvoiceCreateManyOrganizationInputEnvelope
    set?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    disconnect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    delete?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    update?: InvoiceUpdateWithWhereUniqueWithoutOrganizationInput | InvoiceUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: InvoiceUpdateManyWithWhereWithoutOrganizationInput | InvoiceUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: InvoiceScalarWhereInput | InvoiceScalarWhereInput[]
  }

  export type MindMapUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<MindMapCreateWithoutOrganizationInput, MindMapUncheckedCreateWithoutOrganizationInput> | MindMapCreateWithoutOrganizationInput[] | MindMapUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: MindMapCreateOrConnectWithoutOrganizationInput | MindMapCreateOrConnectWithoutOrganizationInput[]
    upsert?: MindMapUpsertWithWhereUniqueWithoutOrganizationInput | MindMapUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: MindMapCreateManyOrganizationInputEnvelope
    set?: MindMapWhereUniqueInput | MindMapWhereUniqueInput[]
    disconnect?: MindMapWhereUniqueInput | MindMapWhereUniqueInput[]
    delete?: MindMapWhereUniqueInput | MindMapWhereUniqueInput[]
    connect?: MindMapWhereUniqueInput | MindMapWhereUniqueInput[]
    update?: MindMapUpdateWithWhereUniqueWithoutOrganizationInput | MindMapUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: MindMapUpdateManyWithWhereWithoutOrganizationInput | MindMapUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: MindMapScalarWhereInput | MindMapScalarWhereInput[]
  }

  export type AffiliateLinkUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<AffiliateLinkCreateWithoutOrganizationInput, AffiliateLinkUncheckedCreateWithoutOrganizationInput> | AffiliateLinkCreateWithoutOrganizationInput[] | AffiliateLinkUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: AffiliateLinkCreateOrConnectWithoutOrganizationInput | AffiliateLinkCreateOrConnectWithoutOrganizationInput[]
    upsert?: AffiliateLinkUpsertWithWhereUniqueWithoutOrganizationInput | AffiliateLinkUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: AffiliateLinkCreateManyOrganizationInputEnvelope
    set?: AffiliateLinkWhereUniqueInput | AffiliateLinkWhereUniqueInput[]
    disconnect?: AffiliateLinkWhereUniqueInput | AffiliateLinkWhereUniqueInput[]
    delete?: AffiliateLinkWhereUniqueInput | AffiliateLinkWhereUniqueInput[]
    connect?: AffiliateLinkWhereUniqueInput | AffiliateLinkWhereUniqueInput[]
    update?: AffiliateLinkUpdateWithWhereUniqueWithoutOrganizationInput | AffiliateLinkUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: AffiliateLinkUpdateManyWithWhereWithoutOrganizationInput | AffiliateLinkUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: AffiliateLinkScalarWhereInput | AffiliateLinkScalarWhereInput[]
  }

  export type PipelineCardUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<PipelineCardCreateWithoutOrganizationInput, PipelineCardUncheckedCreateWithoutOrganizationInput> | PipelineCardCreateWithoutOrganizationInput[] | PipelineCardUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: PipelineCardCreateOrConnectWithoutOrganizationInput | PipelineCardCreateOrConnectWithoutOrganizationInput[]
    upsert?: PipelineCardUpsertWithWhereUniqueWithoutOrganizationInput | PipelineCardUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: PipelineCardCreateManyOrganizationInputEnvelope
    set?: PipelineCardWhereUniqueInput | PipelineCardWhereUniqueInput[]
    disconnect?: PipelineCardWhereUniqueInput | PipelineCardWhereUniqueInput[]
    delete?: PipelineCardWhereUniqueInput | PipelineCardWhereUniqueInput[]
    connect?: PipelineCardWhereUniqueInput | PipelineCardWhereUniqueInput[]
    update?: PipelineCardUpdateWithWhereUniqueWithoutOrganizationInput | PipelineCardUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: PipelineCardUpdateManyWithWhereWithoutOrganizationInput | PipelineCardUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: PipelineCardScalarWhereInput | PipelineCardScalarWhereInput[]
  }

  export type TransactionUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<TransactionCreateWithoutOrganizationInput, TransactionUncheckedCreateWithoutOrganizationInput> | TransactionCreateWithoutOrganizationInput[] | TransactionUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutOrganizationInput | TransactionCreateOrConnectWithoutOrganizationInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutOrganizationInput | TransactionUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: TransactionCreateManyOrganizationInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutOrganizationInput | TransactionUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutOrganizationInput | TransactionUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type SubscriptionUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<SubscriptionCreateWithoutOrganizationInput, SubscriptionUncheckedCreateWithoutOrganizationInput> | SubscriptionCreateWithoutOrganizationInput[] | SubscriptionUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutOrganizationInput | SubscriptionCreateOrConnectWithoutOrganizationInput[]
    upsert?: SubscriptionUpsertWithWhereUniqueWithoutOrganizationInput | SubscriptionUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: SubscriptionCreateManyOrganizationInputEnvelope
    set?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    disconnect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    delete?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    update?: SubscriptionUpdateWithWhereUniqueWithoutOrganizationInput | SubscriptionUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: SubscriptionUpdateManyWithWhereWithoutOrganizationInput | SubscriptionUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: SubscriptionScalarWhereInput | SubscriptionScalarWhereInput[]
  }

  export type EmailSequenceUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<EmailSequenceCreateWithoutOrganizationInput, EmailSequenceUncheckedCreateWithoutOrganizationInput> | EmailSequenceCreateWithoutOrganizationInput[] | EmailSequenceUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: EmailSequenceCreateOrConnectWithoutOrganizationInput | EmailSequenceCreateOrConnectWithoutOrganizationInput[]
    upsert?: EmailSequenceUpsertWithWhereUniqueWithoutOrganizationInput | EmailSequenceUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: EmailSequenceCreateManyOrganizationInputEnvelope
    set?: EmailSequenceWhereUniqueInput | EmailSequenceWhereUniqueInput[]
    disconnect?: EmailSequenceWhereUniqueInput | EmailSequenceWhereUniqueInput[]
    delete?: EmailSequenceWhereUniqueInput | EmailSequenceWhereUniqueInput[]
    connect?: EmailSequenceWhereUniqueInput | EmailSequenceWhereUniqueInput[]
    update?: EmailSequenceUpdateWithWhereUniqueWithoutOrganizationInput | EmailSequenceUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: EmailSequenceUpdateManyWithWhereWithoutOrganizationInput | EmailSequenceUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: EmailSequenceScalarWhereInput | EmailSequenceScalarWhereInput[]
  }

  export type EmailTemplateUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<EmailTemplateCreateWithoutOrganizationInput, EmailTemplateUncheckedCreateWithoutOrganizationInput> | EmailTemplateCreateWithoutOrganizationInput[] | EmailTemplateUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: EmailTemplateCreateOrConnectWithoutOrganizationInput | EmailTemplateCreateOrConnectWithoutOrganizationInput[]
    upsert?: EmailTemplateUpsertWithWhereUniqueWithoutOrganizationInput | EmailTemplateUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: EmailTemplateCreateManyOrganizationInputEnvelope
    set?: EmailTemplateWhereUniqueInput | EmailTemplateWhereUniqueInput[]
    disconnect?: EmailTemplateWhereUniqueInput | EmailTemplateWhereUniqueInput[]
    delete?: EmailTemplateWhereUniqueInput | EmailTemplateWhereUniqueInput[]
    connect?: EmailTemplateWhereUniqueInput | EmailTemplateWhereUniqueInput[]
    update?: EmailTemplateUpdateWithWhereUniqueWithoutOrganizationInput | EmailTemplateUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: EmailTemplateUpdateManyWithWhereWithoutOrganizationInput | EmailTemplateUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: EmailTemplateScalarWhereInput | EmailTemplateScalarWhereInput[]
  }

  export type CalendarEventUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<CalendarEventCreateWithoutOrganizationInput, CalendarEventUncheckedCreateWithoutOrganizationInput> | CalendarEventCreateWithoutOrganizationInput[] | CalendarEventUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: CalendarEventCreateOrConnectWithoutOrganizationInput | CalendarEventCreateOrConnectWithoutOrganizationInput[]
    upsert?: CalendarEventUpsertWithWhereUniqueWithoutOrganizationInput | CalendarEventUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: CalendarEventCreateManyOrganizationInputEnvelope
    set?: CalendarEventWhereUniqueInput | CalendarEventWhereUniqueInput[]
    disconnect?: CalendarEventWhereUniqueInput | CalendarEventWhereUniqueInput[]
    delete?: CalendarEventWhereUniqueInput | CalendarEventWhereUniqueInput[]
    connect?: CalendarEventWhereUniqueInput | CalendarEventWhereUniqueInput[]
    update?: CalendarEventUpdateWithWhereUniqueWithoutOrganizationInput | CalendarEventUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: CalendarEventUpdateManyWithWhereWithoutOrganizationInput | CalendarEventUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: CalendarEventScalarWhereInput | CalendarEventScalarWhereInput[]
  }

  export type OrganizationMembershipUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<OrganizationMembershipCreateWithoutOrganizationInput, OrganizationMembershipUncheckedCreateWithoutOrganizationInput> | OrganizationMembershipCreateWithoutOrganizationInput[] | OrganizationMembershipUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: OrganizationMembershipCreateOrConnectWithoutOrganizationInput | OrganizationMembershipCreateOrConnectWithoutOrganizationInput[]
    upsert?: OrganizationMembershipUpsertWithWhereUniqueWithoutOrganizationInput | OrganizationMembershipUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: OrganizationMembershipCreateManyOrganizationInputEnvelope
    set?: OrganizationMembershipWhereUniqueInput | OrganizationMembershipWhereUniqueInput[]
    disconnect?: OrganizationMembershipWhereUniqueInput | OrganizationMembershipWhereUniqueInput[]
    delete?: OrganizationMembershipWhereUniqueInput | OrganizationMembershipWhereUniqueInput[]
    connect?: OrganizationMembershipWhereUniqueInput | OrganizationMembershipWhereUniqueInput[]
    update?: OrganizationMembershipUpdateWithWhereUniqueWithoutOrganizationInput | OrganizationMembershipUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: OrganizationMembershipUpdateManyWithWhereWithoutOrganizationInput | OrganizationMembershipUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: OrganizationMembershipScalarWhereInput | OrganizationMembershipScalarWhereInput[]
  }

  export type ClientUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<ClientCreateWithoutOrganizationInput, ClientUncheckedCreateWithoutOrganizationInput> | ClientCreateWithoutOrganizationInput[] | ClientUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: ClientCreateOrConnectWithoutOrganizationInput | ClientCreateOrConnectWithoutOrganizationInput[]
    upsert?: ClientUpsertWithWhereUniqueWithoutOrganizationInput | ClientUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: ClientCreateManyOrganizationInputEnvelope
    set?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    disconnect?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    delete?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    connect?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    update?: ClientUpdateWithWhereUniqueWithoutOrganizationInput | ClientUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: ClientUpdateManyWithWhereWithoutOrganizationInput | ClientUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: ClientScalarWhereInput | ClientScalarWhereInput[]
  }

  export type PipelineUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<PipelineCreateWithoutOrganizationInput, PipelineUncheckedCreateWithoutOrganizationInput> | PipelineCreateWithoutOrganizationInput[] | PipelineUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: PipelineCreateOrConnectWithoutOrganizationInput | PipelineCreateOrConnectWithoutOrganizationInput[]
    upsert?: PipelineUpsertWithWhereUniqueWithoutOrganizationInput | PipelineUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: PipelineCreateManyOrganizationInputEnvelope
    set?: PipelineWhereUniqueInput | PipelineWhereUniqueInput[]
    disconnect?: PipelineWhereUniqueInput | PipelineWhereUniqueInput[]
    delete?: PipelineWhereUniqueInput | PipelineWhereUniqueInput[]
    connect?: PipelineWhereUniqueInput | PipelineWhereUniqueInput[]
    update?: PipelineUpdateWithWhereUniqueWithoutOrganizationInput | PipelineUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: PipelineUpdateManyWithWhereWithoutOrganizationInput | PipelineUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: PipelineScalarWhereInput | PipelineScalarWhereInput[]
  }

  export type InvoiceUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<InvoiceCreateWithoutOrganizationInput, InvoiceUncheckedCreateWithoutOrganizationInput> | InvoiceCreateWithoutOrganizationInput[] | InvoiceUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutOrganizationInput | InvoiceCreateOrConnectWithoutOrganizationInput[]
    upsert?: InvoiceUpsertWithWhereUniqueWithoutOrganizationInput | InvoiceUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: InvoiceCreateManyOrganizationInputEnvelope
    set?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    disconnect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    delete?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    update?: InvoiceUpdateWithWhereUniqueWithoutOrganizationInput | InvoiceUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: InvoiceUpdateManyWithWhereWithoutOrganizationInput | InvoiceUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: InvoiceScalarWhereInput | InvoiceScalarWhereInput[]
  }

  export type MindMapUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<MindMapCreateWithoutOrganizationInput, MindMapUncheckedCreateWithoutOrganizationInput> | MindMapCreateWithoutOrganizationInput[] | MindMapUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: MindMapCreateOrConnectWithoutOrganizationInput | MindMapCreateOrConnectWithoutOrganizationInput[]
    upsert?: MindMapUpsertWithWhereUniqueWithoutOrganizationInput | MindMapUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: MindMapCreateManyOrganizationInputEnvelope
    set?: MindMapWhereUniqueInput | MindMapWhereUniqueInput[]
    disconnect?: MindMapWhereUniqueInput | MindMapWhereUniqueInput[]
    delete?: MindMapWhereUniqueInput | MindMapWhereUniqueInput[]
    connect?: MindMapWhereUniqueInput | MindMapWhereUniqueInput[]
    update?: MindMapUpdateWithWhereUniqueWithoutOrganizationInput | MindMapUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: MindMapUpdateManyWithWhereWithoutOrganizationInput | MindMapUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: MindMapScalarWhereInput | MindMapScalarWhereInput[]
  }

  export type AffiliateLinkUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<AffiliateLinkCreateWithoutOrganizationInput, AffiliateLinkUncheckedCreateWithoutOrganizationInput> | AffiliateLinkCreateWithoutOrganizationInput[] | AffiliateLinkUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: AffiliateLinkCreateOrConnectWithoutOrganizationInput | AffiliateLinkCreateOrConnectWithoutOrganizationInput[]
    upsert?: AffiliateLinkUpsertWithWhereUniqueWithoutOrganizationInput | AffiliateLinkUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: AffiliateLinkCreateManyOrganizationInputEnvelope
    set?: AffiliateLinkWhereUniqueInput | AffiliateLinkWhereUniqueInput[]
    disconnect?: AffiliateLinkWhereUniqueInput | AffiliateLinkWhereUniqueInput[]
    delete?: AffiliateLinkWhereUniqueInput | AffiliateLinkWhereUniqueInput[]
    connect?: AffiliateLinkWhereUniqueInput | AffiliateLinkWhereUniqueInput[]
    update?: AffiliateLinkUpdateWithWhereUniqueWithoutOrganizationInput | AffiliateLinkUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: AffiliateLinkUpdateManyWithWhereWithoutOrganizationInput | AffiliateLinkUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: AffiliateLinkScalarWhereInput | AffiliateLinkScalarWhereInput[]
  }

  export type PipelineCardUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<PipelineCardCreateWithoutOrganizationInput, PipelineCardUncheckedCreateWithoutOrganizationInput> | PipelineCardCreateWithoutOrganizationInput[] | PipelineCardUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: PipelineCardCreateOrConnectWithoutOrganizationInput | PipelineCardCreateOrConnectWithoutOrganizationInput[]
    upsert?: PipelineCardUpsertWithWhereUniqueWithoutOrganizationInput | PipelineCardUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: PipelineCardCreateManyOrganizationInputEnvelope
    set?: PipelineCardWhereUniqueInput | PipelineCardWhereUniqueInput[]
    disconnect?: PipelineCardWhereUniqueInput | PipelineCardWhereUniqueInput[]
    delete?: PipelineCardWhereUniqueInput | PipelineCardWhereUniqueInput[]
    connect?: PipelineCardWhereUniqueInput | PipelineCardWhereUniqueInput[]
    update?: PipelineCardUpdateWithWhereUniqueWithoutOrganizationInput | PipelineCardUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: PipelineCardUpdateManyWithWhereWithoutOrganizationInput | PipelineCardUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: PipelineCardScalarWhereInput | PipelineCardScalarWhereInput[]
  }

  export type TransactionUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<TransactionCreateWithoutOrganizationInput, TransactionUncheckedCreateWithoutOrganizationInput> | TransactionCreateWithoutOrganizationInput[] | TransactionUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutOrganizationInput | TransactionCreateOrConnectWithoutOrganizationInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutOrganizationInput | TransactionUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: TransactionCreateManyOrganizationInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutOrganizationInput | TransactionUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutOrganizationInput | TransactionUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type SubscriptionUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<SubscriptionCreateWithoutOrganizationInput, SubscriptionUncheckedCreateWithoutOrganizationInput> | SubscriptionCreateWithoutOrganizationInput[] | SubscriptionUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutOrganizationInput | SubscriptionCreateOrConnectWithoutOrganizationInput[]
    upsert?: SubscriptionUpsertWithWhereUniqueWithoutOrganizationInput | SubscriptionUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: SubscriptionCreateManyOrganizationInputEnvelope
    set?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    disconnect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    delete?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    update?: SubscriptionUpdateWithWhereUniqueWithoutOrganizationInput | SubscriptionUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: SubscriptionUpdateManyWithWhereWithoutOrganizationInput | SubscriptionUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: SubscriptionScalarWhereInput | SubscriptionScalarWhereInput[]
  }

  export type EmailSequenceUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<EmailSequenceCreateWithoutOrganizationInput, EmailSequenceUncheckedCreateWithoutOrganizationInput> | EmailSequenceCreateWithoutOrganizationInput[] | EmailSequenceUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: EmailSequenceCreateOrConnectWithoutOrganizationInput | EmailSequenceCreateOrConnectWithoutOrganizationInput[]
    upsert?: EmailSequenceUpsertWithWhereUniqueWithoutOrganizationInput | EmailSequenceUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: EmailSequenceCreateManyOrganizationInputEnvelope
    set?: EmailSequenceWhereUniqueInput | EmailSequenceWhereUniqueInput[]
    disconnect?: EmailSequenceWhereUniqueInput | EmailSequenceWhereUniqueInput[]
    delete?: EmailSequenceWhereUniqueInput | EmailSequenceWhereUniqueInput[]
    connect?: EmailSequenceWhereUniqueInput | EmailSequenceWhereUniqueInput[]
    update?: EmailSequenceUpdateWithWhereUniqueWithoutOrganizationInput | EmailSequenceUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: EmailSequenceUpdateManyWithWhereWithoutOrganizationInput | EmailSequenceUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: EmailSequenceScalarWhereInput | EmailSequenceScalarWhereInput[]
  }

  export type EmailTemplateUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<EmailTemplateCreateWithoutOrganizationInput, EmailTemplateUncheckedCreateWithoutOrganizationInput> | EmailTemplateCreateWithoutOrganizationInput[] | EmailTemplateUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: EmailTemplateCreateOrConnectWithoutOrganizationInput | EmailTemplateCreateOrConnectWithoutOrganizationInput[]
    upsert?: EmailTemplateUpsertWithWhereUniqueWithoutOrganizationInput | EmailTemplateUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: EmailTemplateCreateManyOrganizationInputEnvelope
    set?: EmailTemplateWhereUniqueInput | EmailTemplateWhereUniqueInput[]
    disconnect?: EmailTemplateWhereUniqueInput | EmailTemplateWhereUniqueInput[]
    delete?: EmailTemplateWhereUniqueInput | EmailTemplateWhereUniqueInput[]
    connect?: EmailTemplateWhereUniqueInput | EmailTemplateWhereUniqueInput[]
    update?: EmailTemplateUpdateWithWhereUniqueWithoutOrganizationInput | EmailTemplateUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: EmailTemplateUpdateManyWithWhereWithoutOrganizationInput | EmailTemplateUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: EmailTemplateScalarWhereInput | EmailTemplateScalarWhereInput[]
  }

  export type CalendarEventUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<CalendarEventCreateWithoutOrganizationInput, CalendarEventUncheckedCreateWithoutOrganizationInput> | CalendarEventCreateWithoutOrganizationInput[] | CalendarEventUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: CalendarEventCreateOrConnectWithoutOrganizationInput | CalendarEventCreateOrConnectWithoutOrganizationInput[]
    upsert?: CalendarEventUpsertWithWhereUniqueWithoutOrganizationInput | CalendarEventUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: CalendarEventCreateManyOrganizationInputEnvelope
    set?: CalendarEventWhereUniqueInput | CalendarEventWhereUniqueInput[]
    disconnect?: CalendarEventWhereUniqueInput | CalendarEventWhereUniqueInput[]
    delete?: CalendarEventWhereUniqueInput | CalendarEventWhereUniqueInput[]
    connect?: CalendarEventWhereUniqueInput | CalendarEventWhereUniqueInput[]
    update?: CalendarEventUpdateWithWhereUniqueWithoutOrganizationInput | CalendarEventUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: CalendarEventUpdateManyWithWhereWithoutOrganizationInput | CalendarEventUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: CalendarEventScalarWhereInput | CalendarEventScalarWhereInput[]
  }

  export type OrganizationCreateNestedOneWithoutMembershipsInput = {
    create?: XOR<OrganizationCreateWithoutMembershipsInput, OrganizationUncheckedCreateWithoutMembershipsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutMembershipsInput
    connect?: OrganizationWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutMembershipsInput = {
    create?: XOR<UserCreateWithoutMembershipsInput, UserUncheckedCreateWithoutMembershipsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMembershipsInput
    connect?: UserWhereUniqueInput
  }

  export type ClientCreateNestedManyWithoutAssignedToInput = {
    create?: XOR<ClientCreateWithoutAssignedToInput, ClientUncheckedCreateWithoutAssignedToInput> | ClientCreateWithoutAssignedToInput[] | ClientUncheckedCreateWithoutAssignedToInput[]
    connectOrCreate?: ClientCreateOrConnectWithoutAssignedToInput | ClientCreateOrConnectWithoutAssignedToInput[]
    createMany?: ClientCreateManyAssignedToInputEnvelope
    connect?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
  }

  export type ClientUncheckedCreateNestedManyWithoutAssignedToInput = {
    create?: XOR<ClientCreateWithoutAssignedToInput, ClientUncheckedCreateWithoutAssignedToInput> | ClientCreateWithoutAssignedToInput[] | ClientUncheckedCreateWithoutAssignedToInput[]
    connectOrCreate?: ClientCreateOrConnectWithoutAssignedToInput | ClientCreateOrConnectWithoutAssignedToInput[]
    createMany?: ClientCreateManyAssignedToInputEnvelope
    connect?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
  }

  export type EnumOrgRoleFieldUpdateOperationsInput = {
    set?: $Enums.OrgRole
  }

  export type OrganizationUpdateOneRequiredWithoutMembershipsNestedInput = {
    create?: XOR<OrganizationCreateWithoutMembershipsInput, OrganizationUncheckedCreateWithoutMembershipsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutMembershipsInput
    upsert?: OrganizationUpsertWithoutMembershipsInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutMembershipsInput, OrganizationUpdateWithoutMembershipsInput>, OrganizationUncheckedUpdateWithoutMembershipsInput>
  }

  export type UserUpdateOneRequiredWithoutMembershipsNestedInput = {
    create?: XOR<UserCreateWithoutMembershipsInput, UserUncheckedCreateWithoutMembershipsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMembershipsInput
    upsert?: UserUpsertWithoutMembershipsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMembershipsInput, UserUpdateWithoutMembershipsInput>, UserUncheckedUpdateWithoutMembershipsInput>
  }

  export type ClientUpdateManyWithoutAssignedToNestedInput = {
    create?: XOR<ClientCreateWithoutAssignedToInput, ClientUncheckedCreateWithoutAssignedToInput> | ClientCreateWithoutAssignedToInput[] | ClientUncheckedCreateWithoutAssignedToInput[]
    connectOrCreate?: ClientCreateOrConnectWithoutAssignedToInput | ClientCreateOrConnectWithoutAssignedToInput[]
    upsert?: ClientUpsertWithWhereUniqueWithoutAssignedToInput | ClientUpsertWithWhereUniqueWithoutAssignedToInput[]
    createMany?: ClientCreateManyAssignedToInputEnvelope
    set?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    disconnect?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    delete?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    connect?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    update?: ClientUpdateWithWhereUniqueWithoutAssignedToInput | ClientUpdateWithWhereUniqueWithoutAssignedToInput[]
    updateMany?: ClientUpdateManyWithWhereWithoutAssignedToInput | ClientUpdateManyWithWhereWithoutAssignedToInput[]
    deleteMany?: ClientScalarWhereInput | ClientScalarWhereInput[]
  }

  export type ClientUncheckedUpdateManyWithoutAssignedToNestedInput = {
    create?: XOR<ClientCreateWithoutAssignedToInput, ClientUncheckedCreateWithoutAssignedToInput> | ClientCreateWithoutAssignedToInput[] | ClientUncheckedCreateWithoutAssignedToInput[]
    connectOrCreate?: ClientCreateOrConnectWithoutAssignedToInput | ClientCreateOrConnectWithoutAssignedToInput[]
    upsert?: ClientUpsertWithWhereUniqueWithoutAssignedToInput | ClientUpsertWithWhereUniqueWithoutAssignedToInput[]
    createMany?: ClientCreateManyAssignedToInputEnvelope
    set?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    disconnect?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    delete?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    connect?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    update?: ClientUpdateWithWhereUniqueWithoutAssignedToInput | ClientUpdateWithWhereUniqueWithoutAssignedToInput[]
    updateMany?: ClientUpdateManyWithWhereWithoutAssignedToInput | ClientUpdateManyWithWhereWithoutAssignedToInput[]
    deleteMany?: ClientScalarWhereInput | ClientScalarWhereInput[]
  }

  export type OrganizationMembershipCreateNestedOneWithoutClientInput = {
    create?: XOR<OrganizationMembershipCreateWithoutClientInput, OrganizationMembershipUncheckedCreateWithoutClientInput>
    connectOrCreate?: OrganizationMembershipCreateOrConnectWithoutClientInput
    connect?: OrganizationMembershipWhereUniqueInput
  }

  export type UserCreateNestedManyWithoutAssignedClientsInput = {
    create?: XOR<UserCreateWithoutAssignedClientsInput, UserUncheckedCreateWithoutAssignedClientsInput> | UserCreateWithoutAssignedClientsInput[] | UserUncheckedCreateWithoutAssignedClientsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAssignedClientsInput | UserCreateOrConnectWithoutAssignedClientsInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type OrganizationCreateNestedOneWithoutClientsInput = {
    create?: XOR<OrganizationCreateWithoutClientsInput, OrganizationUncheckedCreateWithoutClientsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutClientsInput
    connect?: OrganizationWhereUniqueInput
  }

  export type InteractionCreateNestedManyWithoutClientInput = {
    create?: XOR<InteractionCreateWithoutClientInput, InteractionUncheckedCreateWithoutClientInput> | InteractionCreateWithoutClientInput[] | InteractionUncheckedCreateWithoutClientInput[]
    connectOrCreate?: InteractionCreateOrConnectWithoutClientInput | InteractionCreateOrConnectWithoutClientInput[]
    createMany?: InteractionCreateManyClientInputEnvelope
    connect?: InteractionWhereUniqueInput | InteractionWhereUniqueInput[]
  }

  export type InvoiceCreateNestedManyWithoutClientInput = {
    create?: XOR<InvoiceCreateWithoutClientInput, InvoiceUncheckedCreateWithoutClientInput> | InvoiceCreateWithoutClientInput[] | InvoiceUncheckedCreateWithoutClientInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutClientInput | InvoiceCreateOrConnectWithoutClientInput[]
    createMany?: InvoiceCreateManyClientInputEnvelope
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
  }

  export type SequenceTargetCreateNestedManyWithoutClientInput = {
    create?: XOR<SequenceTargetCreateWithoutClientInput, SequenceTargetUncheckedCreateWithoutClientInput> | SequenceTargetCreateWithoutClientInput[] | SequenceTargetUncheckedCreateWithoutClientInput[]
    connectOrCreate?: SequenceTargetCreateOrConnectWithoutClientInput | SequenceTargetCreateOrConnectWithoutClientInput[]
    createMany?: SequenceTargetCreateManyClientInputEnvelope
    connect?: SequenceTargetWhereUniqueInput | SequenceTargetWhereUniqueInput[]
  }

  export type PipelineCardCreateNestedManyWithoutClientInput = {
    create?: XOR<PipelineCardCreateWithoutClientInput, PipelineCardUncheckedCreateWithoutClientInput> | PipelineCardCreateWithoutClientInput[] | PipelineCardUncheckedCreateWithoutClientInput[]
    connectOrCreate?: PipelineCardCreateOrConnectWithoutClientInput | PipelineCardCreateOrConnectWithoutClientInput[]
    createMany?: PipelineCardCreateManyClientInputEnvelope
    connect?: PipelineCardWhereUniqueInput | PipelineCardWhereUniqueInput[]
  }

  export type CampaignCreateNestedManyWithoutClientInput = {
    create?: XOR<CampaignCreateWithoutClientInput, CampaignUncheckedCreateWithoutClientInput> | CampaignCreateWithoutClientInput[] | CampaignUncheckedCreateWithoutClientInput[]
    connectOrCreate?: CampaignCreateOrConnectWithoutClientInput | CampaignCreateOrConnectWithoutClientInput[]
    createMany?: CampaignCreateManyClientInputEnvelope
    connect?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
  }

  export type EmailEventCreateNestedManyWithoutClientInput = {
    create?: XOR<EmailEventCreateWithoutClientInput, EmailEventUncheckedCreateWithoutClientInput> | EmailEventCreateWithoutClientInput[] | EmailEventUncheckedCreateWithoutClientInput[]
    connectOrCreate?: EmailEventCreateOrConnectWithoutClientInput | EmailEventCreateOrConnectWithoutClientInput[]
    createMany?: EmailEventCreateManyClientInputEnvelope
    connect?: EmailEventWhereUniqueInput | EmailEventWhereUniqueInput[]
  }

  export type SubscriptionCreateNestedManyWithoutClientInput = {
    create?: XOR<SubscriptionCreateWithoutClientInput, SubscriptionUncheckedCreateWithoutClientInput> | SubscriptionCreateWithoutClientInput[] | SubscriptionUncheckedCreateWithoutClientInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutClientInput | SubscriptionCreateOrConnectWithoutClientInput[]
    createMany?: SubscriptionCreateManyClientInputEnvelope
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutAssignedClientsInput = {
    create?: XOR<UserCreateWithoutAssignedClientsInput, UserUncheckedCreateWithoutAssignedClientsInput> | UserCreateWithoutAssignedClientsInput[] | UserUncheckedCreateWithoutAssignedClientsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAssignedClientsInput | UserCreateOrConnectWithoutAssignedClientsInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type InteractionUncheckedCreateNestedManyWithoutClientInput = {
    create?: XOR<InteractionCreateWithoutClientInput, InteractionUncheckedCreateWithoutClientInput> | InteractionCreateWithoutClientInput[] | InteractionUncheckedCreateWithoutClientInput[]
    connectOrCreate?: InteractionCreateOrConnectWithoutClientInput | InteractionCreateOrConnectWithoutClientInput[]
    createMany?: InteractionCreateManyClientInputEnvelope
    connect?: InteractionWhereUniqueInput | InteractionWhereUniqueInput[]
  }

  export type InvoiceUncheckedCreateNestedManyWithoutClientInput = {
    create?: XOR<InvoiceCreateWithoutClientInput, InvoiceUncheckedCreateWithoutClientInput> | InvoiceCreateWithoutClientInput[] | InvoiceUncheckedCreateWithoutClientInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutClientInput | InvoiceCreateOrConnectWithoutClientInput[]
    createMany?: InvoiceCreateManyClientInputEnvelope
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
  }

  export type SequenceTargetUncheckedCreateNestedManyWithoutClientInput = {
    create?: XOR<SequenceTargetCreateWithoutClientInput, SequenceTargetUncheckedCreateWithoutClientInput> | SequenceTargetCreateWithoutClientInput[] | SequenceTargetUncheckedCreateWithoutClientInput[]
    connectOrCreate?: SequenceTargetCreateOrConnectWithoutClientInput | SequenceTargetCreateOrConnectWithoutClientInput[]
    createMany?: SequenceTargetCreateManyClientInputEnvelope
    connect?: SequenceTargetWhereUniqueInput | SequenceTargetWhereUniqueInput[]
  }

  export type PipelineCardUncheckedCreateNestedManyWithoutClientInput = {
    create?: XOR<PipelineCardCreateWithoutClientInput, PipelineCardUncheckedCreateWithoutClientInput> | PipelineCardCreateWithoutClientInput[] | PipelineCardUncheckedCreateWithoutClientInput[]
    connectOrCreate?: PipelineCardCreateOrConnectWithoutClientInput | PipelineCardCreateOrConnectWithoutClientInput[]
    createMany?: PipelineCardCreateManyClientInputEnvelope
    connect?: PipelineCardWhereUniqueInput | PipelineCardWhereUniqueInput[]
  }

  export type CampaignUncheckedCreateNestedManyWithoutClientInput = {
    create?: XOR<CampaignCreateWithoutClientInput, CampaignUncheckedCreateWithoutClientInput> | CampaignCreateWithoutClientInput[] | CampaignUncheckedCreateWithoutClientInput[]
    connectOrCreate?: CampaignCreateOrConnectWithoutClientInput | CampaignCreateOrConnectWithoutClientInput[]
    createMany?: CampaignCreateManyClientInputEnvelope
    connect?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
  }

  export type EmailEventUncheckedCreateNestedManyWithoutClientInput = {
    create?: XOR<EmailEventCreateWithoutClientInput, EmailEventUncheckedCreateWithoutClientInput> | EmailEventCreateWithoutClientInput[] | EmailEventUncheckedCreateWithoutClientInput[]
    connectOrCreate?: EmailEventCreateOrConnectWithoutClientInput | EmailEventCreateOrConnectWithoutClientInput[]
    createMany?: EmailEventCreateManyClientInputEnvelope
    connect?: EmailEventWhereUniqueInput | EmailEventWhereUniqueInput[]
  }

  export type SubscriptionUncheckedCreateNestedManyWithoutClientInput = {
    create?: XOR<SubscriptionCreateWithoutClientInput, SubscriptionUncheckedCreateWithoutClientInput> | SubscriptionCreateWithoutClientInput[] | SubscriptionUncheckedCreateWithoutClientInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutClientInput | SubscriptionCreateOrConnectWithoutClientInput[]
    createMany?: SubscriptionCreateManyClientInputEnvelope
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
  }

  export type EnumPipelineStageFieldUpdateOperationsInput = {
    set?: $Enums.PipelineStage
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type OrganizationMembershipUpdateOneWithoutClientNestedInput = {
    create?: XOR<OrganizationMembershipCreateWithoutClientInput, OrganizationMembershipUncheckedCreateWithoutClientInput>
    connectOrCreate?: OrganizationMembershipCreateOrConnectWithoutClientInput
    upsert?: OrganizationMembershipUpsertWithoutClientInput
    disconnect?: OrganizationMembershipWhereInput | boolean
    delete?: OrganizationMembershipWhereInput | boolean
    connect?: OrganizationMembershipWhereUniqueInput
    update?: XOR<XOR<OrganizationMembershipUpdateToOneWithWhereWithoutClientInput, OrganizationMembershipUpdateWithoutClientInput>, OrganizationMembershipUncheckedUpdateWithoutClientInput>
  }

  export type UserUpdateManyWithoutAssignedClientsNestedInput = {
    create?: XOR<UserCreateWithoutAssignedClientsInput, UserUncheckedCreateWithoutAssignedClientsInput> | UserCreateWithoutAssignedClientsInput[] | UserUncheckedCreateWithoutAssignedClientsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAssignedClientsInput | UserCreateOrConnectWithoutAssignedClientsInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutAssignedClientsInput | UserUpsertWithWhereUniqueWithoutAssignedClientsInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutAssignedClientsInput | UserUpdateWithWhereUniqueWithoutAssignedClientsInput[]
    updateMany?: UserUpdateManyWithWhereWithoutAssignedClientsInput | UserUpdateManyWithWhereWithoutAssignedClientsInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type OrganizationUpdateOneRequiredWithoutClientsNestedInput = {
    create?: XOR<OrganizationCreateWithoutClientsInput, OrganizationUncheckedCreateWithoutClientsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutClientsInput
    upsert?: OrganizationUpsertWithoutClientsInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutClientsInput, OrganizationUpdateWithoutClientsInput>, OrganizationUncheckedUpdateWithoutClientsInput>
  }

  export type InteractionUpdateManyWithoutClientNestedInput = {
    create?: XOR<InteractionCreateWithoutClientInput, InteractionUncheckedCreateWithoutClientInput> | InteractionCreateWithoutClientInput[] | InteractionUncheckedCreateWithoutClientInput[]
    connectOrCreate?: InteractionCreateOrConnectWithoutClientInput | InteractionCreateOrConnectWithoutClientInput[]
    upsert?: InteractionUpsertWithWhereUniqueWithoutClientInput | InteractionUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: InteractionCreateManyClientInputEnvelope
    set?: InteractionWhereUniqueInput | InteractionWhereUniqueInput[]
    disconnect?: InteractionWhereUniqueInput | InteractionWhereUniqueInput[]
    delete?: InteractionWhereUniqueInput | InteractionWhereUniqueInput[]
    connect?: InteractionWhereUniqueInput | InteractionWhereUniqueInput[]
    update?: InteractionUpdateWithWhereUniqueWithoutClientInput | InteractionUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: InteractionUpdateManyWithWhereWithoutClientInput | InteractionUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: InteractionScalarWhereInput | InteractionScalarWhereInput[]
  }

  export type InvoiceUpdateManyWithoutClientNestedInput = {
    create?: XOR<InvoiceCreateWithoutClientInput, InvoiceUncheckedCreateWithoutClientInput> | InvoiceCreateWithoutClientInput[] | InvoiceUncheckedCreateWithoutClientInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutClientInput | InvoiceCreateOrConnectWithoutClientInput[]
    upsert?: InvoiceUpsertWithWhereUniqueWithoutClientInput | InvoiceUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: InvoiceCreateManyClientInputEnvelope
    set?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    disconnect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    delete?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    update?: InvoiceUpdateWithWhereUniqueWithoutClientInput | InvoiceUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: InvoiceUpdateManyWithWhereWithoutClientInput | InvoiceUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: InvoiceScalarWhereInput | InvoiceScalarWhereInput[]
  }

  export type SequenceTargetUpdateManyWithoutClientNestedInput = {
    create?: XOR<SequenceTargetCreateWithoutClientInput, SequenceTargetUncheckedCreateWithoutClientInput> | SequenceTargetCreateWithoutClientInput[] | SequenceTargetUncheckedCreateWithoutClientInput[]
    connectOrCreate?: SequenceTargetCreateOrConnectWithoutClientInput | SequenceTargetCreateOrConnectWithoutClientInput[]
    upsert?: SequenceTargetUpsertWithWhereUniqueWithoutClientInput | SequenceTargetUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: SequenceTargetCreateManyClientInputEnvelope
    set?: SequenceTargetWhereUniqueInput | SequenceTargetWhereUniqueInput[]
    disconnect?: SequenceTargetWhereUniqueInput | SequenceTargetWhereUniqueInput[]
    delete?: SequenceTargetWhereUniqueInput | SequenceTargetWhereUniqueInput[]
    connect?: SequenceTargetWhereUniqueInput | SequenceTargetWhereUniqueInput[]
    update?: SequenceTargetUpdateWithWhereUniqueWithoutClientInput | SequenceTargetUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: SequenceTargetUpdateManyWithWhereWithoutClientInput | SequenceTargetUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: SequenceTargetScalarWhereInput | SequenceTargetScalarWhereInput[]
  }

  export type PipelineCardUpdateManyWithoutClientNestedInput = {
    create?: XOR<PipelineCardCreateWithoutClientInput, PipelineCardUncheckedCreateWithoutClientInput> | PipelineCardCreateWithoutClientInput[] | PipelineCardUncheckedCreateWithoutClientInput[]
    connectOrCreate?: PipelineCardCreateOrConnectWithoutClientInput | PipelineCardCreateOrConnectWithoutClientInput[]
    upsert?: PipelineCardUpsertWithWhereUniqueWithoutClientInput | PipelineCardUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: PipelineCardCreateManyClientInputEnvelope
    set?: PipelineCardWhereUniqueInput | PipelineCardWhereUniqueInput[]
    disconnect?: PipelineCardWhereUniqueInput | PipelineCardWhereUniqueInput[]
    delete?: PipelineCardWhereUniqueInput | PipelineCardWhereUniqueInput[]
    connect?: PipelineCardWhereUniqueInput | PipelineCardWhereUniqueInput[]
    update?: PipelineCardUpdateWithWhereUniqueWithoutClientInput | PipelineCardUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: PipelineCardUpdateManyWithWhereWithoutClientInput | PipelineCardUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: PipelineCardScalarWhereInput | PipelineCardScalarWhereInput[]
  }

  export type CampaignUpdateManyWithoutClientNestedInput = {
    create?: XOR<CampaignCreateWithoutClientInput, CampaignUncheckedCreateWithoutClientInput> | CampaignCreateWithoutClientInput[] | CampaignUncheckedCreateWithoutClientInput[]
    connectOrCreate?: CampaignCreateOrConnectWithoutClientInput | CampaignCreateOrConnectWithoutClientInput[]
    upsert?: CampaignUpsertWithWhereUniqueWithoutClientInput | CampaignUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: CampaignCreateManyClientInputEnvelope
    set?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
    disconnect?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
    delete?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
    connect?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
    update?: CampaignUpdateWithWhereUniqueWithoutClientInput | CampaignUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: CampaignUpdateManyWithWhereWithoutClientInput | CampaignUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: CampaignScalarWhereInput | CampaignScalarWhereInput[]
  }

  export type EmailEventUpdateManyWithoutClientNestedInput = {
    create?: XOR<EmailEventCreateWithoutClientInput, EmailEventUncheckedCreateWithoutClientInput> | EmailEventCreateWithoutClientInput[] | EmailEventUncheckedCreateWithoutClientInput[]
    connectOrCreate?: EmailEventCreateOrConnectWithoutClientInput | EmailEventCreateOrConnectWithoutClientInput[]
    upsert?: EmailEventUpsertWithWhereUniqueWithoutClientInput | EmailEventUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: EmailEventCreateManyClientInputEnvelope
    set?: EmailEventWhereUniqueInput | EmailEventWhereUniqueInput[]
    disconnect?: EmailEventWhereUniqueInput | EmailEventWhereUniqueInput[]
    delete?: EmailEventWhereUniqueInput | EmailEventWhereUniqueInput[]
    connect?: EmailEventWhereUniqueInput | EmailEventWhereUniqueInput[]
    update?: EmailEventUpdateWithWhereUniqueWithoutClientInput | EmailEventUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: EmailEventUpdateManyWithWhereWithoutClientInput | EmailEventUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: EmailEventScalarWhereInput | EmailEventScalarWhereInput[]
  }

  export type SubscriptionUpdateManyWithoutClientNestedInput = {
    create?: XOR<SubscriptionCreateWithoutClientInput, SubscriptionUncheckedCreateWithoutClientInput> | SubscriptionCreateWithoutClientInput[] | SubscriptionUncheckedCreateWithoutClientInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutClientInput | SubscriptionCreateOrConnectWithoutClientInput[]
    upsert?: SubscriptionUpsertWithWhereUniqueWithoutClientInput | SubscriptionUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: SubscriptionCreateManyClientInputEnvelope
    set?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    disconnect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    delete?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    update?: SubscriptionUpdateWithWhereUniqueWithoutClientInput | SubscriptionUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: SubscriptionUpdateManyWithWhereWithoutClientInput | SubscriptionUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: SubscriptionScalarWhereInput | SubscriptionScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutAssignedClientsNestedInput = {
    create?: XOR<UserCreateWithoutAssignedClientsInput, UserUncheckedCreateWithoutAssignedClientsInput> | UserCreateWithoutAssignedClientsInput[] | UserUncheckedCreateWithoutAssignedClientsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAssignedClientsInput | UserCreateOrConnectWithoutAssignedClientsInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutAssignedClientsInput | UserUpsertWithWhereUniqueWithoutAssignedClientsInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutAssignedClientsInput | UserUpdateWithWhereUniqueWithoutAssignedClientsInput[]
    updateMany?: UserUpdateManyWithWhereWithoutAssignedClientsInput | UserUpdateManyWithWhereWithoutAssignedClientsInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type InteractionUncheckedUpdateManyWithoutClientNestedInput = {
    create?: XOR<InteractionCreateWithoutClientInput, InteractionUncheckedCreateWithoutClientInput> | InteractionCreateWithoutClientInput[] | InteractionUncheckedCreateWithoutClientInput[]
    connectOrCreate?: InteractionCreateOrConnectWithoutClientInput | InteractionCreateOrConnectWithoutClientInput[]
    upsert?: InteractionUpsertWithWhereUniqueWithoutClientInput | InteractionUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: InteractionCreateManyClientInputEnvelope
    set?: InteractionWhereUniqueInput | InteractionWhereUniqueInput[]
    disconnect?: InteractionWhereUniqueInput | InteractionWhereUniqueInput[]
    delete?: InteractionWhereUniqueInput | InteractionWhereUniqueInput[]
    connect?: InteractionWhereUniqueInput | InteractionWhereUniqueInput[]
    update?: InteractionUpdateWithWhereUniqueWithoutClientInput | InteractionUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: InteractionUpdateManyWithWhereWithoutClientInput | InteractionUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: InteractionScalarWhereInput | InteractionScalarWhereInput[]
  }

  export type InvoiceUncheckedUpdateManyWithoutClientNestedInput = {
    create?: XOR<InvoiceCreateWithoutClientInput, InvoiceUncheckedCreateWithoutClientInput> | InvoiceCreateWithoutClientInput[] | InvoiceUncheckedCreateWithoutClientInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutClientInput | InvoiceCreateOrConnectWithoutClientInput[]
    upsert?: InvoiceUpsertWithWhereUniqueWithoutClientInput | InvoiceUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: InvoiceCreateManyClientInputEnvelope
    set?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    disconnect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    delete?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    update?: InvoiceUpdateWithWhereUniqueWithoutClientInput | InvoiceUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: InvoiceUpdateManyWithWhereWithoutClientInput | InvoiceUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: InvoiceScalarWhereInput | InvoiceScalarWhereInput[]
  }

  export type SequenceTargetUncheckedUpdateManyWithoutClientNestedInput = {
    create?: XOR<SequenceTargetCreateWithoutClientInput, SequenceTargetUncheckedCreateWithoutClientInput> | SequenceTargetCreateWithoutClientInput[] | SequenceTargetUncheckedCreateWithoutClientInput[]
    connectOrCreate?: SequenceTargetCreateOrConnectWithoutClientInput | SequenceTargetCreateOrConnectWithoutClientInput[]
    upsert?: SequenceTargetUpsertWithWhereUniqueWithoutClientInput | SequenceTargetUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: SequenceTargetCreateManyClientInputEnvelope
    set?: SequenceTargetWhereUniqueInput | SequenceTargetWhereUniqueInput[]
    disconnect?: SequenceTargetWhereUniqueInput | SequenceTargetWhereUniqueInput[]
    delete?: SequenceTargetWhereUniqueInput | SequenceTargetWhereUniqueInput[]
    connect?: SequenceTargetWhereUniqueInput | SequenceTargetWhereUniqueInput[]
    update?: SequenceTargetUpdateWithWhereUniqueWithoutClientInput | SequenceTargetUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: SequenceTargetUpdateManyWithWhereWithoutClientInput | SequenceTargetUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: SequenceTargetScalarWhereInput | SequenceTargetScalarWhereInput[]
  }

  export type PipelineCardUncheckedUpdateManyWithoutClientNestedInput = {
    create?: XOR<PipelineCardCreateWithoutClientInput, PipelineCardUncheckedCreateWithoutClientInput> | PipelineCardCreateWithoutClientInput[] | PipelineCardUncheckedCreateWithoutClientInput[]
    connectOrCreate?: PipelineCardCreateOrConnectWithoutClientInput | PipelineCardCreateOrConnectWithoutClientInput[]
    upsert?: PipelineCardUpsertWithWhereUniqueWithoutClientInput | PipelineCardUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: PipelineCardCreateManyClientInputEnvelope
    set?: PipelineCardWhereUniqueInput | PipelineCardWhereUniqueInput[]
    disconnect?: PipelineCardWhereUniqueInput | PipelineCardWhereUniqueInput[]
    delete?: PipelineCardWhereUniqueInput | PipelineCardWhereUniqueInput[]
    connect?: PipelineCardWhereUniqueInput | PipelineCardWhereUniqueInput[]
    update?: PipelineCardUpdateWithWhereUniqueWithoutClientInput | PipelineCardUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: PipelineCardUpdateManyWithWhereWithoutClientInput | PipelineCardUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: PipelineCardScalarWhereInput | PipelineCardScalarWhereInput[]
  }

  export type CampaignUncheckedUpdateManyWithoutClientNestedInput = {
    create?: XOR<CampaignCreateWithoutClientInput, CampaignUncheckedCreateWithoutClientInput> | CampaignCreateWithoutClientInput[] | CampaignUncheckedCreateWithoutClientInput[]
    connectOrCreate?: CampaignCreateOrConnectWithoutClientInput | CampaignCreateOrConnectWithoutClientInput[]
    upsert?: CampaignUpsertWithWhereUniqueWithoutClientInput | CampaignUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: CampaignCreateManyClientInputEnvelope
    set?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
    disconnect?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
    delete?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
    connect?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
    update?: CampaignUpdateWithWhereUniqueWithoutClientInput | CampaignUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: CampaignUpdateManyWithWhereWithoutClientInput | CampaignUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: CampaignScalarWhereInput | CampaignScalarWhereInput[]
  }

  export type EmailEventUncheckedUpdateManyWithoutClientNestedInput = {
    create?: XOR<EmailEventCreateWithoutClientInput, EmailEventUncheckedCreateWithoutClientInput> | EmailEventCreateWithoutClientInput[] | EmailEventUncheckedCreateWithoutClientInput[]
    connectOrCreate?: EmailEventCreateOrConnectWithoutClientInput | EmailEventCreateOrConnectWithoutClientInput[]
    upsert?: EmailEventUpsertWithWhereUniqueWithoutClientInput | EmailEventUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: EmailEventCreateManyClientInputEnvelope
    set?: EmailEventWhereUniqueInput | EmailEventWhereUniqueInput[]
    disconnect?: EmailEventWhereUniqueInput | EmailEventWhereUniqueInput[]
    delete?: EmailEventWhereUniqueInput | EmailEventWhereUniqueInput[]
    connect?: EmailEventWhereUniqueInput | EmailEventWhereUniqueInput[]
    update?: EmailEventUpdateWithWhereUniqueWithoutClientInput | EmailEventUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: EmailEventUpdateManyWithWhereWithoutClientInput | EmailEventUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: EmailEventScalarWhereInput | EmailEventScalarWhereInput[]
  }

  export type SubscriptionUncheckedUpdateManyWithoutClientNestedInput = {
    create?: XOR<SubscriptionCreateWithoutClientInput, SubscriptionUncheckedCreateWithoutClientInput> | SubscriptionCreateWithoutClientInput[] | SubscriptionUncheckedCreateWithoutClientInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutClientInput | SubscriptionCreateOrConnectWithoutClientInput[]
    upsert?: SubscriptionUpsertWithWhereUniqueWithoutClientInput | SubscriptionUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: SubscriptionCreateManyClientInputEnvelope
    set?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    disconnect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    delete?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    update?: SubscriptionUpdateWithWhereUniqueWithoutClientInput | SubscriptionUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: SubscriptionUpdateManyWithWhereWithoutClientInput | SubscriptionUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: SubscriptionScalarWhereInput | SubscriptionScalarWhereInput[]
  }

  export type ClientCreateNestedOneWithoutInteractionsInput = {
    create?: XOR<ClientCreateWithoutInteractionsInput, ClientUncheckedCreateWithoutInteractionsInput>
    connectOrCreate?: ClientCreateOrConnectWithoutInteractionsInput
    connect?: ClientWhereUniqueInput
  }

  export type EnumInteractionTypeFieldUpdateOperationsInput = {
    set?: $Enums.InteractionType
  }

  export type ClientUpdateOneRequiredWithoutInteractionsNestedInput = {
    create?: XOR<ClientCreateWithoutInteractionsInput, ClientUncheckedCreateWithoutInteractionsInput>
    connectOrCreate?: ClientCreateOrConnectWithoutInteractionsInput
    upsert?: ClientUpsertWithoutInteractionsInput
    connect?: ClientWhereUniqueInput
    update?: XOR<XOR<ClientUpdateToOneWithWhereWithoutInteractionsInput, ClientUpdateWithoutInteractionsInput>, ClientUncheckedUpdateWithoutInteractionsInput>
  }

  export type OrganizationCreateNestedOneWithoutPipelinesInput = {
    create?: XOR<OrganizationCreateWithoutPipelinesInput, OrganizationUncheckedCreateWithoutPipelinesInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutPipelinesInput
    connect?: OrganizationWhereUniqueInput
  }

  export type PipelineStageModelCreateNestedManyWithoutPipelineInput = {
    create?: XOR<PipelineStageModelCreateWithoutPipelineInput, PipelineStageModelUncheckedCreateWithoutPipelineInput> | PipelineStageModelCreateWithoutPipelineInput[] | PipelineStageModelUncheckedCreateWithoutPipelineInput[]
    connectOrCreate?: PipelineStageModelCreateOrConnectWithoutPipelineInput | PipelineStageModelCreateOrConnectWithoutPipelineInput[]
    createMany?: PipelineStageModelCreateManyPipelineInputEnvelope
    connect?: PipelineStageModelWhereUniqueInput | PipelineStageModelWhereUniqueInput[]
  }

  export type PipelineCardCreateNestedManyWithoutPipelineInput = {
    create?: XOR<PipelineCardCreateWithoutPipelineInput, PipelineCardUncheckedCreateWithoutPipelineInput> | PipelineCardCreateWithoutPipelineInput[] | PipelineCardUncheckedCreateWithoutPipelineInput[]
    connectOrCreate?: PipelineCardCreateOrConnectWithoutPipelineInput | PipelineCardCreateOrConnectWithoutPipelineInput[]
    createMany?: PipelineCardCreateManyPipelineInputEnvelope
    connect?: PipelineCardWhereUniqueInput | PipelineCardWhereUniqueInput[]
  }

  export type PipelineStageModelUncheckedCreateNestedManyWithoutPipelineInput = {
    create?: XOR<PipelineStageModelCreateWithoutPipelineInput, PipelineStageModelUncheckedCreateWithoutPipelineInput> | PipelineStageModelCreateWithoutPipelineInput[] | PipelineStageModelUncheckedCreateWithoutPipelineInput[]
    connectOrCreate?: PipelineStageModelCreateOrConnectWithoutPipelineInput | PipelineStageModelCreateOrConnectWithoutPipelineInput[]
    createMany?: PipelineStageModelCreateManyPipelineInputEnvelope
    connect?: PipelineStageModelWhereUniqueInput | PipelineStageModelWhereUniqueInput[]
  }

  export type PipelineCardUncheckedCreateNestedManyWithoutPipelineInput = {
    create?: XOR<PipelineCardCreateWithoutPipelineInput, PipelineCardUncheckedCreateWithoutPipelineInput> | PipelineCardCreateWithoutPipelineInput[] | PipelineCardUncheckedCreateWithoutPipelineInput[]
    connectOrCreate?: PipelineCardCreateOrConnectWithoutPipelineInput | PipelineCardCreateOrConnectWithoutPipelineInput[]
    createMany?: PipelineCardCreateManyPipelineInputEnvelope
    connect?: PipelineCardWhereUniqueInput | PipelineCardWhereUniqueInput[]
  }

  export type OrganizationUpdateOneRequiredWithoutPipelinesNestedInput = {
    create?: XOR<OrganizationCreateWithoutPipelinesInput, OrganizationUncheckedCreateWithoutPipelinesInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutPipelinesInput
    upsert?: OrganizationUpsertWithoutPipelinesInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutPipelinesInput, OrganizationUpdateWithoutPipelinesInput>, OrganizationUncheckedUpdateWithoutPipelinesInput>
  }

  export type PipelineStageModelUpdateManyWithoutPipelineNestedInput = {
    create?: XOR<PipelineStageModelCreateWithoutPipelineInput, PipelineStageModelUncheckedCreateWithoutPipelineInput> | PipelineStageModelCreateWithoutPipelineInput[] | PipelineStageModelUncheckedCreateWithoutPipelineInput[]
    connectOrCreate?: PipelineStageModelCreateOrConnectWithoutPipelineInput | PipelineStageModelCreateOrConnectWithoutPipelineInput[]
    upsert?: PipelineStageModelUpsertWithWhereUniqueWithoutPipelineInput | PipelineStageModelUpsertWithWhereUniqueWithoutPipelineInput[]
    createMany?: PipelineStageModelCreateManyPipelineInputEnvelope
    set?: PipelineStageModelWhereUniqueInput | PipelineStageModelWhereUniqueInput[]
    disconnect?: PipelineStageModelWhereUniqueInput | PipelineStageModelWhereUniqueInput[]
    delete?: PipelineStageModelWhereUniqueInput | PipelineStageModelWhereUniqueInput[]
    connect?: PipelineStageModelWhereUniqueInput | PipelineStageModelWhereUniqueInput[]
    update?: PipelineStageModelUpdateWithWhereUniqueWithoutPipelineInput | PipelineStageModelUpdateWithWhereUniqueWithoutPipelineInput[]
    updateMany?: PipelineStageModelUpdateManyWithWhereWithoutPipelineInput | PipelineStageModelUpdateManyWithWhereWithoutPipelineInput[]
    deleteMany?: PipelineStageModelScalarWhereInput | PipelineStageModelScalarWhereInput[]
  }

  export type PipelineCardUpdateManyWithoutPipelineNestedInput = {
    create?: XOR<PipelineCardCreateWithoutPipelineInput, PipelineCardUncheckedCreateWithoutPipelineInput> | PipelineCardCreateWithoutPipelineInput[] | PipelineCardUncheckedCreateWithoutPipelineInput[]
    connectOrCreate?: PipelineCardCreateOrConnectWithoutPipelineInput | PipelineCardCreateOrConnectWithoutPipelineInput[]
    upsert?: PipelineCardUpsertWithWhereUniqueWithoutPipelineInput | PipelineCardUpsertWithWhereUniqueWithoutPipelineInput[]
    createMany?: PipelineCardCreateManyPipelineInputEnvelope
    set?: PipelineCardWhereUniqueInput | PipelineCardWhereUniqueInput[]
    disconnect?: PipelineCardWhereUniqueInput | PipelineCardWhereUniqueInput[]
    delete?: PipelineCardWhereUniqueInput | PipelineCardWhereUniqueInput[]
    connect?: PipelineCardWhereUniqueInput | PipelineCardWhereUniqueInput[]
    update?: PipelineCardUpdateWithWhereUniqueWithoutPipelineInput | PipelineCardUpdateWithWhereUniqueWithoutPipelineInput[]
    updateMany?: PipelineCardUpdateManyWithWhereWithoutPipelineInput | PipelineCardUpdateManyWithWhereWithoutPipelineInput[]
    deleteMany?: PipelineCardScalarWhereInput | PipelineCardScalarWhereInput[]
  }

  export type PipelineStageModelUncheckedUpdateManyWithoutPipelineNestedInput = {
    create?: XOR<PipelineStageModelCreateWithoutPipelineInput, PipelineStageModelUncheckedCreateWithoutPipelineInput> | PipelineStageModelCreateWithoutPipelineInput[] | PipelineStageModelUncheckedCreateWithoutPipelineInput[]
    connectOrCreate?: PipelineStageModelCreateOrConnectWithoutPipelineInput | PipelineStageModelCreateOrConnectWithoutPipelineInput[]
    upsert?: PipelineStageModelUpsertWithWhereUniqueWithoutPipelineInput | PipelineStageModelUpsertWithWhereUniqueWithoutPipelineInput[]
    createMany?: PipelineStageModelCreateManyPipelineInputEnvelope
    set?: PipelineStageModelWhereUniqueInput | PipelineStageModelWhereUniqueInput[]
    disconnect?: PipelineStageModelWhereUniqueInput | PipelineStageModelWhereUniqueInput[]
    delete?: PipelineStageModelWhereUniqueInput | PipelineStageModelWhereUniqueInput[]
    connect?: PipelineStageModelWhereUniqueInput | PipelineStageModelWhereUniqueInput[]
    update?: PipelineStageModelUpdateWithWhereUniqueWithoutPipelineInput | PipelineStageModelUpdateWithWhereUniqueWithoutPipelineInput[]
    updateMany?: PipelineStageModelUpdateManyWithWhereWithoutPipelineInput | PipelineStageModelUpdateManyWithWhereWithoutPipelineInput[]
    deleteMany?: PipelineStageModelScalarWhereInput | PipelineStageModelScalarWhereInput[]
  }

  export type PipelineCardUncheckedUpdateManyWithoutPipelineNestedInput = {
    create?: XOR<PipelineCardCreateWithoutPipelineInput, PipelineCardUncheckedCreateWithoutPipelineInput> | PipelineCardCreateWithoutPipelineInput[] | PipelineCardUncheckedCreateWithoutPipelineInput[]
    connectOrCreate?: PipelineCardCreateOrConnectWithoutPipelineInput | PipelineCardCreateOrConnectWithoutPipelineInput[]
    upsert?: PipelineCardUpsertWithWhereUniqueWithoutPipelineInput | PipelineCardUpsertWithWhereUniqueWithoutPipelineInput[]
    createMany?: PipelineCardCreateManyPipelineInputEnvelope
    set?: PipelineCardWhereUniqueInput | PipelineCardWhereUniqueInput[]
    disconnect?: PipelineCardWhereUniqueInput | PipelineCardWhereUniqueInput[]
    delete?: PipelineCardWhereUniqueInput | PipelineCardWhereUniqueInput[]
    connect?: PipelineCardWhereUniqueInput | PipelineCardWhereUniqueInput[]
    update?: PipelineCardUpdateWithWhereUniqueWithoutPipelineInput | PipelineCardUpdateWithWhereUniqueWithoutPipelineInput[]
    updateMany?: PipelineCardUpdateManyWithWhereWithoutPipelineInput | PipelineCardUpdateManyWithWhereWithoutPipelineInput[]
    deleteMany?: PipelineCardScalarWhereInput | PipelineCardScalarWhereInput[]
  }

  export type PipelineCreateNestedOneWithoutStagesInput = {
    create?: XOR<PipelineCreateWithoutStagesInput, PipelineUncheckedCreateWithoutStagesInput>
    connectOrCreate?: PipelineCreateOrConnectWithoutStagesInput
    connect?: PipelineWhereUniqueInput
  }

  export type PipelineCardCreateNestedManyWithoutStageInput = {
    create?: XOR<PipelineCardCreateWithoutStageInput, PipelineCardUncheckedCreateWithoutStageInput> | PipelineCardCreateWithoutStageInput[] | PipelineCardUncheckedCreateWithoutStageInput[]
    connectOrCreate?: PipelineCardCreateOrConnectWithoutStageInput | PipelineCardCreateOrConnectWithoutStageInput[]
    createMany?: PipelineCardCreateManyStageInputEnvelope
    connect?: PipelineCardWhereUniqueInput | PipelineCardWhereUniqueInput[]
  }

  export type PipelineCardUncheckedCreateNestedManyWithoutStageInput = {
    create?: XOR<PipelineCardCreateWithoutStageInput, PipelineCardUncheckedCreateWithoutStageInput> | PipelineCardCreateWithoutStageInput[] | PipelineCardUncheckedCreateWithoutStageInput[]
    connectOrCreate?: PipelineCardCreateOrConnectWithoutStageInput | PipelineCardCreateOrConnectWithoutStageInput[]
    createMany?: PipelineCardCreateManyStageInputEnvelope
    connect?: PipelineCardWhereUniqueInput | PipelineCardWhereUniqueInput[]
  }

  export type PipelineUpdateOneRequiredWithoutStagesNestedInput = {
    create?: XOR<PipelineCreateWithoutStagesInput, PipelineUncheckedCreateWithoutStagesInput>
    connectOrCreate?: PipelineCreateOrConnectWithoutStagesInput
    upsert?: PipelineUpsertWithoutStagesInput
    connect?: PipelineWhereUniqueInput
    update?: XOR<XOR<PipelineUpdateToOneWithWhereWithoutStagesInput, PipelineUpdateWithoutStagesInput>, PipelineUncheckedUpdateWithoutStagesInput>
  }

  export type PipelineCardUpdateManyWithoutStageNestedInput = {
    create?: XOR<PipelineCardCreateWithoutStageInput, PipelineCardUncheckedCreateWithoutStageInput> | PipelineCardCreateWithoutStageInput[] | PipelineCardUncheckedCreateWithoutStageInput[]
    connectOrCreate?: PipelineCardCreateOrConnectWithoutStageInput | PipelineCardCreateOrConnectWithoutStageInput[]
    upsert?: PipelineCardUpsertWithWhereUniqueWithoutStageInput | PipelineCardUpsertWithWhereUniqueWithoutStageInput[]
    createMany?: PipelineCardCreateManyStageInputEnvelope
    set?: PipelineCardWhereUniqueInput | PipelineCardWhereUniqueInput[]
    disconnect?: PipelineCardWhereUniqueInput | PipelineCardWhereUniqueInput[]
    delete?: PipelineCardWhereUniqueInput | PipelineCardWhereUniqueInput[]
    connect?: PipelineCardWhereUniqueInput | PipelineCardWhereUniqueInput[]
    update?: PipelineCardUpdateWithWhereUniqueWithoutStageInput | PipelineCardUpdateWithWhereUniqueWithoutStageInput[]
    updateMany?: PipelineCardUpdateManyWithWhereWithoutStageInput | PipelineCardUpdateManyWithWhereWithoutStageInput[]
    deleteMany?: PipelineCardScalarWhereInput | PipelineCardScalarWhereInput[]
  }

  export type PipelineCardUncheckedUpdateManyWithoutStageNestedInput = {
    create?: XOR<PipelineCardCreateWithoutStageInput, PipelineCardUncheckedCreateWithoutStageInput> | PipelineCardCreateWithoutStageInput[] | PipelineCardUncheckedCreateWithoutStageInput[]
    connectOrCreate?: PipelineCardCreateOrConnectWithoutStageInput | PipelineCardCreateOrConnectWithoutStageInput[]
    upsert?: PipelineCardUpsertWithWhereUniqueWithoutStageInput | PipelineCardUpsertWithWhereUniqueWithoutStageInput[]
    createMany?: PipelineCardCreateManyStageInputEnvelope
    set?: PipelineCardWhereUniqueInput | PipelineCardWhereUniqueInput[]
    disconnect?: PipelineCardWhereUniqueInput | PipelineCardWhereUniqueInput[]
    delete?: PipelineCardWhereUniqueInput | PipelineCardWhereUniqueInput[]
    connect?: PipelineCardWhereUniqueInput | PipelineCardWhereUniqueInput[]
    update?: PipelineCardUpdateWithWhereUniqueWithoutStageInput | PipelineCardUpdateWithWhereUniqueWithoutStageInput[]
    updateMany?: PipelineCardUpdateManyWithWhereWithoutStageInput | PipelineCardUpdateManyWithWhereWithoutStageInput[]
    deleteMany?: PipelineCardScalarWhereInput | PipelineCardScalarWhereInput[]
  }

  export type OrganizationCreateNestedOneWithoutPipelineCardsInput = {
    create?: XOR<OrganizationCreateWithoutPipelineCardsInput, OrganizationUncheckedCreateWithoutPipelineCardsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutPipelineCardsInput
    connect?: OrganizationWhereUniqueInput
  }

  export type PipelineCreateNestedOneWithoutPipelineCardsInput = {
    create?: XOR<PipelineCreateWithoutPipelineCardsInput, PipelineUncheckedCreateWithoutPipelineCardsInput>
    connectOrCreate?: PipelineCreateOrConnectWithoutPipelineCardsInput
    connect?: PipelineWhereUniqueInput
  }

  export type PipelineStageModelCreateNestedOneWithoutCardsInput = {
    create?: XOR<PipelineStageModelCreateWithoutCardsInput, PipelineStageModelUncheckedCreateWithoutCardsInput>
    connectOrCreate?: PipelineStageModelCreateOrConnectWithoutCardsInput
    connect?: PipelineStageModelWhereUniqueInput
  }

  export type ClientCreateNestedOneWithoutPipelineCardsInput = {
    create?: XOR<ClientCreateWithoutPipelineCardsInput, ClientUncheckedCreateWithoutPipelineCardsInput>
    connectOrCreate?: ClientCreateOrConnectWithoutPipelineCardsInput
    connect?: ClientWhereUniqueInput
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type OrganizationUpdateOneRequiredWithoutPipelineCardsNestedInput = {
    create?: XOR<OrganizationCreateWithoutPipelineCardsInput, OrganizationUncheckedCreateWithoutPipelineCardsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutPipelineCardsInput
    upsert?: OrganizationUpsertWithoutPipelineCardsInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutPipelineCardsInput, OrganizationUpdateWithoutPipelineCardsInput>, OrganizationUncheckedUpdateWithoutPipelineCardsInput>
  }

  export type PipelineUpdateOneRequiredWithoutPipelineCardsNestedInput = {
    create?: XOR<PipelineCreateWithoutPipelineCardsInput, PipelineUncheckedCreateWithoutPipelineCardsInput>
    connectOrCreate?: PipelineCreateOrConnectWithoutPipelineCardsInput
    upsert?: PipelineUpsertWithoutPipelineCardsInput
    connect?: PipelineWhereUniqueInput
    update?: XOR<XOR<PipelineUpdateToOneWithWhereWithoutPipelineCardsInput, PipelineUpdateWithoutPipelineCardsInput>, PipelineUncheckedUpdateWithoutPipelineCardsInput>
  }

  export type PipelineStageModelUpdateOneRequiredWithoutCardsNestedInput = {
    create?: XOR<PipelineStageModelCreateWithoutCardsInput, PipelineStageModelUncheckedCreateWithoutCardsInput>
    connectOrCreate?: PipelineStageModelCreateOrConnectWithoutCardsInput
    upsert?: PipelineStageModelUpsertWithoutCardsInput
    connect?: PipelineStageModelWhereUniqueInput
    update?: XOR<XOR<PipelineStageModelUpdateToOneWithWhereWithoutCardsInput, PipelineStageModelUpdateWithoutCardsInput>, PipelineStageModelUncheckedUpdateWithoutCardsInput>
  }

  export type ClientUpdateOneRequiredWithoutPipelineCardsNestedInput = {
    create?: XOR<ClientCreateWithoutPipelineCardsInput, ClientUncheckedCreateWithoutPipelineCardsInput>
    connectOrCreate?: ClientCreateOrConnectWithoutPipelineCardsInput
    upsert?: ClientUpsertWithoutPipelineCardsInput
    connect?: ClientWhereUniqueInput
    update?: XOR<XOR<ClientUpdateToOneWithWhereWithoutPipelineCardsInput, ClientUpdateWithoutPipelineCardsInput>, ClientUncheckedUpdateWithoutPipelineCardsInput>
  }

  export type OrganizationCreateNestedOneWithoutEmailTemplatesInput = {
    create?: XOR<OrganizationCreateWithoutEmailTemplatesInput, OrganizationUncheckedCreateWithoutEmailTemplatesInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutEmailTemplatesInput
    connect?: OrganizationWhereUniqueInput
  }

  export type OrganizationUpdateOneRequiredWithoutEmailTemplatesNestedInput = {
    create?: XOR<OrganizationCreateWithoutEmailTemplatesInput, OrganizationUncheckedCreateWithoutEmailTemplatesInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutEmailTemplatesInput
    upsert?: OrganizationUpsertWithoutEmailTemplatesInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutEmailTemplatesInput, OrganizationUpdateWithoutEmailTemplatesInput>, OrganizationUncheckedUpdateWithoutEmailTemplatesInput>
  }

  export type OrganizationCreateNestedOneWithoutEmailSequencesInput = {
    create?: XOR<OrganizationCreateWithoutEmailSequencesInput, OrganizationUncheckedCreateWithoutEmailSequencesInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutEmailSequencesInput
    connect?: OrganizationWhereUniqueInput
  }

  export type EmailStepCreateNestedManyWithoutSequenceInput = {
    create?: XOR<EmailStepCreateWithoutSequenceInput, EmailStepUncheckedCreateWithoutSequenceInput> | EmailStepCreateWithoutSequenceInput[] | EmailStepUncheckedCreateWithoutSequenceInput[]
    connectOrCreate?: EmailStepCreateOrConnectWithoutSequenceInput | EmailStepCreateOrConnectWithoutSequenceInput[]
    createMany?: EmailStepCreateManySequenceInputEnvelope
    connect?: EmailStepWhereUniqueInput | EmailStepWhereUniqueInput[]
  }

  export type SequenceTargetCreateNestedManyWithoutSequenceInput = {
    create?: XOR<SequenceTargetCreateWithoutSequenceInput, SequenceTargetUncheckedCreateWithoutSequenceInput> | SequenceTargetCreateWithoutSequenceInput[] | SequenceTargetUncheckedCreateWithoutSequenceInput[]
    connectOrCreate?: SequenceTargetCreateOrConnectWithoutSequenceInput | SequenceTargetCreateOrConnectWithoutSequenceInput[]
    createMany?: SequenceTargetCreateManySequenceInputEnvelope
    connect?: SequenceTargetWhereUniqueInput | SequenceTargetWhereUniqueInput[]
  }

  export type EmailEventCreateNestedManyWithoutSequenceInput = {
    create?: XOR<EmailEventCreateWithoutSequenceInput, EmailEventUncheckedCreateWithoutSequenceInput> | EmailEventCreateWithoutSequenceInput[] | EmailEventUncheckedCreateWithoutSequenceInput[]
    connectOrCreate?: EmailEventCreateOrConnectWithoutSequenceInput | EmailEventCreateOrConnectWithoutSequenceInput[]
    createMany?: EmailEventCreateManySequenceInputEnvelope
    connect?: EmailEventWhereUniqueInput | EmailEventWhereUniqueInput[]
  }

  export type EmailStepUncheckedCreateNestedManyWithoutSequenceInput = {
    create?: XOR<EmailStepCreateWithoutSequenceInput, EmailStepUncheckedCreateWithoutSequenceInput> | EmailStepCreateWithoutSequenceInput[] | EmailStepUncheckedCreateWithoutSequenceInput[]
    connectOrCreate?: EmailStepCreateOrConnectWithoutSequenceInput | EmailStepCreateOrConnectWithoutSequenceInput[]
    createMany?: EmailStepCreateManySequenceInputEnvelope
    connect?: EmailStepWhereUniqueInput | EmailStepWhereUniqueInput[]
  }

  export type SequenceTargetUncheckedCreateNestedManyWithoutSequenceInput = {
    create?: XOR<SequenceTargetCreateWithoutSequenceInput, SequenceTargetUncheckedCreateWithoutSequenceInput> | SequenceTargetCreateWithoutSequenceInput[] | SequenceTargetUncheckedCreateWithoutSequenceInput[]
    connectOrCreate?: SequenceTargetCreateOrConnectWithoutSequenceInput | SequenceTargetCreateOrConnectWithoutSequenceInput[]
    createMany?: SequenceTargetCreateManySequenceInputEnvelope
    connect?: SequenceTargetWhereUniqueInput | SequenceTargetWhereUniqueInput[]
  }

  export type EmailEventUncheckedCreateNestedManyWithoutSequenceInput = {
    create?: XOR<EmailEventCreateWithoutSequenceInput, EmailEventUncheckedCreateWithoutSequenceInput> | EmailEventCreateWithoutSequenceInput[] | EmailEventUncheckedCreateWithoutSequenceInput[]
    connectOrCreate?: EmailEventCreateOrConnectWithoutSequenceInput | EmailEventCreateOrConnectWithoutSequenceInput[]
    createMany?: EmailEventCreateManySequenceInputEnvelope
    connect?: EmailEventWhereUniqueInput | EmailEventWhereUniqueInput[]
  }

  export type OrganizationUpdateOneRequiredWithoutEmailSequencesNestedInput = {
    create?: XOR<OrganizationCreateWithoutEmailSequencesInput, OrganizationUncheckedCreateWithoutEmailSequencesInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutEmailSequencesInput
    upsert?: OrganizationUpsertWithoutEmailSequencesInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutEmailSequencesInput, OrganizationUpdateWithoutEmailSequencesInput>, OrganizationUncheckedUpdateWithoutEmailSequencesInput>
  }

  export type EmailStepUpdateManyWithoutSequenceNestedInput = {
    create?: XOR<EmailStepCreateWithoutSequenceInput, EmailStepUncheckedCreateWithoutSequenceInput> | EmailStepCreateWithoutSequenceInput[] | EmailStepUncheckedCreateWithoutSequenceInput[]
    connectOrCreate?: EmailStepCreateOrConnectWithoutSequenceInput | EmailStepCreateOrConnectWithoutSequenceInput[]
    upsert?: EmailStepUpsertWithWhereUniqueWithoutSequenceInput | EmailStepUpsertWithWhereUniqueWithoutSequenceInput[]
    createMany?: EmailStepCreateManySequenceInputEnvelope
    set?: EmailStepWhereUniqueInput | EmailStepWhereUniqueInput[]
    disconnect?: EmailStepWhereUniqueInput | EmailStepWhereUniqueInput[]
    delete?: EmailStepWhereUniqueInput | EmailStepWhereUniqueInput[]
    connect?: EmailStepWhereUniqueInput | EmailStepWhereUniqueInput[]
    update?: EmailStepUpdateWithWhereUniqueWithoutSequenceInput | EmailStepUpdateWithWhereUniqueWithoutSequenceInput[]
    updateMany?: EmailStepUpdateManyWithWhereWithoutSequenceInput | EmailStepUpdateManyWithWhereWithoutSequenceInput[]
    deleteMany?: EmailStepScalarWhereInput | EmailStepScalarWhereInput[]
  }

  export type SequenceTargetUpdateManyWithoutSequenceNestedInput = {
    create?: XOR<SequenceTargetCreateWithoutSequenceInput, SequenceTargetUncheckedCreateWithoutSequenceInput> | SequenceTargetCreateWithoutSequenceInput[] | SequenceTargetUncheckedCreateWithoutSequenceInput[]
    connectOrCreate?: SequenceTargetCreateOrConnectWithoutSequenceInput | SequenceTargetCreateOrConnectWithoutSequenceInput[]
    upsert?: SequenceTargetUpsertWithWhereUniqueWithoutSequenceInput | SequenceTargetUpsertWithWhereUniqueWithoutSequenceInput[]
    createMany?: SequenceTargetCreateManySequenceInputEnvelope
    set?: SequenceTargetWhereUniqueInput | SequenceTargetWhereUniqueInput[]
    disconnect?: SequenceTargetWhereUniqueInput | SequenceTargetWhereUniqueInput[]
    delete?: SequenceTargetWhereUniqueInput | SequenceTargetWhereUniqueInput[]
    connect?: SequenceTargetWhereUniqueInput | SequenceTargetWhereUniqueInput[]
    update?: SequenceTargetUpdateWithWhereUniqueWithoutSequenceInput | SequenceTargetUpdateWithWhereUniqueWithoutSequenceInput[]
    updateMany?: SequenceTargetUpdateManyWithWhereWithoutSequenceInput | SequenceTargetUpdateManyWithWhereWithoutSequenceInput[]
    deleteMany?: SequenceTargetScalarWhereInput | SequenceTargetScalarWhereInput[]
  }

  export type EmailEventUpdateManyWithoutSequenceNestedInput = {
    create?: XOR<EmailEventCreateWithoutSequenceInput, EmailEventUncheckedCreateWithoutSequenceInput> | EmailEventCreateWithoutSequenceInput[] | EmailEventUncheckedCreateWithoutSequenceInput[]
    connectOrCreate?: EmailEventCreateOrConnectWithoutSequenceInput | EmailEventCreateOrConnectWithoutSequenceInput[]
    upsert?: EmailEventUpsertWithWhereUniqueWithoutSequenceInput | EmailEventUpsertWithWhereUniqueWithoutSequenceInput[]
    createMany?: EmailEventCreateManySequenceInputEnvelope
    set?: EmailEventWhereUniqueInput | EmailEventWhereUniqueInput[]
    disconnect?: EmailEventWhereUniqueInput | EmailEventWhereUniqueInput[]
    delete?: EmailEventWhereUniqueInput | EmailEventWhereUniqueInput[]
    connect?: EmailEventWhereUniqueInput | EmailEventWhereUniqueInput[]
    update?: EmailEventUpdateWithWhereUniqueWithoutSequenceInput | EmailEventUpdateWithWhereUniqueWithoutSequenceInput[]
    updateMany?: EmailEventUpdateManyWithWhereWithoutSequenceInput | EmailEventUpdateManyWithWhereWithoutSequenceInput[]
    deleteMany?: EmailEventScalarWhereInput | EmailEventScalarWhereInput[]
  }

  export type EmailStepUncheckedUpdateManyWithoutSequenceNestedInput = {
    create?: XOR<EmailStepCreateWithoutSequenceInput, EmailStepUncheckedCreateWithoutSequenceInput> | EmailStepCreateWithoutSequenceInput[] | EmailStepUncheckedCreateWithoutSequenceInput[]
    connectOrCreate?: EmailStepCreateOrConnectWithoutSequenceInput | EmailStepCreateOrConnectWithoutSequenceInput[]
    upsert?: EmailStepUpsertWithWhereUniqueWithoutSequenceInput | EmailStepUpsertWithWhereUniqueWithoutSequenceInput[]
    createMany?: EmailStepCreateManySequenceInputEnvelope
    set?: EmailStepWhereUniqueInput | EmailStepWhereUniqueInput[]
    disconnect?: EmailStepWhereUniqueInput | EmailStepWhereUniqueInput[]
    delete?: EmailStepWhereUniqueInput | EmailStepWhereUniqueInput[]
    connect?: EmailStepWhereUniqueInput | EmailStepWhereUniqueInput[]
    update?: EmailStepUpdateWithWhereUniqueWithoutSequenceInput | EmailStepUpdateWithWhereUniqueWithoutSequenceInput[]
    updateMany?: EmailStepUpdateManyWithWhereWithoutSequenceInput | EmailStepUpdateManyWithWhereWithoutSequenceInput[]
    deleteMany?: EmailStepScalarWhereInput | EmailStepScalarWhereInput[]
  }

  export type SequenceTargetUncheckedUpdateManyWithoutSequenceNestedInput = {
    create?: XOR<SequenceTargetCreateWithoutSequenceInput, SequenceTargetUncheckedCreateWithoutSequenceInput> | SequenceTargetCreateWithoutSequenceInput[] | SequenceTargetUncheckedCreateWithoutSequenceInput[]
    connectOrCreate?: SequenceTargetCreateOrConnectWithoutSequenceInput | SequenceTargetCreateOrConnectWithoutSequenceInput[]
    upsert?: SequenceTargetUpsertWithWhereUniqueWithoutSequenceInput | SequenceTargetUpsertWithWhereUniqueWithoutSequenceInput[]
    createMany?: SequenceTargetCreateManySequenceInputEnvelope
    set?: SequenceTargetWhereUniqueInput | SequenceTargetWhereUniqueInput[]
    disconnect?: SequenceTargetWhereUniqueInput | SequenceTargetWhereUniqueInput[]
    delete?: SequenceTargetWhereUniqueInput | SequenceTargetWhereUniqueInput[]
    connect?: SequenceTargetWhereUniqueInput | SequenceTargetWhereUniqueInput[]
    update?: SequenceTargetUpdateWithWhereUniqueWithoutSequenceInput | SequenceTargetUpdateWithWhereUniqueWithoutSequenceInput[]
    updateMany?: SequenceTargetUpdateManyWithWhereWithoutSequenceInput | SequenceTargetUpdateManyWithWhereWithoutSequenceInput[]
    deleteMany?: SequenceTargetScalarWhereInput | SequenceTargetScalarWhereInput[]
  }

  export type EmailEventUncheckedUpdateManyWithoutSequenceNestedInput = {
    create?: XOR<EmailEventCreateWithoutSequenceInput, EmailEventUncheckedCreateWithoutSequenceInput> | EmailEventCreateWithoutSequenceInput[] | EmailEventUncheckedCreateWithoutSequenceInput[]
    connectOrCreate?: EmailEventCreateOrConnectWithoutSequenceInput | EmailEventCreateOrConnectWithoutSequenceInput[]
    upsert?: EmailEventUpsertWithWhereUniqueWithoutSequenceInput | EmailEventUpsertWithWhereUniqueWithoutSequenceInput[]
    createMany?: EmailEventCreateManySequenceInputEnvelope
    set?: EmailEventWhereUniqueInput | EmailEventWhereUniqueInput[]
    disconnect?: EmailEventWhereUniqueInput | EmailEventWhereUniqueInput[]
    delete?: EmailEventWhereUniqueInput | EmailEventWhereUniqueInput[]
    connect?: EmailEventWhereUniqueInput | EmailEventWhereUniqueInput[]
    update?: EmailEventUpdateWithWhereUniqueWithoutSequenceInput | EmailEventUpdateWithWhereUniqueWithoutSequenceInput[]
    updateMany?: EmailEventUpdateManyWithWhereWithoutSequenceInput | EmailEventUpdateManyWithWhereWithoutSequenceInput[]
    deleteMany?: EmailEventScalarWhereInput | EmailEventScalarWhereInput[]
  }

  export type EmailSequenceCreateNestedOneWithoutStepsInput = {
    create?: XOR<EmailSequenceCreateWithoutStepsInput, EmailSequenceUncheckedCreateWithoutStepsInput>
    connectOrCreate?: EmailSequenceCreateOrConnectWithoutStepsInput
    connect?: EmailSequenceWhereUniqueInput
  }

  export type EmailSequenceUpdateOneRequiredWithoutStepsNestedInput = {
    create?: XOR<EmailSequenceCreateWithoutStepsInput, EmailSequenceUncheckedCreateWithoutStepsInput>
    connectOrCreate?: EmailSequenceCreateOrConnectWithoutStepsInput
    upsert?: EmailSequenceUpsertWithoutStepsInput
    connect?: EmailSequenceWhereUniqueInput
    update?: XOR<XOR<EmailSequenceUpdateToOneWithWhereWithoutStepsInput, EmailSequenceUpdateWithoutStepsInput>, EmailSequenceUncheckedUpdateWithoutStepsInput>
  }

  export type EmailSequenceCreateNestedOneWithoutTargetsInput = {
    create?: XOR<EmailSequenceCreateWithoutTargetsInput, EmailSequenceUncheckedCreateWithoutTargetsInput>
    connectOrCreate?: EmailSequenceCreateOrConnectWithoutTargetsInput
    connect?: EmailSequenceWhereUniqueInput
  }

  export type ClientCreateNestedOneWithoutSequencesInput = {
    create?: XOR<ClientCreateWithoutSequencesInput, ClientUncheckedCreateWithoutSequencesInput>
    connectOrCreate?: ClientCreateOrConnectWithoutSequencesInput
    connect?: ClientWhereUniqueInput
  }

  export type EmailSequenceUpdateOneRequiredWithoutTargetsNestedInput = {
    create?: XOR<EmailSequenceCreateWithoutTargetsInput, EmailSequenceUncheckedCreateWithoutTargetsInput>
    connectOrCreate?: EmailSequenceCreateOrConnectWithoutTargetsInput
    upsert?: EmailSequenceUpsertWithoutTargetsInput
    connect?: EmailSequenceWhereUniqueInput
    update?: XOR<XOR<EmailSequenceUpdateToOneWithWhereWithoutTargetsInput, EmailSequenceUpdateWithoutTargetsInput>, EmailSequenceUncheckedUpdateWithoutTargetsInput>
  }

  export type ClientUpdateOneRequiredWithoutSequencesNestedInput = {
    create?: XOR<ClientCreateWithoutSequencesInput, ClientUncheckedCreateWithoutSequencesInput>
    connectOrCreate?: ClientCreateOrConnectWithoutSequencesInput
    upsert?: ClientUpsertWithoutSequencesInput
    connect?: ClientWhereUniqueInput
    update?: XOR<XOR<ClientUpdateToOneWithWhereWithoutSequencesInput, ClientUpdateWithoutSequencesInput>, ClientUncheckedUpdateWithoutSequencesInput>
  }

  export type EmailSequenceCreateNestedOneWithoutEventsInput = {
    create?: XOR<EmailSequenceCreateWithoutEventsInput, EmailSequenceUncheckedCreateWithoutEventsInput>
    connectOrCreate?: EmailSequenceCreateOrConnectWithoutEventsInput
    connect?: EmailSequenceWhereUniqueInput
  }

  export type ClientCreateNestedOneWithoutEmailEventInput = {
    create?: XOR<ClientCreateWithoutEmailEventInput, ClientUncheckedCreateWithoutEmailEventInput>
    connectOrCreate?: ClientCreateOrConnectWithoutEmailEventInput
    connect?: ClientWhereUniqueInput
  }

  export type EmailSequenceUpdateOneWithoutEventsNestedInput = {
    create?: XOR<EmailSequenceCreateWithoutEventsInput, EmailSequenceUncheckedCreateWithoutEventsInput>
    connectOrCreate?: EmailSequenceCreateOrConnectWithoutEventsInput
    upsert?: EmailSequenceUpsertWithoutEventsInput
    disconnect?: EmailSequenceWhereInput | boolean
    delete?: EmailSequenceWhereInput | boolean
    connect?: EmailSequenceWhereUniqueInput
    update?: XOR<XOR<EmailSequenceUpdateToOneWithWhereWithoutEventsInput, EmailSequenceUpdateWithoutEventsInput>, EmailSequenceUncheckedUpdateWithoutEventsInput>
  }

  export type ClientUpdateOneWithoutEmailEventNestedInput = {
    create?: XOR<ClientCreateWithoutEmailEventInput, ClientUncheckedCreateWithoutEmailEventInput>
    connectOrCreate?: ClientCreateOrConnectWithoutEmailEventInput
    upsert?: ClientUpsertWithoutEmailEventInput
    disconnect?: ClientWhereInput | boolean
    delete?: ClientWhereInput | boolean
    connect?: ClientWhereUniqueInput
    update?: XOR<XOR<ClientUpdateToOneWithWhereWithoutEmailEventInput, ClientUpdateWithoutEmailEventInput>, ClientUncheckedUpdateWithoutEmailEventInput>
  }

  export type OrganizationCreateNestedOneWithoutInvoicesInput = {
    create?: XOR<OrganizationCreateWithoutInvoicesInput, OrganizationUncheckedCreateWithoutInvoicesInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutInvoicesInput
    connect?: OrganizationWhereUniqueInput
  }

  export type ClientCreateNestedOneWithoutInvoicesInput = {
    create?: XOR<ClientCreateWithoutInvoicesInput, ClientUncheckedCreateWithoutInvoicesInput>
    connectOrCreate?: ClientCreateOrConnectWithoutInvoicesInput
    connect?: ClientWhereUniqueInput
  }

  export type TransactionCreateNestedManyWithoutInvoiceInput = {
    create?: XOR<TransactionCreateWithoutInvoiceInput, TransactionUncheckedCreateWithoutInvoiceInput> | TransactionCreateWithoutInvoiceInput[] | TransactionUncheckedCreateWithoutInvoiceInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutInvoiceInput | TransactionCreateOrConnectWithoutInvoiceInput[]
    createMany?: TransactionCreateManyInvoiceInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type TransactionUncheckedCreateNestedManyWithoutInvoiceInput = {
    create?: XOR<TransactionCreateWithoutInvoiceInput, TransactionUncheckedCreateWithoutInvoiceInput> | TransactionCreateWithoutInvoiceInput[] | TransactionUncheckedCreateWithoutInvoiceInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutInvoiceInput | TransactionCreateOrConnectWithoutInvoiceInput[]
    createMany?: TransactionCreateManyInvoiceInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type EnumInvoiceStatusFieldUpdateOperationsInput = {
    set?: $Enums.InvoiceStatus
  }

  export type OrganizationUpdateOneRequiredWithoutInvoicesNestedInput = {
    create?: XOR<OrganizationCreateWithoutInvoicesInput, OrganizationUncheckedCreateWithoutInvoicesInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutInvoicesInput
    upsert?: OrganizationUpsertWithoutInvoicesInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutInvoicesInput, OrganizationUpdateWithoutInvoicesInput>, OrganizationUncheckedUpdateWithoutInvoicesInput>
  }

  export type ClientUpdateOneRequiredWithoutInvoicesNestedInput = {
    create?: XOR<ClientCreateWithoutInvoicesInput, ClientUncheckedCreateWithoutInvoicesInput>
    connectOrCreate?: ClientCreateOrConnectWithoutInvoicesInput
    upsert?: ClientUpsertWithoutInvoicesInput
    connect?: ClientWhereUniqueInput
    update?: XOR<XOR<ClientUpdateToOneWithWhereWithoutInvoicesInput, ClientUpdateWithoutInvoicesInput>, ClientUncheckedUpdateWithoutInvoicesInput>
  }

  export type TransactionUpdateManyWithoutInvoiceNestedInput = {
    create?: XOR<TransactionCreateWithoutInvoiceInput, TransactionUncheckedCreateWithoutInvoiceInput> | TransactionCreateWithoutInvoiceInput[] | TransactionUncheckedCreateWithoutInvoiceInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutInvoiceInput | TransactionCreateOrConnectWithoutInvoiceInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutInvoiceInput | TransactionUpsertWithWhereUniqueWithoutInvoiceInput[]
    createMany?: TransactionCreateManyInvoiceInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutInvoiceInput | TransactionUpdateWithWhereUniqueWithoutInvoiceInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutInvoiceInput | TransactionUpdateManyWithWhereWithoutInvoiceInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type TransactionUncheckedUpdateManyWithoutInvoiceNestedInput = {
    create?: XOR<TransactionCreateWithoutInvoiceInput, TransactionUncheckedCreateWithoutInvoiceInput> | TransactionCreateWithoutInvoiceInput[] | TransactionUncheckedCreateWithoutInvoiceInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutInvoiceInput | TransactionCreateOrConnectWithoutInvoiceInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutInvoiceInput | TransactionUpsertWithWhereUniqueWithoutInvoiceInput[]
    createMany?: TransactionCreateManyInvoiceInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutInvoiceInput | TransactionUpdateWithWhereUniqueWithoutInvoiceInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutInvoiceInput | TransactionUpdateManyWithWhereWithoutInvoiceInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type InvoiceCreateNestedOneWithoutTransactionsInput = {
    create?: XOR<InvoiceCreateWithoutTransactionsInput, InvoiceUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: InvoiceCreateOrConnectWithoutTransactionsInput
    connect?: InvoiceWhereUniqueInput
  }

  export type OrganizationCreateNestedOneWithoutTransactionsInput = {
    create?: XOR<OrganizationCreateWithoutTransactionsInput, OrganizationUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutTransactionsInput
    connect?: OrganizationWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type InvoiceUpdateOneRequiredWithoutTransactionsNestedInput = {
    create?: XOR<InvoiceCreateWithoutTransactionsInput, InvoiceUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: InvoiceCreateOrConnectWithoutTransactionsInput
    upsert?: InvoiceUpsertWithoutTransactionsInput
    connect?: InvoiceWhereUniqueInput
    update?: XOR<XOR<InvoiceUpdateToOneWithWhereWithoutTransactionsInput, InvoiceUpdateWithoutTransactionsInput>, InvoiceUncheckedUpdateWithoutTransactionsInput>
  }

  export type OrganizationUpdateOneWithoutTransactionsNestedInput = {
    create?: XOR<OrganizationCreateWithoutTransactionsInput, OrganizationUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutTransactionsInput
    upsert?: OrganizationUpsertWithoutTransactionsInput
    disconnect?: OrganizationWhereInput | boolean
    delete?: OrganizationWhereInput | boolean
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutTransactionsInput, OrganizationUpdateWithoutTransactionsInput>, OrganizationUncheckedUpdateWithoutTransactionsInput>
  }

  export type OrganizationCreateNestedOneWithoutSubscriptionsInput = {
    create?: XOR<OrganizationCreateWithoutSubscriptionsInput, OrganizationUncheckedCreateWithoutSubscriptionsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutSubscriptionsInput
    connect?: OrganizationWhereUniqueInput
  }

  export type ClientCreateNestedOneWithoutSubscriptionInput = {
    create?: XOR<ClientCreateWithoutSubscriptionInput, ClientUncheckedCreateWithoutSubscriptionInput>
    connectOrCreate?: ClientCreateOrConnectWithoutSubscriptionInput
    connect?: ClientWhereUniqueInput
  }

  export type OrganizationUpdateOneRequiredWithoutSubscriptionsNestedInput = {
    create?: XOR<OrganizationCreateWithoutSubscriptionsInput, OrganizationUncheckedCreateWithoutSubscriptionsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutSubscriptionsInput
    upsert?: OrganizationUpsertWithoutSubscriptionsInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutSubscriptionsInput, OrganizationUpdateWithoutSubscriptionsInput>, OrganizationUncheckedUpdateWithoutSubscriptionsInput>
  }

  export type ClientUpdateOneWithoutSubscriptionNestedInput = {
    create?: XOR<ClientCreateWithoutSubscriptionInput, ClientUncheckedCreateWithoutSubscriptionInput>
    connectOrCreate?: ClientCreateOrConnectWithoutSubscriptionInput
    upsert?: ClientUpsertWithoutSubscriptionInput
    disconnect?: ClientWhereInput | boolean
    delete?: ClientWhereInput | boolean
    connect?: ClientWhereUniqueInput
    update?: XOR<XOR<ClientUpdateToOneWithWhereWithoutSubscriptionInput, ClientUpdateWithoutSubscriptionInput>, ClientUncheckedUpdateWithoutSubscriptionInput>
  }

  export type CalendarEventCreateremindersInput = {
    set: number[]
  }

  export type OrganizationCreateNestedOneWithoutCalendarEventsInput = {
    create?: XOR<OrganizationCreateWithoutCalendarEventsInput, OrganizationUncheckedCreateWithoutCalendarEventsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutCalendarEventsInput
    connect?: OrganizationWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCalendarEventsInput = {
    create?: XOR<UserCreateWithoutCalendarEventsInput, UserUncheckedCreateWithoutCalendarEventsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCalendarEventsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumCalendarItemTypeFieldUpdateOperationsInput = {
    set?: $Enums.CalendarItemType
  }

  export type CalendarEventUpdateremindersInput = {
    set?: number[]
    push?: number | number[]
  }

  export type OrganizationUpdateOneRequiredWithoutCalendarEventsNestedInput = {
    create?: XOR<OrganizationCreateWithoutCalendarEventsInput, OrganizationUncheckedCreateWithoutCalendarEventsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutCalendarEventsInput
    upsert?: OrganizationUpsertWithoutCalendarEventsInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutCalendarEventsInput, OrganizationUpdateWithoutCalendarEventsInput>, OrganizationUncheckedUpdateWithoutCalendarEventsInput>
  }

  export type UserUpdateOneWithoutCalendarEventsNestedInput = {
    create?: XOR<UserCreateWithoutCalendarEventsInput, UserUncheckedCreateWithoutCalendarEventsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCalendarEventsInput
    upsert?: UserUpsertWithoutCalendarEventsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCalendarEventsInput, UserUpdateWithoutCalendarEventsInput>, UserUncheckedUpdateWithoutCalendarEventsInput>
  }

  export type ClientCreateNestedOneWithoutCampaignsInput = {
    create?: XOR<ClientCreateWithoutCampaignsInput, ClientUncheckedCreateWithoutCampaignsInput>
    connectOrCreate?: ClientCreateOrConnectWithoutCampaignsInput
    connect?: ClientWhereUniqueInput
  }

  export type EnumCampaignStatusFieldUpdateOperationsInput = {
    set?: $Enums.CampaignStatus
  }

  export type ClientUpdateOneRequiredWithoutCampaignsNestedInput = {
    create?: XOR<ClientCreateWithoutCampaignsInput, ClientUncheckedCreateWithoutCampaignsInput>
    connectOrCreate?: ClientCreateOrConnectWithoutCampaignsInput
    upsert?: ClientUpsertWithoutCampaignsInput
    connect?: ClientWhereUniqueInput
    update?: XOR<XOR<ClientUpdateToOneWithWhereWithoutCampaignsInput, ClientUpdateWithoutCampaignsInput>, ClientUncheckedUpdateWithoutCampaignsInput>
  }

  export type OrganizationCreateNestedOneWithoutMindmapsInput = {
    create?: XOR<OrganizationCreateWithoutMindmapsInput, OrganizationUncheckedCreateWithoutMindmapsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutMindmapsInput
    connect?: OrganizationWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutMindmapsInput = {
    create?: XOR<UserCreateWithoutMindmapsInput, UserUncheckedCreateWithoutMindmapsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMindmapsInput
    connect?: UserWhereUniqueInput
  }

  export type OrganizationUpdateOneWithoutMindmapsNestedInput = {
    create?: XOR<OrganizationCreateWithoutMindmapsInput, OrganizationUncheckedCreateWithoutMindmapsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutMindmapsInput
    upsert?: OrganizationUpsertWithoutMindmapsInput
    disconnect?: OrganizationWhereInput | boolean
    delete?: OrganizationWhereInput | boolean
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutMindmapsInput, OrganizationUpdateWithoutMindmapsInput>, OrganizationUncheckedUpdateWithoutMindmapsInput>
  }

  export type UserUpdateOneWithoutMindmapsNestedInput = {
    create?: XOR<UserCreateWithoutMindmapsInput, UserUncheckedCreateWithoutMindmapsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMindmapsInput
    upsert?: UserUpsertWithoutMindmapsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMindmapsInput, UserUpdateWithoutMindmapsInput>, UserUncheckedUpdateWithoutMindmapsInput>
  }

  export type OrganizationCreateNestedOneWithoutAffiliateLinksInput = {
    create?: XOR<OrganizationCreateWithoutAffiliateLinksInput, OrganizationUncheckedCreateWithoutAffiliateLinksInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutAffiliateLinksInput
    connect?: OrganizationWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAffiliateLinksInput = {
    create?: XOR<UserCreateWithoutAffiliateLinksInput, UserUncheckedCreateWithoutAffiliateLinksInput>
    connectOrCreate?: UserCreateOrConnectWithoutAffiliateLinksInput
    connect?: UserWhereUniqueInput
  }

  export type AffiliateClickCreateNestedManyWithoutAffiliateInput = {
    create?: XOR<AffiliateClickCreateWithoutAffiliateInput, AffiliateClickUncheckedCreateWithoutAffiliateInput> | AffiliateClickCreateWithoutAffiliateInput[] | AffiliateClickUncheckedCreateWithoutAffiliateInput[]
    connectOrCreate?: AffiliateClickCreateOrConnectWithoutAffiliateInput | AffiliateClickCreateOrConnectWithoutAffiliateInput[]
    createMany?: AffiliateClickCreateManyAffiliateInputEnvelope
    connect?: AffiliateClickWhereUniqueInput | AffiliateClickWhereUniqueInput[]
  }

  export type AffiliateClickUncheckedCreateNestedManyWithoutAffiliateInput = {
    create?: XOR<AffiliateClickCreateWithoutAffiliateInput, AffiliateClickUncheckedCreateWithoutAffiliateInput> | AffiliateClickCreateWithoutAffiliateInput[] | AffiliateClickUncheckedCreateWithoutAffiliateInput[]
    connectOrCreate?: AffiliateClickCreateOrConnectWithoutAffiliateInput | AffiliateClickCreateOrConnectWithoutAffiliateInput[]
    createMany?: AffiliateClickCreateManyAffiliateInputEnvelope
    connect?: AffiliateClickWhereUniqueInput | AffiliateClickWhereUniqueInput[]
  }

  export type OrganizationUpdateOneRequiredWithoutAffiliateLinksNestedInput = {
    create?: XOR<OrganizationCreateWithoutAffiliateLinksInput, OrganizationUncheckedCreateWithoutAffiliateLinksInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutAffiliateLinksInput
    upsert?: OrganizationUpsertWithoutAffiliateLinksInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutAffiliateLinksInput, OrganizationUpdateWithoutAffiliateLinksInput>, OrganizationUncheckedUpdateWithoutAffiliateLinksInput>
  }

  export type UserUpdateOneRequiredWithoutAffiliateLinksNestedInput = {
    create?: XOR<UserCreateWithoutAffiliateLinksInput, UserUncheckedCreateWithoutAffiliateLinksInput>
    connectOrCreate?: UserCreateOrConnectWithoutAffiliateLinksInput
    upsert?: UserUpsertWithoutAffiliateLinksInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAffiliateLinksInput, UserUpdateWithoutAffiliateLinksInput>, UserUncheckedUpdateWithoutAffiliateLinksInput>
  }

  export type AffiliateClickUpdateManyWithoutAffiliateNestedInput = {
    create?: XOR<AffiliateClickCreateWithoutAffiliateInput, AffiliateClickUncheckedCreateWithoutAffiliateInput> | AffiliateClickCreateWithoutAffiliateInput[] | AffiliateClickUncheckedCreateWithoutAffiliateInput[]
    connectOrCreate?: AffiliateClickCreateOrConnectWithoutAffiliateInput | AffiliateClickCreateOrConnectWithoutAffiliateInput[]
    upsert?: AffiliateClickUpsertWithWhereUniqueWithoutAffiliateInput | AffiliateClickUpsertWithWhereUniqueWithoutAffiliateInput[]
    createMany?: AffiliateClickCreateManyAffiliateInputEnvelope
    set?: AffiliateClickWhereUniqueInput | AffiliateClickWhereUniqueInput[]
    disconnect?: AffiliateClickWhereUniqueInput | AffiliateClickWhereUniqueInput[]
    delete?: AffiliateClickWhereUniqueInput | AffiliateClickWhereUniqueInput[]
    connect?: AffiliateClickWhereUniqueInput | AffiliateClickWhereUniqueInput[]
    update?: AffiliateClickUpdateWithWhereUniqueWithoutAffiliateInput | AffiliateClickUpdateWithWhereUniqueWithoutAffiliateInput[]
    updateMany?: AffiliateClickUpdateManyWithWhereWithoutAffiliateInput | AffiliateClickUpdateManyWithWhereWithoutAffiliateInput[]
    deleteMany?: AffiliateClickScalarWhereInput | AffiliateClickScalarWhereInput[]
  }

  export type AffiliateClickUncheckedUpdateManyWithoutAffiliateNestedInput = {
    create?: XOR<AffiliateClickCreateWithoutAffiliateInput, AffiliateClickUncheckedCreateWithoutAffiliateInput> | AffiliateClickCreateWithoutAffiliateInput[] | AffiliateClickUncheckedCreateWithoutAffiliateInput[]
    connectOrCreate?: AffiliateClickCreateOrConnectWithoutAffiliateInput | AffiliateClickCreateOrConnectWithoutAffiliateInput[]
    upsert?: AffiliateClickUpsertWithWhereUniqueWithoutAffiliateInput | AffiliateClickUpsertWithWhereUniqueWithoutAffiliateInput[]
    createMany?: AffiliateClickCreateManyAffiliateInputEnvelope
    set?: AffiliateClickWhereUniqueInput | AffiliateClickWhereUniqueInput[]
    disconnect?: AffiliateClickWhereUniqueInput | AffiliateClickWhereUniqueInput[]
    delete?: AffiliateClickWhereUniqueInput | AffiliateClickWhereUniqueInput[]
    connect?: AffiliateClickWhereUniqueInput | AffiliateClickWhereUniqueInput[]
    update?: AffiliateClickUpdateWithWhereUniqueWithoutAffiliateInput | AffiliateClickUpdateWithWhereUniqueWithoutAffiliateInput[]
    updateMany?: AffiliateClickUpdateManyWithWhereWithoutAffiliateInput | AffiliateClickUpdateManyWithWhereWithoutAffiliateInput[]
    deleteMany?: AffiliateClickScalarWhereInput | AffiliateClickScalarWhereInput[]
  }

  export type AffiliateLinkCreateNestedOneWithoutClicksInput = {
    create?: XOR<AffiliateLinkCreateWithoutClicksInput, AffiliateLinkUncheckedCreateWithoutClicksInput>
    connectOrCreate?: AffiliateLinkCreateOrConnectWithoutClicksInput
    connect?: AffiliateLinkWhereUniqueInput
  }

  export type AffiliateLinkUpdateOneRequiredWithoutClicksNestedInput = {
    create?: XOR<AffiliateLinkCreateWithoutClicksInput, AffiliateLinkUncheckedCreateWithoutClicksInput>
    connectOrCreate?: AffiliateLinkCreateOrConnectWithoutClicksInput
    upsert?: AffiliateLinkUpsertWithoutClicksInput
    connect?: AffiliateLinkWhereUniqueInput
    update?: XOR<XOR<AffiliateLinkUpdateToOneWithWhereWithoutClicksInput, AffiliateLinkUpdateWithoutClicksInput>, AffiliateLinkUncheckedUpdateWithoutClicksInput>
  }

  export type UserCreateNestedOneWithoutAccountsInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    connect?: UserWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutAccountsNestedInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    upsert?: UserUpsertWithoutAccountsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAccountsInput, UserUpdateWithoutAccountsInput>, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionsInput, UserUpdateWithoutSessionsInput>, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumOrgRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.OrgRole | EnumOrgRoleFieldRefInput<$PrismaModel>
    in?: $Enums.OrgRole[] | ListEnumOrgRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrgRole[] | ListEnumOrgRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumOrgRoleFilter<$PrismaModel> | $Enums.OrgRole
  }

  export type NestedEnumOrgRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OrgRole | EnumOrgRoleFieldRefInput<$PrismaModel>
    in?: $Enums.OrgRole[] | ListEnumOrgRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrgRole[] | ListEnumOrgRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumOrgRoleWithAggregatesFilter<$PrismaModel> | $Enums.OrgRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOrgRoleFilter<$PrismaModel>
    _max?: NestedEnumOrgRoleFilter<$PrismaModel>
  }

  export type NestedEnumPipelineStageFilter<$PrismaModel = never> = {
    equals?: $Enums.PipelineStage | EnumPipelineStageFieldRefInput<$PrismaModel>
    in?: $Enums.PipelineStage[] | ListEnumPipelineStageFieldRefInput<$PrismaModel>
    notIn?: $Enums.PipelineStage[] | ListEnumPipelineStageFieldRefInput<$PrismaModel>
    not?: NestedEnumPipelineStageFilter<$PrismaModel> | $Enums.PipelineStage
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumPipelineStageWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PipelineStage | EnumPipelineStageFieldRefInput<$PrismaModel>
    in?: $Enums.PipelineStage[] | ListEnumPipelineStageFieldRefInput<$PrismaModel>
    notIn?: $Enums.PipelineStage[] | ListEnumPipelineStageFieldRefInput<$PrismaModel>
    not?: NestedEnumPipelineStageWithAggregatesFilter<$PrismaModel> | $Enums.PipelineStage
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPipelineStageFilter<$PrismaModel>
    _max?: NestedEnumPipelineStageFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumInteractionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.InteractionType | EnumInteractionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.InteractionType[] | ListEnumInteractionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.InteractionType[] | ListEnumInteractionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumInteractionTypeFilter<$PrismaModel> | $Enums.InteractionType
  }

  export type NestedEnumInteractionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.InteractionType | EnumInteractionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.InteractionType[] | ListEnumInteractionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.InteractionType[] | ListEnumInteractionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumInteractionTypeWithAggregatesFilter<$PrismaModel> | $Enums.InteractionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumInteractionTypeFilter<$PrismaModel>
    _max?: NestedEnumInteractionTypeFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedEnumInvoiceStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.InvoiceStatus | EnumInvoiceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.InvoiceStatus[] | ListEnumInvoiceStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.InvoiceStatus[] | ListEnumInvoiceStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumInvoiceStatusFilter<$PrismaModel> | $Enums.InvoiceStatus
  }

  export type NestedEnumInvoiceStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.InvoiceStatus | EnumInvoiceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.InvoiceStatus[] | ListEnumInvoiceStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.InvoiceStatus[] | ListEnumInvoiceStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumInvoiceStatusWithAggregatesFilter<$PrismaModel> | $Enums.InvoiceStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumInvoiceStatusFilter<$PrismaModel>
    _max?: NestedEnumInvoiceStatusFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumCalendarItemTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.CalendarItemType | EnumCalendarItemTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CalendarItemType[] | ListEnumCalendarItemTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CalendarItemType[] | ListEnumCalendarItemTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCalendarItemTypeFilter<$PrismaModel> | $Enums.CalendarItemType
  }

  export type NestedEnumCalendarItemTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CalendarItemType | EnumCalendarItemTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CalendarItemType[] | ListEnumCalendarItemTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CalendarItemType[] | ListEnumCalendarItemTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCalendarItemTypeWithAggregatesFilter<$PrismaModel> | $Enums.CalendarItemType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCalendarItemTypeFilter<$PrismaModel>
    _max?: NestedEnumCalendarItemTypeFilter<$PrismaModel>
  }

  export type NestedEnumCampaignStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.CampaignStatus | EnumCampaignStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CampaignStatus[] | ListEnumCampaignStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CampaignStatus[] | ListEnumCampaignStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCampaignStatusFilter<$PrismaModel> | $Enums.CampaignStatus
  }

  export type NestedEnumCampaignStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CampaignStatus | EnumCampaignStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CampaignStatus[] | ListEnumCampaignStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CampaignStatus[] | ListEnumCampaignStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCampaignStatusWithAggregatesFilter<$PrismaModel> | $Enums.CampaignStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCampaignStatusFilter<$PrismaModel>
    _max?: NestedEnumCampaignStatusFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type AccountCreateWithoutUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUncheckedCreateWithoutUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountCreateOrConnectWithoutUserInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountCreateManyUserInputEnvelope = {
    data: AccountCreateManyUserInput | AccountCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SessionCreateWithoutUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: SessionCreateManyUserInput | SessionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type OrganizationMembershipCreateWithoutUserInput = {
    id?: string
    role?: $Enums.OrgRole
    organization: OrganizationCreateNestedOneWithoutMembershipsInput
    Client?: ClientCreateNestedManyWithoutAssignedToInput
  }

  export type OrganizationMembershipUncheckedCreateWithoutUserInput = {
    id?: string
    organizationId: string
    role?: $Enums.OrgRole
    Client?: ClientUncheckedCreateNestedManyWithoutAssignedToInput
  }

  export type OrganizationMembershipCreateOrConnectWithoutUserInput = {
    where: OrganizationMembershipWhereUniqueInput
    create: XOR<OrganizationMembershipCreateWithoutUserInput, OrganizationMembershipUncheckedCreateWithoutUserInput>
  }

  export type OrganizationMembershipCreateManyUserInputEnvelope = {
    data: OrganizationMembershipCreateManyUserInput | OrganizationMembershipCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ClientCreateWithoutAssignedUsersInput = {
    id?: string
    name: string
    email: string
    phone?: string | null
    company?: string | null
    stage?: $Enums.PipelineStage
    valueUsd?: number
    isPaid?: boolean
    isOnboarded?: boolean
    competitors?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    assignedTo?: OrganizationMembershipCreateNestedOneWithoutClientInput
    organization: OrganizationCreateNestedOneWithoutClientsInput
    interactions?: InteractionCreateNestedManyWithoutClientInput
    invoices?: InvoiceCreateNestedManyWithoutClientInput
    sequences?: SequenceTargetCreateNestedManyWithoutClientInput
    pipelineCards?: PipelineCardCreateNestedManyWithoutClientInput
    campaigns?: CampaignCreateNestedManyWithoutClientInput
    EmailEvent?: EmailEventCreateNestedManyWithoutClientInput
    Subscription?: SubscriptionCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateWithoutAssignedUsersInput = {
    id?: string
    organizationId: string
    name: string
    email: string
    phone?: string | null
    company?: string | null
    stage?: $Enums.PipelineStage
    valueUsd?: number
    isPaid?: boolean
    isOnboarded?: boolean
    competitors?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    assignedToMembershipId?: string | null
    interactions?: InteractionUncheckedCreateNestedManyWithoutClientInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutClientInput
    sequences?: SequenceTargetUncheckedCreateNestedManyWithoutClientInput
    pipelineCards?: PipelineCardUncheckedCreateNestedManyWithoutClientInput
    campaigns?: CampaignUncheckedCreateNestedManyWithoutClientInput
    EmailEvent?: EmailEventUncheckedCreateNestedManyWithoutClientInput
    Subscription?: SubscriptionUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientCreateOrConnectWithoutAssignedUsersInput = {
    where: ClientWhereUniqueInput
    create: XOR<ClientCreateWithoutAssignedUsersInput, ClientUncheckedCreateWithoutAssignedUsersInput>
  }

  export type MindMapCreateWithoutOwnerUserInput = {
    id?: string
    data: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    organization?: OrganizationCreateNestedOneWithoutMindmapsInput
  }

  export type MindMapUncheckedCreateWithoutOwnerUserInput = {
    id?: string
    organizationId?: string | null
    data: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type MindMapCreateOrConnectWithoutOwnerUserInput = {
    where: MindMapWhereUniqueInput
    create: XOR<MindMapCreateWithoutOwnerUserInput, MindMapUncheckedCreateWithoutOwnerUserInput>
  }

  export type MindMapCreateManyOwnerUserInputEnvelope = {
    data: MindMapCreateManyOwnerUserInput | MindMapCreateManyOwnerUserInput[]
    skipDuplicates?: boolean
  }

  export type AffiliateLinkCreateWithoutUserInput = {
    id?: string
    code: string
    commissionRate?: number
    createdAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutAffiliateLinksInput
    clicks?: AffiliateClickCreateNestedManyWithoutAffiliateInput
  }

  export type AffiliateLinkUncheckedCreateWithoutUserInput = {
    id?: string
    organizationId: string
    code: string
    commissionRate?: number
    createdAt?: Date | string
    clicks?: AffiliateClickUncheckedCreateNestedManyWithoutAffiliateInput
  }

  export type AffiliateLinkCreateOrConnectWithoutUserInput = {
    where: AffiliateLinkWhereUniqueInput
    create: XOR<AffiliateLinkCreateWithoutUserInput, AffiliateLinkUncheckedCreateWithoutUserInput>
  }

  export type AffiliateLinkCreateManyUserInputEnvelope = {
    data: AffiliateLinkCreateManyUserInput | AffiliateLinkCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CalendarEventCreateWithoutCreatedByInput = {
    id?: string
    title: string
    start: Date | string
    end?: Date | string | null
    level?: string | null
    description?: string | null
    createdAt?: Date | string
    type?: $Enums.CalendarItemType
    allDay?: boolean
    location?: string | null
    reminders?: CalendarEventCreateremindersInput | number[]
    completed?: boolean
    seriesId?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    organization: OrganizationCreateNestedOneWithoutCalendarEventsInput
  }

  export type CalendarEventUncheckedCreateWithoutCreatedByInput = {
    id?: string
    organizationId: string
    title: string
    start: Date | string
    end?: Date | string | null
    level?: string | null
    description?: string | null
    createdAt?: Date | string
    type?: $Enums.CalendarItemType
    allDay?: boolean
    location?: string | null
    reminders?: CalendarEventCreateremindersInput | number[]
    completed?: boolean
    seriesId?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type CalendarEventCreateOrConnectWithoutCreatedByInput = {
    where: CalendarEventWhereUniqueInput
    create: XOR<CalendarEventCreateWithoutCreatedByInput, CalendarEventUncheckedCreateWithoutCreatedByInput>
  }

  export type CalendarEventCreateManyCreatedByInputEnvelope = {
    data: CalendarEventCreateManyCreatedByInput | CalendarEventCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type AccountUpsertWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    update: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountUpdateWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    data: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
  }

  export type AccountUpdateManyWithWhereWithoutUserInput = {
    where: AccountScalarWhereInput
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyWithoutUserInput>
  }

  export type AccountScalarWhereInput = {
    AND?: AccountScalarWhereInput | AccountScalarWhereInput[]
    OR?: AccountScalarWhereInput[]
    NOT?: AccountScalarWhereInput | AccountScalarWhereInput[]
    id?: StringFilter<"Account"> | string
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutUserInput>
  }

  export type SessionScalarWhereInput = {
    AND?: SessionScalarWhereInput | SessionScalarWhereInput[]
    OR?: SessionScalarWhereInput[]
    NOT?: SessionScalarWhereInput | SessionScalarWhereInput[]
    id?: StringFilter<"Session"> | string
    sessionToken?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    expires?: DateTimeFilter<"Session"> | Date | string
  }

  export type OrganizationMembershipUpsertWithWhereUniqueWithoutUserInput = {
    where: OrganizationMembershipWhereUniqueInput
    update: XOR<OrganizationMembershipUpdateWithoutUserInput, OrganizationMembershipUncheckedUpdateWithoutUserInput>
    create: XOR<OrganizationMembershipCreateWithoutUserInput, OrganizationMembershipUncheckedCreateWithoutUserInput>
  }

  export type OrganizationMembershipUpdateWithWhereUniqueWithoutUserInput = {
    where: OrganizationMembershipWhereUniqueInput
    data: XOR<OrganizationMembershipUpdateWithoutUserInput, OrganizationMembershipUncheckedUpdateWithoutUserInput>
  }

  export type OrganizationMembershipUpdateManyWithWhereWithoutUserInput = {
    where: OrganizationMembershipScalarWhereInput
    data: XOR<OrganizationMembershipUpdateManyMutationInput, OrganizationMembershipUncheckedUpdateManyWithoutUserInput>
  }

  export type OrganizationMembershipScalarWhereInput = {
    AND?: OrganizationMembershipScalarWhereInput | OrganizationMembershipScalarWhereInput[]
    OR?: OrganizationMembershipScalarWhereInput[]
    NOT?: OrganizationMembershipScalarWhereInput | OrganizationMembershipScalarWhereInput[]
    id?: StringFilter<"OrganizationMembership"> | string
    organizationId?: StringFilter<"OrganizationMembership"> | string
    userId?: StringFilter<"OrganizationMembership"> | string
    role?: EnumOrgRoleFilter<"OrganizationMembership"> | $Enums.OrgRole
  }

  export type ClientUpsertWithWhereUniqueWithoutAssignedUsersInput = {
    where: ClientWhereUniqueInput
    update: XOR<ClientUpdateWithoutAssignedUsersInput, ClientUncheckedUpdateWithoutAssignedUsersInput>
    create: XOR<ClientCreateWithoutAssignedUsersInput, ClientUncheckedCreateWithoutAssignedUsersInput>
  }

  export type ClientUpdateWithWhereUniqueWithoutAssignedUsersInput = {
    where: ClientWhereUniqueInput
    data: XOR<ClientUpdateWithoutAssignedUsersInput, ClientUncheckedUpdateWithoutAssignedUsersInput>
  }

  export type ClientUpdateManyWithWhereWithoutAssignedUsersInput = {
    where: ClientScalarWhereInput
    data: XOR<ClientUpdateManyMutationInput, ClientUncheckedUpdateManyWithoutAssignedUsersInput>
  }

  export type ClientScalarWhereInput = {
    AND?: ClientScalarWhereInput | ClientScalarWhereInput[]
    OR?: ClientScalarWhereInput[]
    NOT?: ClientScalarWhereInput | ClientScalarWhereInput[]
    id?: StringFilter<"Client"> | string
    organizationId?: StringFilter<"Client"> | string
    name?: StringFilter<"Client"> | string
    email?: StringFilter<"Client"> | string
    phone?: StringNullableFilter<"Client"> | string | null
    company?: StringNullableFilter<"Client"> | string | null
    stage?: EnumPipelineStageFilter<"Client"> | $Enums.PipelineStage
    valueUsd?: IntFilter<"Client"> | number
    isPaid?: BoolFilter<"Client"> | boolean
    isOnboarded?: BoolFilter<"Client"> | boolean
    competitors?: JsonNullableFilter<"Client">
    notes?: JsonNullableFilter<"Client">
    createdAt?: DateTimeFilter<"Client"> | Date | string
    assignedToMembershipId?: StringNullableFilter<"Client"> | string | null
  }

  export type MindMapUpsertWithWhereUniqueWithoutOwnerUserInput = {
    where: MindMapWhereUniqueInput
    update: XOR<MindMapUpdateWithoutOwnerUserInput, MindMapUncheckedUpdateWithoutOwnerUserInput>
    create: XOR<MindMapCreateWithoutOwnerUserInput, MindMapUncheckedCreateWithoutOwnerUserInput>
  }

  export type MindMapUpdateWithWhereUniqueWithoutOwnerUserInput = {
    where: MindMapWhereUniqueInput
    data: XOR<MindMapUpdateWithoutOwnerUserInput, MindMapUncheckedUpdateWithoutOwnerUserInput>
  }

  export type MindMapUpdateManyWithWhereWithoutOwnerUserInput = {
    where: MindMapScalarWhereInput
    data: XOR<MindMapUpdateManyMutationInput, MindMapUncheckedUpdateManyWithoutOwnerUserInput>
  }

  export type MindMapScalarWhereInput = {
    AND?: MindMapScalarWhereInput | MindMapScalarWhereInput[]
    OR?: MindMapScalarWhereInput[]
    NOT?: MindMapScalarWhereInput | MindMapScalarWhereInput[]
    id?: StringFilter<"MindMap"> | string
    organizationId?: StringNullableFilter<"MindMap"> | string | null
    ownerUserId?: StringNullableFilter<"MindMap"> | string | null
    data?: JsonFilter<"MindMap">
    createdAt?: DateTimeFilter<"MindMap"> | Date | string
  }

  export type AffiliateLinkUpsertWithWhereUniqueWithoutUserInput = {
    where: AffiliateLinkWhereUniqueInput
    update: XOR<AffiliateLinkUpdateWithoutUserInput, AffiliateLinkUncheckedUpdateWithoutUserInput>
    create: XOR<AffiliateLinkCreateWithoutUserInput, AffiliateLinkUncheckedCreateWithoutUserInput>
  }

  export type AffiliateLinkUpdateWithWhereUniqueWithoutUserInput = {
    where: AffiliateLinkWhereUniqueInput
    data: XOR<AffiliateLinkUpdateWithoutUserInput, AffiliateLinkUncheckedUpdateWithoutUserInput>
  }

  export type AffiliateLinkUpdateManyWithWhereWithoutUserInput = {
    where: AffiliateLinkScalarWhereInput
    data: XOR<AffiliateLinkUpdateManyMutationInput, AffiliateLinkUncheckedUpdateManyWithoutUserInput>
  }

  export type AffiliateLinkScalarWhereInput = {
    AND?: AffiliateLinkScalarWhereInput | AffiliateLinkScalarWhereInput[]
    OR?: AffiliateLinkScalarWhereInput[]
    NOT?: AffiliateLinkScalarWhereInput | AffiliateLinkScalarWhereInput[]
    id?: StringFilter<"AffiliateLink"> | string
    organizationId?: StringFilter<"AffiliateLink"> | string
    userId?: StringFilter<"AffiliateLink"> | string
    code?: StringFilter<"AffiliateLink"> | string
    commissionRate?: FloatFilter<"AffiliateLink"> | number
    createdAt?: DateTimeFilter<"AffiliateLink"> | Date | string
  }

  export type CalendarEventUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: CalendarEventWhereUniqueInput
    update: XOR<CalendarEventUpdateWithoutCreatedByInput, CalendarEventUncheckedUpdateWithoutCreatedByInput>
    create: XOR<CalendarEventCreateWithoutCreatedByInput, CalendarEventUncheckedCreateWithoutCreatedByInput>
  }

  export type CalendarEventUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: CalendarEventWhereUniqueInput
    data: XOR<CalendarEventUpdateWithoutCreatedByInput, CalendarEventUncheckedUpdateWithoutCreatedByInput>
  }

  export type CalendarEventUpdateManyWithWhereWithoutCreatedByInput = {
    where: CalendarEventScalarWhereInput
    data: XOR<CalendarEventUpdateManyMutationInput, CalendarEventUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type CalendarEventScalarWhereInput = {
    AND?: CalendarEventScalarWhereInput | CalendarEventScalarWhereInput[]
    OR?: CalendarEventScalarWhereInput[]
    NOT?: CalendarEventScalarWhereInput | CalendarEventScalarWhereInput[]
    id?: StringFilter<"CalendarEvent"> | string
    organizationId?: StringFilter<"CalendarEvent"> | string
    title?: StringFilter<"CalendarEvent"> | string
    start?: DateTimeFilter<"CalendarEvent"> | Date | string
    end?: DateTimeNullableFilter<"CalendarEvent"> | Date | string | null
    level?: StringNullableFilter<"CalendarEvent"> | string | null
    description?: StringNullableFilter<"CalendarEvent"> | string | null
    createdById?: StringNullableFilter<"CalendarEvent"> | string | null
    createdAt?: DateTimeFilter<"CalendarEvent"> | Date | string
    type?: EnumCalendarItemTypeFilter<"CalendarEvent"> | $Enums.CalendarItemType
    allDay?: BoolFilter<"CalendarEvent"> | boolean
    location?: StringNullableFilter<"CalendarEvent"> | string | null
    reminders?: IntNullableListFilter<"CalendarEvent">
    completed?: BoolFilter<"CalendarEvent"> | boolean
    seriesId?: StringNullableFilter<"CalendarEvent"> | string | null
    metadata?: JsonNullableFilter<"CalendarEvent">
  }

  export type OrganizationMembershipCreateWithoutOrganizationInput = {
    id?: string
    role?: $Enums.OrgRole
    user: UserCreateNestedOneWithoutMembershipsInput
    Client?: ClientCreateNestedManyWithoutAssignedToInput
  }

  export type OrganizationMembershipUncheckedCreateWithoutOrganizationInput = {
    id?: string
    userId: string
    role?: $Enums.OrgRole
    Client?: ClientUncheckedCreateNestedManyWithoutAssignedToInput
  }

  export type OrganizationMembershipCreateOrConnectWithoutOrganizationInput = {
    where: OrganizationMembershipWhereUniqueInput
    create: XOR<OrganizationMembershipCreateWithoutOrganizationInput, OrganizationMembershipUncheckedCreateWithoutOrganizationInput>
  }

  export type OrganizationMembershipCreateManyOrganizationInputEnvelope = {
    data: OrganizationMembershipCreateManyOrganizationInput | OrganizationMembershipCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type ClientCreateWithoutOrganizationInput = {
    id?: string
    name: string
    email: string
    phone?: string | null
    company?: string | null
    stage?: $Enums.PipelineStage
    valueUsd?: number
    isPaid?: boolean
    isOnboarded?: boolean
    competitors?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    assignedTo?: OrganizationMembershipCreateNestedOneWithoutClientInput
    assignedUsers?: UserCreateNestedManyWithoutAssignedClientsInput
    interactions?: InteractionCreateNestedManyWithoutClientInput
    invoices?: InvoiceCreateNestedManyWithoutClientInput
    sequences?: SequenceTargetCreateNestedManyWithoutClientInput
    pipelineCards?: PipelineCardCreateNestedManyWithoutClientInput
    campaigns?: CampaignCreateNestedManyWithoutClientInput
    EmailEvent?: EmailEventCreateNestedManyWithoutClientInput
    Subscription?: SubscriptionCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateWithoutOrganizationInput = {
    id?: string
    name: string
    email: string
    phone?: string | null
    company?: string | null
    stage?: $Enums.PipelineStage
    valueUsd?: number
    isPaid?: boolean
    isOnboarded?: boolean
    competitors?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    assignedToMembershipId?: string | null
    assignedUsers?: UserUncheckedCreateNestedManyWithoutAssignedClientsInput
    interactions?: InteractionUncheckedCreateNestedManyWithoutClientInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutClientInput
    sequences?: SequenceTargetUncheckedCreateNestedManyWithoutClientInput
    pipelineCards?: PipelineCardUncheckedCreateNestedManyWithoutClientInput
    campaigns?: CampaignUncheckedCreateNestedManyWithoutClientInput
    EmailEvent?: EmailEventUncheckedCreateNestedManyWithoutClientInput
    Subscription?: SubscriptionUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientCreateOrConnectWithoutOrganizationInput = {
    where: ClientWhereUniqueInput
    create: XOR<ClientCreateWithoutOrganizationInput, ClientUncheckedCreateWithoutOrganizationInput>
  }

  export type ClientCreateManyOrganizationInputEnvelope = {
    data: ClientCreateManyOrganizationInput | ClientCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type PipelineCreateWithoutOrganizationInput = {
    id?: string
    name: string
    createdAt?: Date | string
    stages?: PipelineStageModelCreateNestedManyWithoutPipelineInput
    pipelineCards?: PipelineCardCreateNestedManyWithoutPipelineInput
  }

  export type PipelineUncheckedCreateWithoutOrganizationInput = {
    id?: string
    name: string
    createdAt?: Date | string
    stages?: PipelineStageModelUncheckedCreateNestedManyWithoutPipelineInput
    pipelineCards?: PipelineCardUncheckedCreateNestedManyWithoutPipelineInput
  }

  export type PipelineCreateOrConnectWithoutOrganizationInput = {
    where: PipelineWhereUniqueInput
    create: XOR<PipelineCreateWithoutOrganizationInput, PipelineUncheckedCreateWithoutOrganizationInput>
  }

  export type PipelineCreateManyOrganizationInputEnvelope = {
    data: PipelineCreateManyOrganizationInput | PipelineCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type InvoiceCreateWithoutOrganizationInput = {
    id?: string
    amountUsd: number
    status?: $Enums.InvoiceStatus
    dueDate: Date | string
    createdAt?: Date | string
    client: ClientCreateNestedOneWithoutInvoicesInput
    transactions?: TransactionCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceUncheckedCreateWithoutOrganizationInput = {
    id?: string
    clientId: string
    amountUsd: number
    status?: $Enums.InvoiceStatus
    dueDate: Date | string
    createdAt?: Date | string
    transactions?: TransactionUncheckedCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceCreateOrConnectWithoutOrganizationInput = {
    where: InvoiceWhereUniqueInput
    create: XOR<InvoiceCreateWithoutOrganizationInput, InvoiceUncheckedCreateWithoutOrganizationInput>
  }

  export type InvoiceCreateManyOrganizationInputEnvelope = {
    data: InvoiceCreateManyOrganizationInput | InvoiceCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type MindMapCreateWithoutOrganizationInput = {
    id?: string
    data: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    ownerUser?: UserCreateNestedOneWithoutMindmapsInput
  }

  export type MindMapUncheckedCreateWithoutOrganizationInput = {
    id?: string
    ownerUserId?: string | null
    data: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type MindMapCreateOrConnectWithoutOrganizationInput = {
    where: MindMapWhereUniqueInput
    create: XOR<MindMapCreateWithoutOrganizationInput, MindMapUncheckedCreateWithoutOrganizationInput>
  }

  export type MindMapCreateManyOrganizationInputEnvelope = {
    data: MindMapCreateManyOrganizationInput | MindMapCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type AffiliateLinkCreateWithoutOrganizationInput = {
    id?: string
    code: string
    commissionRate?: number
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutAffiliateLinksInput
    clicks?: AffiliateClickCreateNestedManyWithoutAffiliateInput
  }

  export type AffiliateLinkUncheckedCreateWithoutOrganizationInput = {
    id?: string
    userId: string
    code: string
    commissionRate?: number
    createdAt?: Date | string
    clicks?: AffiliateClickUncheckedCreateNestedManyWithoutAffiliateInput
  }

  export type AffiliateLinkCreateOrConnectWithoutOrganizationInput = {
    where: AffiliateLinkWhereUniqueInput
    create: XOR<AffiliateLinkCreateWithoutOrganizationInput, AffiliateLinkUncheckedCreateWithoutOrganizationInput>
  }

  export type AffiliateLinkCreateManyOrganizationInputEnvelope = {
    data: AffiliateLinkCreateManyOrganizationInput | AffiliateLinkCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type PipelineCardCreateWithoutOrganizationInput = {
    id?: string
    title: string
    value?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    pipeline: PipelineCreateNestedOneWithoutPipelineCardsInput
    stage: PipelineStageModelCreateNestedOneWithoutCardsInput
    client: ClientCreateNestedOneWithoutPipelineCardsInput
  }

  export type PipelineCardUncheckedCreateWithoutOrganizationInput = {
    id?: string
    pipelineId: string
    stageId: string
    clientId: string
    title: string
    value?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PipelineCardCreateOrConnectWithoutOrganizationInput = {
    where: PipelineCardWhereUniqueInput
    create: XOR<PipelineCardCreateWithoutOrganizationInput, PipelineCardUncheckedCreateWithoutOrganizationInput>
  }

  export type PipelineCardCreateManyOrganizationInputEnvelope = {
    data: PipelineCardCreateManyOrganizationInput | PipelineCardCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type TransactionCreateWithoutOrganizationInput = {
    id?: string
    amount: number
    currency?: string
    gateway: string
    gatewayPayload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    invoice: InvoiceCreateNestedOneWithoutTransactionsInput
  }

  export type TransactionUncheckedCreateWithoutOrganizationInput = {
    id?: string
    invoiceId: string
    amount: number
    currency?: string
    gateway: string
    gatewayPayload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type TransactionCreateOrConnectWithoutOrganizationInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutOrganizationInput, TransactionUncheckedCreateWithoutOrganizationInput>
  }

  export type TransactionCreateManyOrganizationInputEnvelope = {
    data: TransactionCreateManyOrganizationInput | TransactionCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type SubscriptionCreateWithoutOrganizationInput = {
    id?: string
    status: string
    priceId?: string | null
    subscriptionId?: string | null
    currentPeriodEnd?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    client?: ClientCreateNestedOneWithoutSubscriptionInput
  }

  export type SubscriptionUncheckedCreateWithoutOrganizationInput = {
    id?: string
    clientId?: string | null
    status: string
    priceId?: string | null
    subscriptionId?: string | null
    currentPeriodEnd?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubscriptionCreateOrConnectWithoutOrganizationInput = {
    where: SubscriptionWhereUniqueInput
    create: XOR<SubscriptionCreateWithoutOrganizationInput, SubscriptionUncheckedCreateWithoutOrganizationInput>
  }

  export type SubscriptionCreateManyOrganizationInputEnvelope = {
    data: SubscriptionCreateManyOrganizationInput | SubscriptionCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type EmailSequenceCreateWithoutOrganizationInput = {
    id?: string
    name: string
    sent?: number
    opens?: number
    clicks?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    steps?: EmailStepCreateNestedManyWithoutSequenceInput
    targets?: SequenceTargetCreateNestedManyWithoutSequenceInput
    events?: EmailEventCreateNestedManyWithoutSequenceInput
  }

  export type EmailSequenceUncheckedCreateWithoutOrganizationInput = {
    id?: string
    name: string
    sent?: number
    opens?: number
    clicks?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    steps?: EmailStepUncheckedCreateNestedManyWithoutSequenceInput
    targets?: SequenceTargetUncheckedCreateNestedManyWithoutSequenceInput
    events?: EmailEventUncheckedCreateNestedManyWithoutSequenceInput
  }

  export type EmailSequenceCreateOrConnectWithoutOrganizationInput = {
    where: EmailSequenceWhereUniqueInput
    create: XOR<EmailSequenceCreateWithoutOrganizationInput, EmailSequenceUncheckedCreateWithoutOrganizationInput>
  }

  export type EmailSequenceCreateManyOrganizationInputEnvelope = {
    data: EmailSequenceCreateManyOrganizationInput | EmailSequenceCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type EmailTemplateCreateWithoutOrganizationInput = {
    id?: string
    name: string
    subject: string
    html: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmailTemplateUncheckedCreateWithoutOrganizationInput = {
    id?: string
    name: string
    subject: string
    html: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmailTemplateCreateOrConnectWithoutOrganizationInput = {
    where: EmailTemplateWhereUniqueInput
    create: XOR<EmailTemplateCreateWithoutOrganizationInput, EmailTemplateUncheckedCreateWithoutOrganizationInput>
  }

  export type EmailTemplateCreateManyOrganizationInputEnvelope = {
    data: EmailTemplateCreateManyOrganizationInput | EmailTemplateCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type CalendarEventCreateWithoutOrganizationInput = {
    id?: string
    title: string
    start: Date | string
    end?: Date | string | null
    level?: string | null
    description?: string | null
    createdAt?: Date | string
    type?: $Enums.CalendarItemType
    allDay?: boolean
    location?: string | null
    reminders?: CalendarEventCreateremindersInput | number[]
    completed?: boolean
    seriesId?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdBy?: UserCreateNestedOneWithoutCalendarEventsInput
  }

  export type CalendarEventUncheckedCreateWithoutOrganizationInput = {
    id?: string
    title: string
    start: Date | string
    end?: Date | string | null
    level?: string | null
    description?: string | null
    createdById?: string | null
    createdAt?: Date | string
    type?: $Enums.CalendarItemType
    allDay?: boolean
    location?: string | null
    reminders?: CalendarEventCreateremindersInput | number[]
    completed?: boolean
    seriesId?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type CalendarEventCreateOrConnectWithoutOrganizationInput = {
    where: CalendarEventWhereUniqueInput
    create: XOR<CalendarEventCreateWithoutOrganizationInput, CalendarEventUncheckedCreateWithoutOrganizationInput>
  }

  export type CalendarEventCreateManyOrganizationInputEnvelope = {
    data: CalendarEventCreateManyOrganizationInput | CalendarEventCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type OrganizationMembershipUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: OrganizationMembershipWhereUniqueInput
    update: XOR<OrganizationMembershipUpdateWithoutOrganizationInput, OrganizationMembershipUncheckedUpdateWithoutOrganizationInput>
    create: XOR<OrganizationMembershipCreateWithoutOrganizationInput, OrganizationMembershipUncheckedCreateWithoutOrganizationInput>
  }

  export type OrganizationMembershipUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: OrganizationMembershipWhereUniqueInput
    data: XOR<OrganizationMembershipUpdateWithoutOrganizationInput, OrganizationMembershipUncheckedUpdateWithoutOrganizationInput>
  }

  export type OrganizationMembershipUpdateManyWithWhereWithoutOrganizationInput = {
    where: OrganizationMembershipScalarWhereInput
    data: XOR<OrganizationMembershipUpdateManyMutationInput, OrganizationMembershipUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type ClientUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: ClientWhereUniqueInput
    update: XOR<ClientUpdateWithoutOrganizationInput, ClientUncheckedUpdateWithoutOrganizationInput>
    create: XOR<ClientCreateWithoutOrganizationInput, ClientUncheckedCreateWithoutOrganizationInput>
  }

  export type ClientUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: ClientWhereUniqueInput
    data: XOR<ClientUpdateWithoutOrganizationInput, ClientUncheckedUpdateWithoutOrganizationInput>
  }

  export type ClientUpdateManyWithWhereWithoutOrganizationInput = {
    where: ClientScalarWhereInput
    data: XOR<ClientUpdateManyMutationInput, ClientUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type PipelineUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: PipelineWhereUniqueInput
    update: XOR<PipelineUpdateWithoutOrganizationInput, PipelineUncheckedUpdateWithoutOrganizationInput>
    create: XOR<PipelineCreateWithoutOrganizationInput, PipelineUncheckedCreateWithoutOrganizationInput>
  }

  export type PipelineUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: PipelineWhereUniqueInput
    data: XOR<PipelineUpdateWithoutOrganizationInput, PipelineUncheckedUpdateWithoutOrganizationInput>
  }

  export type PipelineUpdateManyWithWhereWithoutOrganizationInput = {
    where: PipelineScalarWhereInput
    data: XOR<PipelineUpdateManyMutationInput, PipelineUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type PipelineScalarWhereInput = {
    AND?: PipelineScalarWhereInput | PipelineScalarWhereInput[]
    OR?: PipelineScalarWhereInput[]
    NOT?: PipelineScalarWhereInput | PipelineScalarWhereInput[]
    id?: StringFilter<"Pipeline"> | string
    organizationId?: StringFilter<"Pipeline"> | string
    name?: StringFilter<"Pipeline"> | string
    createdAt?: DateTimeFilter<"Pipeline"> | Date | string
  }

  export type InvoiceUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: InvoiceWhereUniqueInput
    update: XOR<InvoiceUpdateWithoutOrganizationInput, InvoiceUncheckedUpdateWithoutOrganizationInput>
    create: XOR<InvoiceCreateWithoutOrganizationInput, InvoiceUncheckedCreateWithoutOrganizationInput>
  }

  export type InvoiceUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: InvoiceWhereUniqueInput
    data: XOR<InvoiceUpdateWithoutOrganizationInput, InvoiceUncheckedUpdateWithoutOrganizationInput>
  }

  export type InvoiceUpdateManyWithWhereWithoutOrganizationInput = {
    where: InvoiceScalarWhereInput
    data: XOR<InvoiceUpdateManyMutationInput, InvoiceUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type InvoiceScalarWhereInput = {
    AND?: InvoiceScalarWhereInput | InvoiceScalarWhereInput[]
    OR?: InvoiceScalarWhereInput[]
    NOT?: InvoiceScalarWhereInput | InvoiceScalarWhereInput[]
    id?: StringFilter<"Invoice"> | string
    organizationId?: StringFilter<"Invoice"> | string
    clientId?: StringFilter<"Invoice"> | string
    amountUsd?: IntFilter<"Invoice"> | number
    status?: EnumInvoiceStatusFilter<"Invoice"> | $Enums.InvoiceStatus
    dueDate?: DateTimeFilter<"Invoice"> | Date | string
    createdAt?: DateTimeFilter<"Invoice"> | Date | string
  }

  export type MindMapUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: MindMapWhereUniqueInput
    update: XOR<MindMapUpdateWithoutOrganizationInput, MindMapUncheckedUpdateWithoutOrganizationInput>
    create: XOR<MindMapCreateWithoutOrganizationInput, MindMapUncheckedCreateWithoutOrganizationInput>
  }

  export type MindMapUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: MindMapWhereUniqueInput
    data: XOR<MindMapUpdateWithoutOrganizationInput, MindMapUncheckedUpdateWithoutOrganizationInput>
  }

  export type MindMapUpdateManyWithWhereWithoutOrganizationInput = {
    where: MindMapScalarWhereInput
    data: XOR<MindMapUpdateManyMutationInput, MindMapUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type AffiliateLinkUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: AffiliateLinkWhereUniqueInput
    update: XOR<AffiliateLinkUpdateWithoutOrganizationInput, AffiliateLinkUncheckedUpdateWithoutOrganizationInput>
    create: XOR<AffiliateLinkCreateWithoutOrganizationInput, AffiliateLinkUncheckedCreateWithoutOrganizationInput>
  }

  export type AffiliateLinkUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: AffiliateLinkWhereUniqueInput
    data: XOR<AffiliateLinkUpdateWithoutOrganizationInput, AffiliateLinkUncheckedUpdateWithoutOrganizationInput>
  }

  export type AffiliateLinkUpdateManyWithWhereWithoutOrganizationInput = {
    where: AffiliateLinkScalarWhereInput
    data: XOR<AffiliateLinkUpdateManyMutationInput, AffiliateLinkUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type PipelineCardUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: PipelineCardWhereUniqueInput
    update: XOR<PipelineCardUpdateWithoutOrganizationInput, PipelineCardUncheckedUpdateWithoutOrganizationInput>
    create: XOR<PipelineCardCreateWithoutOrganizationInput, PipelineCardUncheckedCreateWithoutOrganizationInput>
  }

  export type PipelineCardUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: PipelineCardWhereUniqueInput
    data: XOR<PipelineCardUpdateWithoutOrganizationInput, PipelineCardUncheckedUpdateWithoutOrganizationInput>
  }

  export type PipelineCardUpdateManyWithWhereWithoutOrganizationInput = {
    where: PipelineCardScalarWhereInput
    data: XOR<PipelineCardUpdateManyMutationInput, PipelineCardUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type PipelineCardScalarWhereInput = {
    AND?: PipelineCardScalarWhereInput | PipelineCardScalarWhereInput[]
    OR?: PipelineCardScalarWhereInput[]
    NOT?: PipelineCardScalarWhereInput | PipelineCardScalarWhereInput[]
    id?: StringFilter<"PipelineCard"> | string
    organizationId?: StringFilter<"PipelineCard"> | string
    pipelineId?: StringFilter<"PipelineCard"> | string
    stageId?: StringFilter<"PipelineCard"> | string
    clientId?: StringFilter<"PipelineCard"> | string
    title?: StringFilter<"PipelineCard"> | string
    value?: FloatNullableFilter<"PipelineCard"> | number | null
    metadata?: JsonNullableFilter<"PipelineCard">
    createdAt?: DateTimeFilter<"PipelineCard"> | Date | string
    updatedAt?: DateTimeFilter<"PipelineCard"> | Date | string
  }

  export type TransactionUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: TransactionWhereUniqueInput
    update: XOR<TransactionUpdateWithoutOrganizationInput, TransactionUncheckedUpdateWithoutOrganizationInput>
    create: XOR<TransactionCreateWithoutOrganizationInput, TransactionUncheckedCreateWithoutOrganizationInput>
  }

  export type TransactionUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: TransactionWhereUniqueInput
    data: XOR<TransactionUpdateWithoutOrganizationInput, TransactionUncheckedUpdateWithoutOrganizationInput>
  }

  export type TransactionUpdateManyWithWhereWithoutOrganizationInput = {
    where: TransactionScalarWhereInput
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type TransactionScalarWhereInput = {
    AND?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
    OR?: TransactionScalarWhereInput[]
    NOT?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
    id?: StringFilter<"Transaction"> | string
    invoiceId?: StringFilter<"Transaction"> | string
    organizationId?: StringNullableFilter<"Transaction"> | string | null
    amount?: FloatFilter<"Transaction"> | number
    currency?: StringFilter<"Transaction"> | string
    gateway?: StringFilter<"Transaction"> | string
    gatewayPayload?: JsonNullableFilter<"Transaction">
    createdAt?: DateTimeFilter<"Transaction"> | Date | string
  }

  export type SubscriptionUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: SubscriptionWhereUniqueInput
    update: XOR<SubscriptionUpdateWithoutOrganizationInput, SubscriptionUncheckedUpdateWithoutOrganizationInput>
    create: XOR<SubscriptionCreateWithoutOrganizationInput, SubscriptionUncheckedCreateWithoutOrganizationInput>
  }

  export type SubscriptionUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: SubscriptionWhereUniqueInput
    data: XOR<SubscriptionUpdateWithoutOrganizationInput, SubscriptionUncheckedUpdateWithoutOrganizationInput>
  }

  export type SubscriptionUpdateManyWithWhereWithoutOrganizationInput = {
    where: SubscriptionScalarWhereInput
    data: XOR<SubscriptionUpdateManyMutationInput, SubscriptionUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type SubscriptionScalarWhereInput = {
    AND?: SubscriptionScalarWhereInput | SubscriptionScalarWhereInput[]
    OR?: SubscriptionScalarWhereInput[]
    NOT?: SubscriptionScalarWhereInput | SubscriptionScalarWhereInput[]
    id?: StringFilter<"Subscription"> | string
    organizationId?: StringFilter<"Subscription"> | string
    clientId?: StringNullableFilter<"Subscription"> | string | null
    status?: StringFilter<"Subscription"> | string
    priceId?: StringNullableFilter<"Subscription"> | string | null
    subscriptionId?: StringNullableFilter<"Subscription"> | string | null
    currentPeriodEnd?: DateTimeNullableFilter<"Subscription"> | Date | string | null
    createdAt?: DateTimeFilter<"Subscription"> | Date | string
    updatedAt?: DateTimeFilter<"Subscription"> | Date | string
  }

  export type EmailSequenceUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: EmailSequenceWhereUniqueInput
    update: XOR<EmailSequenceUpdateWithoutOrganizationInput, EmailSequenceUncheckedUpdateWithoutOrganizationInput>
    create: XOR<EmailSequenceCreateWithoutOrganizationInput, EmailSequenceUncheckedCreateWithoutOrganizationInput>
  }

  export type EmailSequenceUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: EmailSequenceWhereUniqueInput
    data: XOR<EmailSequenceUpdateWithoutOrganizationInput, EmailSequenceUncheckedUpdateWithoutOrganizationInput>
  }

  export type EmailSequenceUpdateManyWithWhereWithoutOrganizationInput = {
    where: EmailSequenceScalarWhereInput
    data: XOR<EmailSequenceUpdateManyMutationInput, EmailSequenceUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type EmailSequenceScalarWhereInput = {
    AND?: EmailSequenceScalarWhereInput | EmailSequenceScalarWhereInput[]
    OR?: EmailSequenceScalarWhereInput[]
    NOT?: EmailSequenceScalarWhereInput | EmailSequenceScalarWhereInput[]
    id?: StringFilter<"EmailSequence"> | string
    organizationId?: StringFilter<"EmailSequence"> | string
    name?: StringFilter<"EmailSequence"> | string
    sent?: IntFilter<"EmailSequence"> | number
    opens?: IntFilter<"EmailSequence"> | number
    clicks?: IntFilter<"EmailSequence"> | number
    createdAt?: DateTimeFilter<"EmailSequence"> | Date | string
    updatedAt?: DateTimeFilter<"EmailSequence"> | Date | string
  }

  export type EmailTemplateUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: EmailTemplateWhereUniqueInput
    update: XOR<EmailTemplateUpdateWithoutOrganizationInput, EmailTemplateUncheckedUpdateWithoutOrganizationInput>
    create: XOR<EmailTemplateCreateWithoutOrganizationInput, EmailTemplateUncheckedCreateWithoutOrganizationInput>
  }

  export type EmailTemplateUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: EmailTemplateWhereUniqueInput
    data: XOR<EmailTemplateUpdateWithoutOrganizationInput, EmailTemplateUncheckedUpdateWithoutOrganizationInput>
  }

  export type EmailTemplateUpdateManyWithWhereWithoutOrganizationInput = {
    where: EmailTemplateScalarWhereInput
    data: XOR<EmailTemplateUpdateManyMutationInput, EmailTemplateUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type EmailTemplateScalarWhereInput = {
    AND?: EmailTemplateScalarWhereInput | EmailTemplateScalarWhereInput[]
    OR?: EmailTemplateScalarWhereInput[]
    NOT?: EmailTemplateScalarWhereInput | EmailTemplateScalarWhereInput[]
    id?: StringFilter<"EmailTemplate"> | string
    organizationId?: StringFilter<"EmailTemplate"> | string
    name?: StringFilter<"EmailTemplate"> | string
    subject?: StringFilter<"EmailTemplate"> | string
    html?: StringFilter<"EmailTemplate"> | string
    createdAt?: DateTimeFilter<"EmailTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"EmailTemplate"> | Date | string
  }

  export type CalendarEventUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: CalendarEventWhereUniqueInput
    update: XOR<CalendarEventUpdateWithoutOrganizationInput, CalendarEventUncheckedUpdateWithoutOrganizationInput>
    create: XOR<CalendarEventCreateWithoutOrganizationInput, CalendarEventUncheckedCreateWithoutOrganizationInput>
  }

  export type CalendarEventUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: CalendarEventWhereUniqueInput
    data: XOR<CalendarEventUpdateWithoutOrganizationInput, CalendarEventUncheckedUpdateWithoutOrganizationInput>
  }

  export type CalendarEventUpdateManyWithWhereWithoutOrganizationInput = {
    where: CalendarEventScalarWhereInput
    data: XOR<CalendarEventUpdateManyMutationInput, CalendarEventUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type OrganizationCreateWithoutMembershipsInput = {
    id?: string
    name: string
    subdomain?: string | null
    billingPlan?: string | null
    createdAt?: Date | string
    clients?: ClientCreateNestedManyWithoutOrganizationInput
    pipelines?: PipelineCreateNestedManyWithoutOrganizationInput
    invoices?: InvoiceCreateNestedManyWithoutOrganizationInput
    mindmaps?: MindMapCreateNestedManyWithoutOrganizationInput
    affiliateLinks?: AffiliateLinkCreateNestedManyWithoutOrganizationInput
    pipelineCards?: PipelineCardCreateNestedManyWithoutOrganizationInput
    transactions?: TransactionCreateNestedManyWithoutOrganizationInput
    subscriptions?: SubscriptionCreateNestedManyWithoutOrganizationInput
    emailSequences?: EmailSequenceCreateNestedManyWithoutOrganizationInput
    emailTemplates?: EmailTemplateCreateNestedManyWithoutOrganizationInput
    calendarEvents?: CalendarEventCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutMembershipsInput = {
    id?: string
    name: string
    subdomain?: string | null
    billingPlan?: string | null
    createdAt?: Date | string
    clients?: ClientUncheckedCreateNestedManyWithoutOrganizationInput
    pipelines?: PipelineUncheckedCreateNestedManyWithoutOrganizationInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutOrganizationInput
    mindmaps?: MindMapUncheckedCreateNestedManyWithoutOrganizationInput
    affiliateLinks?: AffiliateLinkUncheckedCreateNestedManyWithoutOrganizationInput
    pipelineCards?: PipelineCardUncheckedCreateNestedManyWithoutOrganizationInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutOrganizationInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutOrganizationInput
    emailSequences?: EmailSequenceUncheckedCreateNestedManyWithoutOrganizationInput
    emailTemplates?: EmailTemplateUncheckedCreateNestedManyWithoutOrganizationInput
    calendarEvents?: CalendarEventUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutMembershipsInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutMembershipsInput, OrganizationUncheckedCreateWithoutMembershipsInput>
  }

  export type UserCreateWithoutMembershipsInput = {
    id?: string
    name?: string | null
    email: string
    password?: string | null
    image?: string | null
    emailVerified?: Date | string | null
    role?: $Enums.UserRole
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    assignedClients?: ClientCreateNestedManyWithoutAssignedUsersInput
    mindmaps?: MindMapCreateNestedManyWithoutOwnerUserInput
    affiliateLinks?: AffiliateLinkCreateNestedManyWithoutUserInput
    calendarEvents?: CalendarEventCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutMembershipsInput = {
    id?: string
    name?: string | null
    email: string
    password?: string | null
    image?: string | null
    emailVerified?: Date | string | null
    role?: $Enums.UserRole
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    assignedClients?: ClientUncheckedCreateNestedManyWithoutAssignedUsersInput
    mindmaps?: MindMapUncheckedCreateNestedManyWithoutOwnerUserInput
    affiliateLinks?: AffiliateLinkUncheckedCreateNestedManyWithoutUserInput
    calendarEvents?: CalendarEventUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutMembershipsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMembershipsInput, UserUncheckedCreateWithoutMembershipsInput>
  }

  export type ClientCreateWithoutAssignedToInput = {
    id?: string
    name: string
    email: string
    phone?: string | null
    company?: string | null
    stage?: $Enums.PipelineStage
    valueUsd?: number
    isPaid?: boolean
    isOnboarded?: boolean
    competitors?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    assignedUsers?: UserCreateNestedManyWithoutAssignedClientsInput
    organization: OrganizationCreateNestedOneWithoutClientsInput
    interactions?: InteractionCreateNestedManyWithoutClientInput
    invoices?: InvoiceCreateNestedManyWithoutClientInput
    sequences?: SequenceTargetCreateNestedManyWithoutClientInput
    pipelineCards?: PipelineCardCreateNestedManyWithoutClientInput
    campaigns?: CampaignCreateNestedManyWithoutClientInput
    EmailEvent?: EmailEventCreateNestedManyWithoutClientInput
    Subscription?: SubscriptionCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateWithoutAssignedToInput = {
    id?: string
    organizationId: string
    name: string
    email: string
    phone?: string | null
    company?: string | null
    stage?: $Enums.PipelineStage
    valueUsd?: number
    isPaid?: boolean
    isOnboarded?: boolean
    competitors?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    assignedUsers?: UserUncheckedCreateNestedManyWithoutAssignedClientsInput
    interactions?: InteractionUncheckedCreateNestedManyWithoutClientInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutClientInput
    sequences?: SequenceTargetUncheckedCreateNestedManyWithoutClientInput
    pipelineCards?: PipelineCardUncheckedCreateNestedManyWithoutClientInput
    campaigns?: CampaignUncheckedCreateNestedManyWithoutClientInput
    EmailEvent?: EmailEventUncheckedCreateNestedManyWithoutClientInput
    Subscription?: SubscriptionUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientCreateOrConnectWithoutAssignedToInput = {
    where: ClientWhereUniqueInput
    create: XOR<ClientCreateWithoutAssignedToInput, ClientUncheckedCreateWithoutAssignedToInput>
  }

  export type ClientCreateManyAssignedToInputEnvelope = {
    data: ClientCreateManyAssignedToInput | ClientCreateManyAssignedToInput[]
    skipDuplicates?: boolean
  }

  export type OrganizationUpsertWithoutMembershipsInput = {
    update: XOR<OrganizationUpdateWithoutMembershipsInput, OrganizationUncheckedUpdateWithoutMembershipsInput>
    create: XOR<OrganizationCreateWithoutMembershipsInput, OrganizationUncheckedCreateWithoutMembershipsInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutMembershipsInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutMembershipsInput, OrganizationUncheckedUpdateWithoutMembershipsInput>
  }

  export type OrganizationUpdateWithoutMembershipsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: NullableStringFieldUpdateOperationsInput | string | null
    billingPlan?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clients?: ClientUpdateManyWithoutOrganizationNestedInput
    pipelines?: PipelineUpdateManyWithoutOrganizationNestedInput
    invoices?: InvoiceUpdateManyWithoutOrganizationNestedInput
    mindmaps?: MindMapUpdateManyWithoutOrganizationNestedInput
    affiliateLinks?: AffiliateLinkUpdateManyWithoutOrganizationNestedInput
    pipelineCards?: PipelineCardUpdateManyWithoutOrganizationNestedInput
    transactions?: TransactionUpdateManyWithoutOrganizationNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutOrganizationNestedInput
    emailSequences?: EmailSequenceUpdateManyWithoutOrganizationNestedInput
    emailTemplates?: EmailTemplateUpdateManyWithoutOrganizationNestedInput
    calendarEvents?: CalendarEventUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutMembershipsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: NullableStringFieldUpdateOperationsInput | string | null
    billingPlan?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clients?: ClientUncheckedUpdateManyWithoutOrganizationNestedInput
    pipelines?: PipelineUncheckedUpdateManyWithoutOrganizationNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutOrganizationNestedInput
    mindmaps?: MindMapUncheckedUpdateManyWithoutOrganizationNestedInput
    affiliateLinks?: AffiliateLinkUncheckedUpdateManyWithoutOrganizationNestedInput
    pipelineCards?: PipelineCardUncheckedUpdateManyWithoutOrganizationNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutOrganizationNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutOrganizationNestedInput
    emailSequences?: EmailSequenceUncheckedUpdateManyWithoutOrganizationNestedInput
    emailTemplates?: EmailTemplateUncheckedUpdateManyWithoutOrganizationNestedInput
    calendarEvents?: CalendarEventUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type UserUpsertWithoutMembershipsInput = {
    update: XOR<UserUpdateWithoutMembershipsInput, UserUncheckedUpdateWithoutMembershipsInput>
    create: XOR<UserCreateWithoutMembershipsInput, UserUncheckedCreateWithoutMembershipsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMembershipsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMembershipsInput, UserUncheckedUpdateWithoutMembershipsInput>
  }

  export type UserUpdateWithoutMembershipsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    assignedClients?: ClientUpdateManyWithoutAssignedUsersNestedInput
    mindmaps?: MindMapUpdateManyWithoutOwnerUserNestedInput
    affiliateLinks?: AffiliateLinkUpdateManyWithoutUserNestedInput
    calendarEvents?: CalendarEventUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutMembershipsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    assignedClients?: ClientUncheckedUpdateManyWithoutAssignedUsersNestedInput
    mindmaps?: MindMapUncheckedUpdateManyWithoutOwnerUserNestedInput
    affiliateLinks?: AffiliateLinkUncheckedUpdateManyWithoutUserNestedInput
    calendarEvents?: CalendarEventUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type ClientUpsertWithWhereUniqueWithoutAssignedToInput = {
    where: ClientWhereUniqueInput
    update: XOR<ClientUpdateWithoutAssignedToInput, ClientUncheckedUpdateWithoutAssignedToInput>
    create: XOR<ClientCreateWithoutAssignedToInput, ClientUncheckedCreateWithoutAssignedToInput>
  }

  export type ClientUpdateWithWhereUniqueWithoutAssignedToInput = {
    where: ClientWhereUniqueInput
    data: XOR<ClientUpdateWithoutAssignedToInput, ClientUncheckedUpdateWithoutAssignedToInput>
  }

  export type ClientUpdateManyWithWhereWithoutAssignedToInput = {
    where: ClientScalarWhereInput
    data: XOR<ClientUpdateManyMutationInput, ClientUncheckedUpdateManyWithoutAssignedToInput>
  }

  export type OrganizationMembershipCreateWithoutClientInput = {
    id?: string
    role?: $Enums.OrgRole
    organization: OrganizationCreateNestedOneWithoutMembershipsInput
    user: UserCreateNestedOneWithoutMembershipsInput
  }

  export type OrganizationMembershipUncheckedCreateWithoutClientInput = {
    id?: string
    organizationId: string
    userId: string
    role?: $Enums.OrgRole
  }

  export type OrganizationMembershipCreateOrConnectWithoutClientInput = {
    where: OrganizationMembershipWhereUniqueInput
    create: XOR<OrganizationMembershipCreateWithoutClientInput, OrganizationMembershipUncheckedCreateWithoutClientInput>
  }

  export type UserCreateWithoutAssignedClientsInput = {
    id?: string
    name?: string | null
    email: string
    password?: string | null
    image?: string | null
    emailVerified?: Date | string | null
    role?: $Enums.UserRole
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    memberships?: OrganizationMembershipCreateNestedManyWithoutUserInput
    mindmaps?: MindMapCreateNestedManyWithoutOwnerUserInput
    affiliateLinks?: AffiliateLinkCreateNestedManyWithoutUserInput
    calendarEvents?: CalendarEventCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutAssignedClientsInput = {
    id?: string
    name?: string | null
    email: string
    password?: string | null
    image?: string | null
    emailVerified?: Date | string | null
    role?: $Enums.UserRole
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    memberships?: OrganizationMembershipUncheckedCreateNestedManyWithoutUserInput
    mindmaps?: MindMapUncheckedCreateNestedManyWithoutOwnerUserInput
    affiliateLinks?: AffiliateLinkUncheckedCreateNestedManyWithoutUserInput
    calendarEvents?: CalendarEventUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutAssignedClientsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAssignedClientsInput, UserUncheckedCreateWithoutAssignedClientsInput>
  }

  export type OrganizationCreateWithoutClientsInput = {
    id?: string
    name: string
    subdomain?: string | null
    billingPlan?: string | null
    createdAt?: Date | string
    memberships?: OrganizationMembershipCreateNestedManyWithoutOrganizationInput
    pipelines?: PipelineCreateNestedManyWithoutOrganizationInput
    invoices?: InvoiceCreateNestedManyWithoutOrganizationInput
    mindmaps?: MindMapCreateNestedManyWithoutOrganizationInput
    affiliateLinks?: AffiliateLinkCreateNestedManyWithoutOrganizationInput
    pipelineCards?: PipelineCardCreateNestedManyWithoutOrganizationInput
    transactions?: TransactionCreateNestedManyWithoutOrganizationInput
    subscriptions?: SubscriptionCreateNestedManyWithoutOrganizationInput
    emailSequences?: EmailSequenceCreateNestedManyWithoutOrganizationInput
    emailTemplates?: EmailTemplateCreateNestedManyWithoutOrganizationInput
    calendarEvents?: CalendarEventCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutClientsInput = {
    id?: string
    name: string
    subdomain?: string | null
    billingPlan?: string | null
    createdAt?: Date | string
    memberships?: OrganizationMembershipUncheckedCreateNestedManyWithoutOrganizationInput
    pipelines?: PipelineUncheckedCreateNestedManyWithoutOrganizationInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutOrganizationInput
    mindmaps?: MindMapUncheckedCreateNestedManyWithoutOrganizationInput
    affiliateLinks?: AffiliateLinkUncheckedCreateNestedManyWithoutOrganizationInput
    pipelineCards?: PipelineCardUncheckedCreateNestedManyWithoutOrganizationInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutOrganizationInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutOrganizationInput
    emailSequences?: EmailSequenceUncheckedCreateNestedManyWithoutOrganizationInput
    emailTemplates?: EmailTemplateUncheckedCreateNestedManyWithoutOrganizationInput
    calendarEvents?: CalendarEventUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutClientsInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutClientsInput, OrganizationUncheckedCreateWithoutClientsInput>
  }

  export type InteractionCreateWithoutClientInput = {
    id?: string
    date?: Date | string
    type: $Enums.InteractionType
    summary: string
  }

  export type InteractionUncheckedCreateWithoutClientInput = {
    id?: string
    date?: Date | string
    type: $Enums.InteractionType
    summary: string
  }

  export type InteractionCreateOrConnectWithoutClientInput = {
    where: InteractionWhereUniqueInput
    create: XOR<InteractionCreateWithoutClientInput, InteractionUncheckedCreateWithoutClientInput>
  }

  export type InteractionCreateManyClientInputEnvelope = {
    data: InteractionCreateManyClientInput | InteractionCreateManyClientInput[]
    skipDuplicates?: boolean
  }

  export type InvoiceCreateWithoutClientInput = {
    id?: string
    amountUsd: number
    status?: $Enums.InvoiceStatus
    dueDate: Date | string
    createdAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutInvoicesInput
    transactions?: TransactionCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceUncheckedCreateWithoutClientInput = {
    id?: string
    organizationId: string
    amountUsd: number
    status?: $Enums.InvoiceStatus
    dueDate: Date | string
    createdAt?: Date | string
    transactions?: TransactionUncheckedCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceCreateOrConnectWithoutClientInput = {
    where: InvoiceWhereUniqueInput
    create: XOR<InvoiceCreateWithoutClientInput, InvoiceUncheckedCreateWithoutClientInput>
  }

  export type InvoiceCreateManyClientInputEnvelope = {
    data: InvoiceCreateManyClientInput | InvoiceCreateManyClientInput[]
    skipDuplicates?: boolean
  }

  export type SequenceTargetCreateWithoutClientInput = {
    sequence: EmailSequenceCreateNestedOneWithoutTargetsInput
  }

  export type SequenceTargetUncheckedCreateWithoutClientInput = {
    sequenceId: string
  }

  export type SequenceTargetCreateOrConnectWithoutClientInput = {
    where: SequenceTargetWhereUniqueInput
    create: XOR<SequenceTargetCreateWithoutClientInput, SequenceTargetUncheckedCreateWithoutClientInput>
  }

  export type SequenceTargetCreateManyClientInputEnvelope = {
    data: SequenceTargetCreateManyClientInput | SequenceTargetCreateManyClientInput[]
    skipDuplicates?: boolean
  }

  export type PipelineCardCreateWithoutClientInput = {
    id?: string
    title: string
    value?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutPipelineCardsInput
    pipeline: PipelineCreateNestedOneWithoutPipelineCardsInput
    stage: PipelineStageModelCreateNestedOneWithoutCardsInput
  }

  export type PipelineCardUncheckedCreateWithoutClientInput = {
    id?: string
    organizationId: string
    pipelineId: string
    stageId: string
    title: string
    value?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PipelineCardCreateOrConnectWithoutClientInput = {
    where: PipelineCardWhereUniqueInput
    create: XOR<PipelineCardCreateWithoutClientInput, PipelineCardUncheckedCreateWithoutClientInput>
  }

  export type PipelineCardCreateManyClientInputEnvelope = {
    data: PipelineCardCreateManyClientInput | PipelineCardCreateManyClientInput[]
    skipDuplicates?: boolean
  }

  export type CampaignCreateWithoutClientInput = {
    id?: string
    name: string
    startDate?: Date | string | null
    endDate?: Date | string | null
    status?: $Enums.CampaignStatus
    metrics?: NullableJsonNullValueInput | InputJsonValue
  }

  export type CampaignUncheckedCreateWithoutClientInput = {
    id?: string
    name: string
    startDate?: Date | string | null
    endDate?: Date | string | null
    status?: $Enums.CampaignStatus
    metrics?: NullableJsonNullValueInput | InputJsonValue
  }

  export type CampaignCreateOrConnectWithoutClientInput = {
    where: CampaignWhereUniqueInput
    create: XOR<CampaignCreateWithoutClientInput, CampaignUncheckedCreateWithoutClientInput>
  }

  export type CampaignCreateManyClientInputEnvelope = {
    data: CampaignCreateManyClientInput | CampaignCreateManyClientInput[]
    skipDuplicates?: boolean
  }

  export type EmailEventCreateWithoutClientInput = {
    id?: string
    type: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    sequence?: EmailSequenceCreateNestedOneWithoutEventsInput
  }

  export type EmailEventUncheckedCreateWithoutClientInput = {
    id?: string
    sequenceId?: string | null
    type: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type EmailEventCreateOrConnectWithoutClientInput = {
    where: EmailEventWhereUniqueInput
    create: XOR<EmailEventCreateWithoutClientInput, EmailEventUncheckedCreateWithoutClientInput>
  }

  export type EmailEventCreateManyClientInputEnvelope = {
    data: EmailEventCreateManyClientInput | EmailEventCreateManyClientInput[]
    skipDuplicates?: boolean
  }

  export type SubscriptionCreateWithoutClientInput = {
    id?: string
    status: string
    priceId?: string | null
    subscriptionId?: string | null
    currentPeriodEnd?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutSubscriptionsInput
  }

  export type SubscriptionUncheckedCreateWithoutClientInput = {
    id?: string
    organizationId: string
    status: string
    priceId?: string | null
    subscriptionId?: string | null
    currentPeriodEnd?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubscriptionCreateOrConnectWithoutClientInput = {
    where: SubscriptionWhereUniqueInput
    create: XOR<SubscriptionCreateWithoutClientInput, SubscriptionUncheckedCreateWithoutClientInput>
  }

  export type SubscriptionCreateManyClientInputEnvelope = {
    data: SubscriptionCreateManyClientInput | SubscriptionCreateManyClientInput[]
    skipDuplicates?: boolean
  }

  export type OrganizationMembershipUpsertWithoutClientInput = {
    update: XOR<OrganizationMembershipUpdateWithoutClientInput, OrganizationMembershipUncheckedUpdateWithoutClientInput>
    create: XOR<OrganizationMembershipCreateWithoutClientInput, OrganizationMembershipUncheckedCreateWithoutClientInput>
    where?: OrganizationMembershipWhereInput
  }

  export type OrganizationMembershipUpdateToOneWithWhereWithoutClientInput = {
    where?: OrganizationMembershipWhereInput
    data: XOR<OrganizationMembershipUpdateWithoutClientInput, OrganizationMembershipUncheckedUpdateWithoutClientInput>
  }

  export type OrganizationMembershipUpdateWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumOrgRoleFieldUpdateOperationsInput | $Enums.OrgRole
    organization?: OrganizationUpdateOneRequiredWithoutMembershipsNestedInput
    user?: UserUpdateOneRequiredWithoutMembershipsNestedInput
  }

  export type OrganizationMembershipUncheckedUpdateWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumOrgRoleFieldUpdateOperationsInput | $Enums.OrgRole
  }

  export type UserUpsertWithWhereUniqueWithoutAssignedClientsInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutAssignedClientsInput, UserUncheckedUpdateWithoutAssignedClientsInput>
    create: XOR<UserCreateWithoutAssignedClientsInput, UserUncheckedCreateWithoutAssignedClientsInput>
  }

  export type UserUpdateWithWhereUniqueWithoutAssignedClientsInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutAssignedClientsInput, UserUncheckedUpdateWithoutAssignedClientsInput>
  }

  export type UserUpdateManyWithWhereWithoutAssignedClientsInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutAssignedClientsInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    email?: StringFilter<"User"> | string
    password?: StringNullableFilter<"User"> | string | null
    image?: StringNullableFilter<"User"> | string | null
    emailVerified?: DateTimeNullableFilter<"User"> | Date | string | null
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    metadata?: JsonNullableFilter<"User">
    createdAt?: DateTimeFilter<"User"> | Date | string
  }

  export type OrganizationUpsertWithoutClientsInput = {
    update: XOR<OrganizationUpdateWithoutClientsInput, OrganizationUncheckedUpdateWithoutClientsInput>
    create: XOR<OrganizationCreateWithoutClientsInput, OrganizationUncheckedCreateWithoutClientsInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutClientsInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutClientsInput, OrganizationUncheckedUpdateWithoutClientsInput>
  }

  export type OrganizationUpdateWithoutClientsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: NullableStringFieldUpdateOperationsInput | string | null
    billingPlan?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    memberships?: OrganizationMembershipUpdateManyWithoutOrganizationNestedInput
    pipelines?: PipelineUpdateManyWithoutOrganizationNestedInput
    invoices?: InvoiceUpdateManyWithoutOrganizationNestedInput
    mindmaps?: MindMapUpdateManyWithoutOrganizationNestedInput
    affiliateLinks?: AffiliateLinkUpdateManyWithoutOrganizationNestedInput
    pipelineCards?: PipelineCardUpdateManyWithoutOrganizationNestedInput
    transactions?: TransactionUpdateManyWithoutOrganizationNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutOrganizationNestedInput
    emailSequences?: EmailSequenceUpdateManyWithoutOrganizationNestedInput
    emailTemplates?: EmailTemplateUpdateManyWithoutOrganizationNestedInput
    calendarEvents?: CalendarEventUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutClientsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: NullableStringFieldUpdateOperationsInput | string | null
    billingPlan?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    memberships?: OrganizationMembershipUncheckedUpdateManyWithoutOrganizationNestedInput
    pipelines?: PipelineUncheckedUpdateManyWithoutOrganizationNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutOrganizationNestedInput
    mindmaps?: MindMapUncheckedUpdateManyWithoutOrganizationNestedInput
    affiliateLinks?: AffiliateLinkUncheckedUpdateManyWithoutOrganizationNestedInput
    pipelineCards?: PipelineCardUncheckedUpdateManyWithoutOrganizationNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutOrganizationNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutOrganizationNestedInput
    emailSequences?: EmailSequenceUncheckedUpdateManyWithoutOrganizationNestedInput
    emailTemplates?: EmailTemplateUncheckedUpdateManyWithoutOrganizationNestedInput
    calendarEvents?: CalendarEventUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type InteractionUpsertWithWhereUniqueWithoutClientInput = {
    where: InteractionWhereUniqueInput
    update: XOR<InteractionUpdateWithoutClientInput, InteractionUncheckedUpdateWithoutClientInput>
    create: XOR<InteractionCreateWithoutClientInput, InteractionUncheckedCreateWithoutClientInput>
  }

  export type InteractionUpdateWithWhereUniqueWithoutClientInput = {
    where: InteractionWhereUniqueInput
    data: XOR<InteractionUpdateWithoutClientInput, InteractionUncheckedUpdateWithoutClientInput>
  }

  export type InteractionUpdateManyWithWhereWithoutClientInput = {
    where: InteractionScalarWhereInput
    data: XOR<InteractionUpdateManyMutationInput, InteractionUncheckedUpdateManyWithoutClientInput>
  }

  export type InteractionScalarWhereInput = {
    AND?: InteractionScalarWhereInput | InteractionScalarWhereInput[]
    OR?: InteractionScalarWhereInput[]
    NOT?: InteractionScalarWhereInput | InteractionScalarWhereInput[]
    id?: StringFilter<"Interaction"> | string
    date?: DateTimeFilter<"Interaction"> | Date | string
    type?: EnumInteractionTypeFilter<"Interaction"> | $Enums.InteractionType
    summary?: StringFilter<"Interaction"> | string
    clientId?: StringFilter<"Interaction"> | string
  }

  export type InvoiceUpsertWithWhereUniqueWithoutClientInput = {
    where: InvoiceWhereUniqueInput
    update: XOR<InvoiceUpdateWithoutClientInput, InvoiceUncheckedUpdateWithoutClientInput>
    create: XOR<InvoiceCreateWithoutClientInput, InvoiceUncheckedCreateWithoutClientInput>
  }

  export type InvoiceUpdateWithWhereUniqueWithoutClientInput = {
    where: InvoiceWhereUniqueInput
    data: XOR<InvoiceUpdateWithoutClientInput, InvoiceUncheckedUpdateWithoutClientInput>
  }

  export type InvoiceUpdateManyWithWhereWithoutClientInput = {
    where: InvoiceScalarWhereInput
    data: XOR<InvoiceUpdateManyMutationInput, InvoiceUncheckedUpdateManyWithoutClientInput>
  }

  export type SequenceTargetUpsertWithWhereUniqueWithoutClientInput = {
    where: SequenceTargetWhereUniqueInput
    update: XOR<SequenceTargetUpdateWithoutClientInput, SequenceTargetUncheckedUpdateWithoutClientInput>
    create: XOR<SequenceTargetCreateWithoutClientInput, SequenceTargetUncheckedCreateWithoutClientInput>
  }

  export type SequenceTargetUpdateWithWhereUniqueWithoutClientInput = {
    where: SequenceTargetWhereUniqueInput
    data: XOR<SequenceTargetUpdateWithoutClientInput, SequenceTargetUncheckedUpdateWithoutClientInput>
  }

  export type SequenceTargetUpdateManyWithWhereWithoutClientInput = {
    where: SequenceTargetScalarWhereInput
    data: XOR<SequenceTargetUpdateManyMutationInput, SequenceTargetUncheckedUpdateManyWithoutClientInput>
  }

  export type SequenceTargetScalarWhereInput = {
    AND?: SequenceTargetScalarWhereInput | SequenceTargetScalarWhereInput[]
    OR?: SequenceTargetScalarWhereInput[]
    NOT?: SequenceTargetScalarWhereInput | SequenceTargetScalarWhereInput[]
    sequenceId?: StringFilter<"SequenceTarget"> | string
    clientId?: StringFilter<"SequenceTarget"> | string
  }

  export type PipelineCardUpsertWithWhereUniqueWithoutClientInput = {
    where: PipelineCardWhereUniqueInput
    update: XOR<PipelineCardUpdateWithoutClientInput, PipelineCardUncheckedUpdateWithoutClientInput>
    create: XOR<PipelineCardCreateWithoutClientInput, PipelineCardUncheckedCreateWithoutClientInput>
  }

  export type PipelineCardUpdateWithWhereUniqueWithoutClientInput = {
    where: PipelineCardWhereUniqueInput
    data: XOR<PipelineCardUpdateWithoutClientInput, PipelineCardUncheckedUpdateWithoutClientInput>
  }

  export type PipelineCardUpdateManyWithWhereWithoutClientInput = {
    where: PipelineCardScalarWhereInput
    data: XOR<PipelineCardUpdateManyMutationInput, PipelineCardUncheckedUpdateManyWithoutClientInput>
  }

  export type CampaignUpsertWithWhereUniqueWithoutClientInput = {
    where: CampaignWhereUniqueInput
    update: XOR<CampaignUpdateWithoutClientInput, CampaignUncheckedUpdateWithoutClientInput>
    create: XOR<CampaignCreateWithoutClientInput, CampaignUncheckedCreateWithoutClientInput>
  }

  export type CampaignUpdateWithWhereUniqueWithoutClientInput = {
    where: CampaignWhereUniqueInput
    data: XOR<CampaignUpdateWithoutClientInput, CampaignUncheckedUpdateWithoutClientInput>
  }

  export type CampaignUpdateManyWithWhereWithoutClientInput = {
    where: CampaignScalarWhereInput
    data: XOR<CampaignUpdateManyMutationInput, CampaignUncheckedUpdateManyWithoutClientInput>
  }

  export type CampaignScalarWhereInput = {
    AND?: CampaignScalarWhereInput | CampaignScalarWhereInput[]
    OR?: CampaignScalarWhereInput[]
    NOT?: CampaignScalarWhereInput | CampaignScalarWhereInput[]
    id?: StringFilter<"Campaign"> | string
    clientId?: StringFilter<"Campaign"> | string
    name?: StringFilter<"Campaign"> | string
    startDate?: DateTimeNullableFilter<"Campaign"> | Date | string | null
    endDate?: DateTimeNullableFilter<"Campaign"> | Date | string | null
    status?: EnumCampaignStatusFilter<"Campaign"> | $Enums.CampaignStatus
    metrics?: JsonNullableFilter<"Campaign">
  }

  export type EmailEventUpsertWithWhereUniqueWithoutClientInput = {
    where: EmailEventWhereUniqueInput
    update: XOR<EmailEventUpdateWithoutClientInput, EmailEventUncheckedUpdateWithoutClientInput>
    create: XOR<EmailEventCreateWithoutClientInput, EmailEventUncheckedCreateWithoutClientInput>
  }

  export type EmailEventUpdateWithWhereUniqueWithoutClientInput = {
    where: EmailEventWhereUniqueInput
    data: XOR<EmailEventUpdateWithoutClientInput, EmailEventUncheckedUpdateWithoutClientInput>
  }

  export type EmailEventUpdateManyWithWhereWithoutClientInput = {
    where: EmailEventScalarWhereInput
    data: XOR<EmailEventUpdateManyMutationInput, EmailEventUncheckedUpdateManyWithoutClientInput>
  }

  export type EmailEventScalarWhereInput = {
    AND?: EmailEventScalarWhereInput | EmailEventScalarWhereInput[]
    OR?: EmailEventScalarWhereInput[]
    NOT?: EmailEventScalarWhereInput | EmailEventScalarWhereInput[]
    id?: StringFilter<"EmailEvent"> | string
    sequenceId?: StringNullableFilter<"EmailEvent"> | string | null
    clientId?: StringNullableFilter<"EmailEvent"> | string | null
    type?: StringFilter<"EmailEvent"> | string
    metadata?: JsonNullableFilter<"EmailEvent">
    createdAt?: DateTimeFilter<"EmailEvent"> | Date | string
  }

  export type SubscriptionUpsertWithWhereUniqueWithoutClientInput = {
    where: SubscriptionWhereUniqueInput
    update: XOR<SubscriptionUpdateWithoutClientInput, SubscriptionUncheckedUpdateWithoutClientInput>
    create: XOR<SubscriptionCreateWithoutClientInput, SubscriptionUncheckedCreateWithoutClientInput>
  }

  export type SubscriptionUpdateWithWhereUniqueWithoutClientInput = {
    where: SubscriptionWhereUniqueInput
    data: XOR<SubscriptionUpdateWithoutClientInput, SubscriptionUncheckedUpdateWithoutClientInput>
  }

  export type SubscriptionUpdateManyWithWhereWithoutClientInput = {
    where: SubscriptionScalarWhereInput
    data: XOR<SubscriptionUpdateManyMutationInput, SubscriptionUncheckedUpdateManyWithoutClientInput>
  }

  export type ClientCreateWithoutInteractionsInput = {
    id?: string
    name: string
    email: string
    phone?: string | null
    company?: string | null
    stage?: $Enums.PipelineStage
    valueUsd?: number
    isPaid?: boolean
    isOnboarded?: boolean
    competitors?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    assignedTo?: OrganizationMembershipCreateNestedOneWithoutClientInput
    assignedUsers?: UserCreateNestedManyWithoutAssignedClientsInput
    organization: OrganizationCreateNestedOneWithoutClientsInput
    invoices?: InvoiceCreateNestedManyWithoutClientInput
    sequences?: SequenceTargetCreateNestedManyWithoutClientInput
    pipelineCards?: PipelineCardCreateNestedManyWithoutClientInput
    campaigns?: CampaignCreateNestedManyWithoutClientInput
    EmailEvent?: EmailEventCreateNestedManyWithoutClientInput
    Subscription?: SubscriptionCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateWithoutInteractionsInput = {
    id?: string
    organizationId: string
    name: string
    email: string
    phone?: string | null
    company?: string | null
    stage?: $Enums.PipelineStage
    valueUsd?: number
    isPaid?: boolean
    isOnboarded?: boolean
    competitors?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    assignedToMembershipId?: string | null
    assignedUsers?: UserUncheckedCreateNestedManyWithoutAssignedClientsInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutClientInput
    sequences?: SequenceTargetUncheckedCreateNestedManyWithoutClientInput
    pipelineCards?: PipelineCardUncheckedCreateNestedManyWithoutClientInput
    campaigns?: CampaignUncheckedCreateNestedManyWithoutClientInput
    EmailEvent?: EmailEventUncheckedCreateNestedManyWithoutClientInput
    Subscription?: SubscriptionUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientCreateOrConnectWithoutInteractionsInput = {
    where: ClientWhereUniqueInput
    create: XOR<ClientCreateWithoutInteractionsInput, ClientUncheckedCreateWithoutInteractionsInput>
  }

  export type ClientUpsertWithoutInteractionsInput = {
    update: XOR<ClientUpdateWithoutInteractionsInput, ClientUncheckedUpdateWithoutInteractionsInput>
    create: XOR<ClientCreateWithoutInteractionsInput, ClientUncheckedCreateWithoutInteractionsInput>
    where?: ClientWhereInput
  }

  export type ClientUpdateToOneWithWhereWithoutInteractionsInput = {
    where?: ClientWhereInput
    data: XOR<ClientUpdateWithoutInteractionsInput, ClientUncheckedUpdateWithoutInteractionsInput>
  }

  export type ClientUpdateWithoutInteractionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    stage?: EnumPipelineStageFieldUpdateOperationsInput | $Enums.PipelineStage
    valueUsd?: IntFieldUpdateOperationsInput | number
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    isOnboarded?: BoolFieldUpdateOperationsInput | boolean
    competitors?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedTo?: OrganizationMembershipUpdateOneWithoutClientNestedInput
    assignedUsers?: UserUpdateManyWithoutAssignedClientsNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutClientsNestedInput
    invoices?: InvoiceUpdateManyWithoutClientNestedInput
    sequences?: SequenceTargetUpdateManyWithoutClientNestedInput
    pipelineCards?: PipelineCardUpdateManyWithoutClientNestedInput
    campaigns?: CampaignUpdateManyWithoutClientNestedInput
    EmailEvent?: EmailEventUpdateManyWithoutClientNestedInput
    Subscription?: SubscriptionUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateWithoutInteractionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    stage?: EnumPipelineStageFieldUpdateOperationsInput | $Enums.PipelineStage
    valueUsd?: IntFieldUpdateOperationsInput | number
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    isOnboarded?: BoolFieldUpdateOperationsInput | boolean
    competitors?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedToMembershipId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedUsers?: UserUncheckedUpdateManyWithoutAssignedClientsNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutClientNestedInput
    sequences?: SequenceTargetUncheckedUpdateManyWithoutClientNestedInput
    pipelineCards?: PipelineCardUncheckedUpdateManyWithoutClientNestedInput
    campaigns?: CampaignUncheckedUpdateManyWithoutClientNestedInput
    EmailEvent?: EmailEventUncheckedUpdateManyWithoutClientNestedInput
    Subscription?: SubscriptionUncheckedUpdateManyWithoutClientNestedInput
  }

  export type OrganizationCreateWithoutPipelinesInput = {
    id?: string
    name: string
    subdomain?: string | null
    billingPlan?: string | null
    createdAt?: Date | string
    memberships?: OrganizationMembershipCreateNestedManyWithoutOrganizationInput
    clients?: ClientCreateNestedManyWithoutOrganizationInput
    invoices?: InvoiceCreateNestedManyWithoutOrganizationInput
    mindmaps?: MindMapCreateNestedManyWithoutOrganizationInput
    affiliateLinks?: AffiliateLinkCreateNestedManyWithoutOrganizationInput
    pipelineCards?: PipelineCardCreateNestedManyWithoutOrganizationInput
    transactions?: TransactionCreateNestedManyWithoutOrganizationInput
    subscriptions?: SubscriptionCreateNestedManyWithoutOrganizationInput
    emailSequences?: EmailSequenceCreateNestedManyWithoutOrganizationInput
    emailTemplates?: EmailTemplateCreateNestedManyWithoutOrganizationInput
    calendarEvents?: CalendarEventCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutPipelinesInput = {
    id?: string
    name: string
    subdomain?: string | null
    billingPlan?: string | null
    createdAt?: Date | string
    memberships?: OrganizationMembershipUncheckedCreateNestedManyWithoutOrganizationInput
    clients?: ClientUncheckedCreateNestedManyWithoutOrganizationInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutOrganizationInput
    mindmaps?: MindMapUncheckedCreateNestedManyWithoutOrganizationInput
    affiliateLinks?: AffiliateLinkUncheckedCreateNestedManyWithoutOrganizationInput
    pipelineCards?: PipelineCardUncheckedCreateNestedManyWithoutOrganizationInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutOrganizationInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutOrganizationInput
    emailSequences?: EmailSequenceUncheckedCreateNestedManyWithoutOrganizationInput
    emailTemplates?: EmailTemplateUncheckedCreateNestedManyWithoutOrganizationInput
    calendarEvents?: CalendarEventUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutPipelinesInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutPipelinesInput, OrganizationUncheckedCreateWithoutPipelinesInput>
  }

  export type PipelineStageModelCreateWithoutPipelineInput = {
    id?: string
    name: string
    position: number
    cards?: PipelineCardCreateNestedManyWithoutStageInput
  }

  export type PipelineStageModelUncheckedCreateWithoutPipelineInput = {
    id?: string
    name: string
    position: number
    cards?: PipelineCardUncheckedCreateNestedManyWithoutStageInput
  }

  export type PipelineStageModelCreateOrConnectWithoutPipelineInput = {
    where: PipelineStageModelWhereUniqueInput
    create: XOR<PipelineStageModelCreateWithoutPipelineInput, PipelineStageModelUncheckedCreateWithoutPipelineInput>
  }

  export type PipelineStageModelCreateManyPipelineInputEnvelope = {
    data: PipelineStageModelCreateManyPipelineInput | PipelineStageModelCreateManyPipelineInput[]
    skipDuplicates?: boolean
  }

  export type PipelineCardCreateWithoutPipelineInput = {
    id?: string
    title: string
    value?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutPipelineCardsInput
    stage: PipelineStageModelCreateNestedOneWithoutCardsInput
    client: ClientCreateNestedOneWithoutPipelineCardsInput
  }

  export type PipelineCardUncheckedCreateWithoutPipelineInput = {
    id?: string
    organizationId: string
    stageId: string
    clientId: string
    title: string
    value?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PipelineCardCreateOrConnectWithoutPipelineInput = {
    where: PipelineCardWhereUniqueInput
    create: XOR<PipelineCardCreateWithoutPipelineInput, PipelineCardUncheckedCreateWithoutPipelineInput>
  }

  export type PipelineCardCreateManyPipelineInputEnvelope = {
    data: PipelineCardCreateManyPipelineInput | PipelineCardCreateManyPipelineInput[]
    skipDuplicates?: boolean
  }

  export type OrganizationUpsertWithoutPipelinesInput = {
    update: XOR<OrganizationUpdateWithoutPipelinesInput, OrganizationUncheckedUpdateWithoutPipelinesInput>
    create: XOR<OrganizationCreateWithoutPipelinesInput, OrganizationUncheckedCreateWithoutPipelinesInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutPipelinesInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutPipelinesInput, OrganizationUncheckedUpdateWithoutPipelinesInput>
  }

  export type OrganizationUpdateWithoutPipelinesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: NullableStringFieldUpdateOperationsInput | string | null
    billingPlan?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    memberships?: OrganizationMembershipUpdateManyWithoutOrganizationNestedInput
    clients?: ClientUpdateManyWithoutOrganizationNestedInput
    invoices?: InvoiceUpdateManyWithoutOrganizationNestedInput
    mindmaps?: MindMapUpdateManyWithoutOrganizationNestedInput
    affiliateLinks?: AffiliateLinkUpdateManyWithoutOrganizationNestedInput
    pipelineCards?: PipelineCardUpdateManyWithoutOrganizationNestedInput
    transactions?: TransactionUpdateManyWithoutOrganizationNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutOrganizationNestedInput
    emailSequences?: EmailSequenceUpdateManyWithoutOrganizationNestedInput
    emailTemplates?: EmailTemplateUpdateManyWithoutOrganizationNestedInput
    calendarEvents?: CalendarEventUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutPipelinesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: NullableStringFieldUpdateOperationsInput | string | null
    billingPlan?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    memberships?: OrganizationMembershipUncheckedUpdateManyWithoutOrganizationNestedInput
    clients?: ClientUncheckedUpdateManyWithoutOrganizationNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutOrganizationNestedInput
    mindmaps?: MindMapUncheckedUpdateManyWithoutOrganizationNestedInput
    affiliateLinks?: AffiliateLinkUncheckedUpdateManyWithoutOrganizationNestedInput
    pipelineCards?: PipelineCardUncheckedUpdateManyWithoutOrganizationNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutOrganizationNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutOrganizationNestedInput
    emailSequences?: EmailSequenceUncheckedUpdateManyWithoutOrganizationNestedInput
    emailTemplates?: EmailTemplateUncheckedUpdateManyWithoutOrganizationNestedInput
    calendarEvents?: CalendarEventUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type PipelineStageModelUpsertWithWhereUniqueWithoutPipelineInput = {
    where: PipelineStageModelWhereUniqueInput
    update: XOR<PipelineStageModelUpdateWithoutPipelineInput, PipelineStageModelUncheckedUpdateWithoutPipelineInput>
    create: XOR<PipelineStageModelCreateWithoutPipelineInput, PipelineStageModelUncheckedCreateWithoutPipelineInput>
  }

  export type PipelineStageModelUpdateWithWhereUniqueWithoutPipelineInput = {
    where: PipelineStageModelWhereUniqueInput
    data: XOR<PipelineStageModelUpdateWithoutPipelineInput, PipelineStageModelUncheckedUpdateWithoutPipelineInput>
  }

  export type PipelineStageModelUpdateManyWithWhereWithoutPipelineInput = {
    where: PipelineStageModelScalarWhereInput
    data: XOR<PipelineStageModelUpdateManyMutationInput, PipelineStageModelUncheckedUpdateManyWithoutPipelineInput>
  }

  export type PipelineStageModelScalarWhereInput = {
    AND?: PipelineStageModelScalarWhereInput | PipelineStageModelScalarWhereInput[]
    OR?: PipelineStageModelScalarWhereInput[]
    NOT?: PipelineStageModelScalarWhereInput | PipelineStageModelScalarWhereInput[]
    id?: StringFilter<"PipelineStageModel"> | string
    pipelineId?: StringFilter<"PipelineStageModel"> | string
    name?: StringFilter<"PipelineStageModel"> | string
    position?: IntFilter<"PipelineStageModel"> | number
  }

  export type PipelineCardUpsertWithWhereUniqueWithoutPipelineInput = {
    where: PipelineCardWhereUniqueInput
    update: XOR<PipelineCardUpdateWithoutPipelineInput, PipelineCardUncheckedUpdateWithoutPipelineInput>
    create: XOR<PipelineCardCreateWithoutPipelineInput, PipelineCardUncheckedCreateWithoutPipelineInput>
  }

  export type PipelineCardUpdateWithWhereUniqueWithoutPipelineInput = {
    where: PipelineCardWhereUniqueInput
    data: XOR<PipelineCardUpdateWithoutPipelineInput, PipelineCardUncheckedUpdateWithoutPipelineInput>
  }

  export type PipelineCardUpdateManyWithWhereWithoutPipelineInput = {
    where: PipelineCardScalarWhereInput
    data: XOR<PipelineCardUpdateManyMutationInput, PipelineCardUncheckedUpdateManyWithoutPipelineInput>
  }

  export type PipelineCreateWithoutStagesInput = {
    id?: string
    name: string
    createdAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutPipelinesInput
    pipelineCards?: PipelineCardCreateNestedManyWithoutPipelineInput
  }

  export type PipelineUncheckedCreateWithoutStagesInput = {
    id?: string
    organizationId: string
    name: string
    createdAt?: Date | string
    pipelineCards?: PipelineCardUncheckedCreateNestedManyWithoutPipelineInput
  }

  export type PipelineCreateOrConnectWithoutStagesInput = {
    where: PipelineWhereUniqueInput
    create: XOR<PipelineCreateWithoutStagesInput, PipelineUncheckedCreateWithoutStagesInput>
  }

  export type PipelineCardCreateWithoutStageInput = {
    id?: string
    title: string
    value?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutPipelineCardsInput
    pipeline: PipelineCreateNestedOneWithoutPipelineCardsInput
    client: ClientCreateNestedOneWithoutPipelineCardsInput
  }

  export type PipelineCardUncheckedCreateWithoutStageInput = {
    id?: string
    organizationId: string
    pipelineId: string
    clientId: string
    title: string
    value?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PipelineCardCreateOrConnectWithoutStageInput = {
    where: PipelineCardWhereUniqueInput
    create: XOR<PipelineCardCreateWithoutStageInput, PipelineCardUncheckedCreateWithoutStageInput>
  }

  export type PipelineCardCreateManyStageInputEnvelope = {
    data: PipelineCardCreateManyStageInput | PipelineCardCreateManyStageInput[]
    skipDuplicates?: boolean
  }

  export type PipelineUpsertWithoutStagesInput = {
    update: XOR<PipelineUpdateWithoutStagesInput, PipelineUncheckedUpdateWithoutStagesInput>
    create: XOR<PipelineCreateWithoutStagesInput, PipelineUncheckedCreateWithoutStagesInput>
    where?: PipelineWhereInput
  }

  export type PipelineUpdateToOneWithWhereWithoutStagesInput = {
    where?: PipelineWhereInput
    data: XOR<PipelineUpdateWithoutStagesInput, PipelineUncheckedUpdateWithoutStagesInput>
  }

  export type PipelineUpdateWithoutStagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutPipelinesNestedInput
    pipelineCards?: PipelineCardUpdateManyWithoutPipelineNestedInput
  }

  export type PipelineUncheckedUpdateWithoutStagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pipelineCards?: PipelineCardUncheckedUpdateManyWithoutPipelineNestedInput
  }

  export type PipelineCardUpsertWithWhereUniqueWithoutStageInput = {
    where: PipelineCardWhereUniqueInput
    update: XOR<PipelineCardUpdateWithoutStageInput, PipelineCardUncheckedUpdateWithoutStageInput>
    create: XOR<PipelineCardCreateWithoutStageInput, PipelineCardUncheckedCreateWithoutStageInput>
  }

  export type PipelineCardUpdateWithWhereUniqueWithoutStageInput = {
    where: PipelineCardWhereUniqueInput
    data: XOR<PipelineCardUpdateWithoutStageInput, PipelineCardUncheckedUpdateWithoutStageInput>
  }

  export type PipelineCardUpdateManyWithWhereWithoutStageInput = {
    where: PipelineCardScalarWhereInput
    data: XOR<PipelineCardUpdateManyMutationInput, PipelineCardUncheckedUpdateManyWithoutStageInput>
  }

  export type OrganizationCreateWithoutPipelineCardsInput = {
    id?: string
    name: string
    subdomain?: string | null
    billingPlan?: string | null
    createdAt?: Date | string
    memberships?: OrganizationMembershipCreateNestedManyWithoutOrganizationInput
    clients?: ClientCreateNestedManyWithoutOrganizationInput
    pipelines?: PipelineCreateNestedManyWithoutOrganizationInput
    invoices?: InvoiceCreateNestedManyWithoutOrganizationInput
    mindmaps?: MindMapCreateNestedManyWithoutOrganizationInput
    affiliateLinks?: AffiliateLinkCreateNestedManyWithoutOrganizationInput
    transactions?: TransactionCreateNestedManyWithoutOrganizationInput
    subscriptions?: SubscriptionCreateNestedManyWithoutOrganizationInput
    emailSequences?: EmailSequenceCreateNestedManyWithoutOrganizationInput
    emailTemplates?: EmailTemplateCreateNestedManyWithoutOrganizationInput
    calendarEvents?: CalendarEventCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutPipelineCardsInput = {
    id?: string
    name: string
    subdomain?: string | null
    billingPlan?: string | null
    createdAt?: Date | string
    memberships?: OrganizationMembershipUncheckedCreateNestedManyWithoutOrganizationInput
    clients?: ClientUncheckedCreateNestedManyWithoutOrganizationInput
    pipelines?: PipelineUncheckedCreateNestedManyWithoutOrganizationInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutOrganizationInput
    mindmaps?: MindMapUncheckedCreateNestedManyWithoutOrganizationInput
    affiliateLinks?: AffiliateLinkUncheckedCreateNestedManyWithoutOrganizationInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutOrganizationInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutOrganizationInput
    emailSequences?: EmailSequenceUncheckedCreateNestedManyWithoutOrganizationInput
    emailTemplates?: EmailTemplateUncheckedCreateNestedManyWithoutOrganizationInput
    calendarEvents?: CalendarEventUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutPipelineCardsInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutPipelineCardsInput, OrganizationUncheckedCreateWithoutPipelineCardsInput>
  }

  export type PipelineCreateWithoutPipelineCardsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutPipelinesInput
    stages?: PipelineStageModelCreateNestedManyWithoutPipelineInput
  }

  export type PipelineUncheckedCreateWithoutPipelineCardsInput = {
    id?: string
    organizationId: string
    name: string
    createdAt?: Date | string
    stages?: PipelineStageModelUncheckedCreateNestedManyWithoutPipelineInput
  }

  export type PipelineCreateOrConnectWithoutPipelineCardsInput = {
    where: PipelineWhereUniqueInput
    create: XOR<PipelineCreateWithoutPipelineCardsInput, PipelineUncheckedCreateWithoutPipelineCardsInput>
  }

  export type PipelineStageModelCreateWithoutCardsInput = {
    id?: string
    name: string
    position: number
    pipeline: PipelineCreateNestedOneWithoutStagesInput
  }

  export type PipelineStageModelUncheckedCreateWithoutCardsInput = {
    id?: string
    pipelineId: string
    name: string
    position: number
  }

  export type PipelineStageModelCreateOrConnectWithoutCardsInput = {
    where: PipelineStageModelWhereUniqueInput
    create: XOR<PipelineStageModelCreateWithoutCardsInput, PipelineStageModelUncheckedCreateWithoutCardsInput>
  }

  export type ClientCreateWithoutPipelineCardsInput = {
    id?: string
    name: string
    email: string
    phone?: string | null
    company?: string | null
    stage?: $Enums.PipelineStage
    valueUsd?: number
    isPaid?: boolean
    isOnboarded?: boolean
    competitors?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    assignedTo?: OrganizationMembershipCreateNestedOneWithoutClientInput
    assignedUsers?: UserCreateNestedManyWithoutAssignedClientsInput
    organization: OrganizationCreateNestedOneWithoutClientsInput
    interactions?: InteractionCreateNestedManyWithoutClientInput
    invoices?: InvoiceCreateNestedManyWithoutClientInput
    sequences?: SequenceTargetCreateNestedManyWithoutClientInput
    campaigns?: CampaignCreateNestedManyWithoutClientInput
    EmailEvent?: EmailEventCreateNestedManyWithoutClientInput
    Subscription?: SubscriptionCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateWithoutPipelineCardsInput = {
    id?: string
    organizationId: string
    name: string
    email: string
    phone?: string | null
    company?: string | null
    stage?: $Enums.PipelineStage
    valueUsd?: number
    isPaid?: boolean
    isOnboarded?: boolean
    competitors?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    assignedToMembershipId?: string | null
    assignedUsers?: UserUncheckedCreateNestedManyWithoutAssignedClientsInput
    interactions?: InteractionUncheckedCreateNestedManyWithoutClientInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutClientInput
    sequences?: SequenceTargetUncheckedCreateNestedManyWithoutClientInput
    campaigns?: CampaignUncheckedCreateNestedManyWithoutClientInput
    EmailEvent?: EmailEventUncheckedCreateNestedManyWithoutClientInput
    Subscription?: SubscriptionUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientCreateOrConnectWithoutPipelineCardsInput = {
    where: ClientWhereUniqueInput
    create: XOR<ClientCreateWithoutPipelineCardsInput, ClientUncheckedCreateWithoutPipelineCardsInput>
  }

  export type OrganizationUpsertWithoutPipelineCardsInput = {
    update: XOR<OrganizationUpdateWithoutPipelineCardsInput, OrganizationUncheckedUpdateWithoutPipelineCardsInput>
    create: XOR<OrganizationCreateWithoutPipelineCardsInput, OrganizationUncheckedCreateWithoutPipelineCardsInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutPipelineCardsInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutPipelineCardsInput, OrganizationUncheckedUpdateWithoutPipelineCardsInput>
  }

  export type OrganizationUpdateWithoutPipelineCardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: NullableStringFieldUpdateOperationsInput | string | null
    billingPlan?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    memberships?: OrganizationMembershipUpdateManyWithoutOrganizationNestedInput
    clients?: ClientUpdateManyWithoutOrganizationNestedInput
    pipelines?: PipelineUpdateManyWithoutOrganizationNestedInput
    invoices?: InvoiceUpdateManyWithoutOrganizationNestedInput
    mindmaps?: MindMapUpdateManyWithoutOrganizationNestedInput
    affiliateLinks?: AffiliateLinkUpdateManyWithoutOrganizationNestedInput
    transactions?: TransactionUpdateManyWithoutOrganizationNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutOrganizationNestedInput
    emailSequences?: EmailSequenceUpdateManyWithoutOrganizationNestedInput
    emailTemplates?: EmailTemplateUpdateManyWithoutOrganizationNestedInput
    calendarEvents?: CalendarEventUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutPipelineCardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: NullableStringFieldUpdateOperationsInput | string | null
    billingPlan?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    memberships?: OrganizationMembershipUncheckedUpdateManyWithoutOrganizationNestedInput
    clients?: ClientUncheckedUpdateManyWithoutOrganizationNestedInput
    pipelines?: PipelineUncheckedUpdateManyWithoutOrganizationNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutOrganizationNestedInput
    mindmaps?: MindMapUncheckedUpdateManyWithoutOrganizationNestedInput
    affiliateLinks?: AffiliateLinkUncheckedUpdateManyWithoutOrganizationNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutOrganizationNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutOrganizationNestedInput
    emailSequences?: EmailSequenceUncheckedUpdateManyWithoutOrganizationNestedInput
    emailTemplates?: EmailTemplateUncheckedUpdateManyWithoutOrganizationNestedInput
    calendarEvents?: CalendarEventUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type PipelineUpsertWithoutPipelineCardsInput = {
    update: XOR<PipelineUpdateWithoutPipelineCardsInput, PipelineUncheckedUpdateWithoutPipelineCardsInput>
    create: XOR<PipelineCreateWithoutPipelineCardsInput, PipelineUncheckedCreateWithoutPipelineCardsInput>
    where?: PipelineWhereInput
  }

  export type PipelineUpdateToOneWithWhereWithoutPipelineCardsInput = {
    where?: PipelineWhereInput
    data: XOR<PipelineUpdateWithoutPipelineCardsInput, PipelineUncheckedUpdateWithoutPipelineCardsInput>
  }

  export type PipelineUpdateWithoutPipelineCardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutPipelinesNestedInput
    stages?: PipelineStageModelUpdateManyWithoutPipelineNestedInput
  }

  export type PipelineUncheckedUpdateWithoutPipelineCardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stages?: PipelineStageModelUncheckedUpdateManyWithoutPipelineNestedInput
  }

  export type PipelineStageModelUpsertWithoutCardsInput = {
    update: XOR<PipelineStageModelUpdateWithoutCardsInput, PipelineStageModelUncheckedUpdateWithoutCardsInput>
    create: XOR<PipelineStageModelCreateWithoutCardsInput, PipelineStageModelUncheckedCreateWithoutCardsInput>
    where?: PipelineStageModelWhereInput
  }

  export type PipelineStageModelUpdateToOneWithWhereWithoutCardsInput = {
    where?: PipelineStageModelWhereInput
    data: XOR<PipelineStageModelUpdateWithoutCardsInput, PipelineStageModelUncheckedUpdateWithoutCardsInput>
  }

  export type PipelineStageModelUpdateWithoutCardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    pipeline?: PipelineUpdateOneRequiredWithoutStagesNestedInput
  }

  export type PipelineStageModelUncheckedUpdateWithoutCardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    pipelineId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
  }

  export type ClientUpsertWithoutPipelineCardsInput = {
    update: XOR<ClientUpdateWithoutPipelineCardsInput, ClientUncheckedUpdateWithoutPipelineCardsInput>
    create: XOR<ClientCreateWithoutPipelineCardsInput, ClientUncheckedCreateWithoutPipelineCardsInput>
    where?: ClientWhereInput
  }

  export type ClientUpdateToOneWithWhereWithoutPipelineCardsInput = {
    where?: ClientWhereInput
    data: XOR<ClientUpdateWithoutPipelineCardsInput, ClientUncheckedUpdateWithoutPipelineCardsInput>
  }

  export type ClientUpdateWithoutPipelineCardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    stage?: EnumPipelineStageFieldUpdateOperationsInput | $Enums.PipelineStage
    valueUsd?: IntFieldUpdateOperationsInput | number
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    isOnboarded?: BoolFieldUpdateOperationsInput | boolean
    competitors?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedTo?: OrganizationMembershipUpdateOneWithoutClientNestedInput
    assignedUsers?: UserUpdateManyWithoutAssignedClientsNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutClientsNestedInput
    interactions?: InteractionUpdateManyWithoutClientNestedInput
    invoices?: InvoiceUpdateManyWithoutClientNestedInput
    sequences?: SequenceTargetUpdateManyWithoutClientNestedInput
    campaigns?: CampaignUpdateManyWithoutClientNestedInput
    EmailEvent?: EmailEventUpdateManyWithoutClientNestedInput
    Subscription?: SubscriptionUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateWithoutPipelineCardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    stage?: EnumPipelineStageFieldUpdateOperationsInput | $Enums.PipelineStage
    valueUsd?: IntFieldUpdateOperationsInput | number
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    isOnboarded?: BoolFieldUpdateOperationsInput | boolean
    competitors?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedToMembershipId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedUsers?: UserUncheckedUpdateManyWithoutAssignedClientsNestedInput
    interactions?: InteractionUncheckedUpdateManyWithoutClientNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutClientNestedInput
    sequences?: SequenceTargetUncheckedUpdateManyWithoutClientNestedInput
    campaigns?: CampaignUncheckedUpdateManyWithoutClientNestedInput
    EmailEvent?: EmailEventUncheckedUpdateManyWithoutClientNestedInput
    Subscription?: SubscriptionUncheckedUpdateManyWithoutClientNestedInput
  }

  export type OrganizationCreateWithoutEmailTemplatesInput = {
    id?: string
    name: string
    subdomain?: string | null
    billingPlan?: string | null
    createdAt?: Date | string
    memberships?: OrganizationMembershipCreateNestedManyWithoutOrganizationInput
    clients?: ClientCreateNestedManyWithoutOrganizationInput
    pipelines?: PipelineCreateNestedManyWithoutOrganizationInput
    invoices?: InvoiceCreateNestedManyWithoutOrganizationInput
    mindmaps?: MindMapCreateNestedManyWithoutOrganizationInput
    affiliateLinks?: AffiliateLinkCreateNestedManyWithoutOrganizationInput
    pipelineCards?: PipelineCardCreateNestedManyWithoutOrganizationInput
    transactions?: TransactionCreateNestedManyWithoutOrganizationInput
    subscriptions?: SubscriptionCreateNestedManyWithoutOrganizationInput
    emailSequences?: EmailSequenceCreateNestedManyWithoutOrganizationInput
    calendarEvents?: CalendarEventCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutEmailTemplatesInput = {
    id?: string
    name: string
    subdomain?: string | null
    billingPlan?: string | null
    createdAt?: Date | string
    memberships?: OrganizationMembershipUncheckedCreateNestedManyWithoutOrganizationInput
    clients?: ClientUncheckedCreateNestedManyWithoutOrganizationInput
    pipelines?: PipelineUncheckedCreateNestedManyWithoutOrganizationInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutOrganizationInput
    mindmaps?: MindMapUncheckedCreateNestedManyWithoutOrganizationInput
    affiliateLinks?: AffiliateLinkUncheckedCreateNestedManyWithoutOrganizationInput
    pipelineCards?: PipelineCardUncheckedCreateNestedManyWithoutOrganizationInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutOrganizationInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutOrganizationInput
    emailSequences?: EmailSequenceUncheckedCreateNestedManyWithoutOrganizationInput
    calendarEvents?: CalendarEventUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutEmailTemplatesInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutEmailTemplatesInput, OrganizationUncheckedCreateWithoutEmailTemplatesInput>
  }

  export type OrganizationUpsertWithoutEmailTemplatesInput = {
    update: XOR<OrganizationUpdateWithoutEmailTemplatesInput, OrganizationUncheckedUpdateWithoutEmailTemplatesInput>
    create: XOR<OrganizationCreateWithoutEmailTemplatesInput, OrganizationUncheckedCreateWithoutEmailTemplatesInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutEmailTemplatesInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutEmailTemplatesInput, OrganizationUncheckedUpdateWithoutEmailTemplatesInput>
  }

  export type OrganizationUpdateWithoutEmailTemplatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: NullableStringFieldUpdateOperationsInput | string | null
    billingPlan?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    memberships?: OrganizationMembershipUpdateManyWithoutOrganizationNestedInput
    clients?: ClientUpdateManyWithoutOrganizationNestedInput
    pipelines?: PipelineUpdateManyWithoutOrganizationNestedInput
    invoices?: InvoiceUpdateManyWithoutOrganizationNestedInput
    mindmaps?: MindMapUpdateManyWithoutOrganizationNestedInput
    affiliateLinks?: AffiliateLinkUpdateManyWithoutOrganizationNestedInput
    pipelineCards?: PipelineCardUpdateManyWithoutOrganizationNestedInput
    transactions?: TransactionUpdateManyWithoutOrganizationNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutOrganizationNestedInput
    emailSequences?: EmailSequenceUpdateManyWithoutOrganizationNestedInput
    calendarEvents?: CalendarEventUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutEmailTemplatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: NullableStringFieldUpdateOperationsInput | string | null
    billingPlan?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    memberships?: OrganizationMembershipUncheckedUpdateManyWithoutOrganizationNestedInput
    clients?: ClientUncheckedUpdateManyWithoutOrganizationNestedInput
    pipelines?: PipelineUncheckedUpdateManyWithoutOrganizationNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutOrganizationNestedInput
    mindmaps?: MindMapUncheckedUpdateManyWithoutOrganizationNestedInput
    affiliateLinks?: AffiliateLinkUncheckedUpdateManyWithoutOrganizationNestedInput
    pipelineCards?: PipelineCardUncheckedUpdateManyWithoutOrganizationNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutOrganizationNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutOrganizationNestedInput
    emailSequences?: EmailSequenceUncheckedUpdateManyWithoutOrganizationNestedInput
    calendarEvents?: CalendarEventUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationCreateWithoutEmailSequencesInput = {
    id?: string
    name: string
    subdomain?: string | null
    billingPlan?: string | null
    createdAt?: Date | string
    memberships?: OrganizationMembershipCreateNestedManyWithoutOrganizationInput
    clients?: ClientCreateNestedManyWithoutOrganizationInput
    pipelines?: PipelineCreateNestedManyWithoutOrganizationInput
    invoices?: InvoiceCreateNestedManyWithoutOrganizationInput
    mindmaps?: MindMapCreateNestedManyWithoutOrganizationInput
    affiliateLinks?: AffiliateLinkCreateNestedManyWithoutOrganizationInput
    pipelineCards?: PipelineCardCreateNestedManyWithoutOrganizationInput
    transactions?: TransactionCreateNestedManyWithoutOrganizationInput
    subscriptions?: SubscriptionCreateNestedManyWithoutOrganizationInput
    emailTemplates?: EmailTemplateCreateNestedManyWithoutOrganizationInput
    calendarEvents?: CalendarEventCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutEmailSequencesInput = {
    id?: string
    name: string
    subdomain?: string | null
    billingPlan?: string | null
    createdAt?: Date | string
    memberships?: OrganizationMembershipUncheckedCreateNestedManyWithoutOrganizationInput
    clients?: ClientUncheckedCreateNestedManyWithoutOrganizationInput
    pipelines?: PipelineUncheckedCreateNestedManyWithoutOrganizationInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutOrganizationInput
    mindmaps?: MindMapUncheckedCreateNestedManyWithoutOrganizationInput
    affiliateLinks?: AffiliateLinkUncheckedCreateNestedManyWithoutOrganizationInput
    pipelineCards?: PipelineCardUncheckedCreateNestedManyWithoutOrganizationInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutOrganizationInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutOrganizationInput
    emailTemplates?: EmailTemplateUncheckedCreateNestedManyWithoutOrganizationInput
    calendarEvents?: CalendarEventUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutEmailSequencesInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutEmailSequencesInput, OrganizationUncheckedCreateWithoutEmailSequencesInput>
  }

  export type EmailStepCreateWithoutSequenceInput = {
    id?: string
    subject: string
    body: string
    delayDays?: number
  }

  export type EmailStepUncheckedCreateWithoutSequenceInput = {
    id?: string
    subject: string
    body: string
    delayDays?: number
  }

  export type EmailStepCreateOrConnectWithoutSequenceInput = {
    where: EmailStepWhereUniqueInput
    create: XOR<EmailStepCreateWithoutSequenceInput, EmailStepUncheckedCreateWithoutSequenceInput>
  }

  export type EmailStepCreateManySequenceInputEnvelope = {
    data: EmailStepCreateManySequenceInput | EmailStepCreateManySequenceInput[]
    skipDuplicates?: boolean
  }

  export type SequenceTargetCreateWithoutSequenceInput = {
    client: ClientCreateNestedOneWithoutSequencesInput
  }

  export type SequenceTargetUncheckedCreateWithoutSequenceInput = {
    clientId: string
  }

  export type SequenceTargetCreateOrConnectWithoutSequenceInput = {
    where: SequenceTargetWhereUniqueInput
    create: XOR<SequenceTargetCreateWithoutSequenceInput, SequenceTargetUncheckedCreateWithoutSequenceInput>
  }

  export type SequenceTargetCreateManySequenceInputEnvelope = {
    data: SequenceTargetCreateManySequenceInput | SequenceTargetCreateManySequenceInput[]
    skipDuplicates?: boolean
  }

  export type EmailEventCreateWithoutSequenceInput = {
    id?: string
    type: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    client?: ClientCreateNestedOneWithoutEmailEventInput
  }

  export type EmailEventUncheckedCreateWithoutSequenceInput = {
    id?: string
    clientId?: string | null
    type: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type EmailEventCreateOrConnectWithoutSequenceInput = {
    where: EmailEventWhereUniqueInput
    create: XOR<EmailEventCreateWithoutSequenceInput, EmailEventUncheckedCreateWithoutSequenceInput>
  }

  export type EmailEventCreateManySequenceInputEnvelope = {
    data: EmailEventCreateManySequenceInput | EmailEventCreateManySequenceInput[]
    skipDuplicates?: boolean
  }

  export type OrganizationUpsertWithoutEmailSequencesInput = {
    update: XOR<OrganizationUpdateWithoutEmailSequencesInput, OrganizationUncheckedUpdateWithoutEmailSequencesInput>
    create: XOR<OrganizationCreateWithoutEmailSequencesInput, OrganizationUncheckedCreateWithoutEmailSequencesInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutEmailSequencesInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutEmailSequencesInput, OrganizationUncheckedUpdateWithoutEmailSequencesInput>
  }

  export type OrganizationUpdateWithoutEmailSequencesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: NullableStringFieldUpdateOperationsInput | string | null
    billingPlan?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    memberships?: OrganizationMembershipUpdateManyWithoutOrganizationNestedInput
    clients?: ClientUpdateManyWithoutOrganizationNestedInput
    pipelines?: PipelineUpdateManyWithoutOrganizationNestedInput
    invoices?: InvoiceUpdateManyWithoutOrganizationNestedInput
    mindmaps?: MindMapUpdateManyWithoutOrganizationNestedInput
    affiliateLinks?: AffiliateLinkUpdateManyWithoutOrganizationNestedInput
    pipelineCards?: PipelineCardUpdateManyWithoutOrganizationNestedInput
    transactions?: TransactionUpdateManyWithoutOrganizationNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutOrganizationNestedInput
    emailTemplates?: EmailTemplateUpdateManyWithoutOrganizationNestedInput
    calendarEvents?: CalendarEventUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutEmailSequencesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: NullableStringFieldUpdateOperationsInput | string | null
    billingPlan?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    memberships?: OrganizationMembershipUncheckedUpdateManyWithoutOrganizationNestedInput
    clients?: ClientUncheckedUpdateManyWithoutOrganizationNestedInput
    pipelines?: PipelineUncheckedUpdateManyWithoutOrganizationNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutOrganizationNestedInput
    mindmaps?: MindMapUncheckedUpdateManyWithoutOrganizationNestedInput
    affiliateLinks?: AffiliateLinkUncheckedUpdateManyWithoutOrganizationNestedInput
    pipelineCards?: PipelineCardUncheckedUpdateManyWithoutOrganizationNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutOrganizationNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutOrganizationNestedInput
    emailTemplates?: EmailTemplateUncheckedUpdateManyWithoutOrganizationNestedInput
    calendarEvents?: CalendarEventUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type EmailStepUpsertWithWhereUniqueWithoutSequenceInput = {
    where: EmailStepWhereUniqueInput
    update: XOR<EmailStepUpdateWithoutSequenceInput, EmailStepUncheckedUpdateWithoutSequenceInput>
    create: XOR<EmailStepCreateWithoutSequenceInput, EmailStepUncheckedCreateWithoutSequenceInput>
  }

  export type EmailStepUpdateWithWhereUniqueWithoutSequenceInput = {
    where: EmailStepWhereUniqueInput
    data: XOR<EmailStepUpdateWithoutSequenceInput, EmailStepUncheckedUpdateWithoutSequenceInput>
  }

  export type EmailStepUpdateManyWithWhereWithoutSequenceInput = {
    where: EmailStepScalarWhereInput
    data: XOR<EmailStepUpdateManyMutationInput, EmailStepUncheckedUpdateManyWithoutSequenceInput>
  }

  export type EmailStepScalarWhereInput = {
    AND?: EmailStepScalarWhereInput | EmailStepScalarWhereInput[]
    OR?: EmailStepScalarWhereInput[]
    NOT?: EmailStepScalarWhereInput | EmailStepScalarWhereInput[]
    id?: StringFilter<"EmailStep"> | string
    subject?: StringFilter<"EmailStep"> | string
    body?: StringFilter<"EmailStep"> | string
    delayDays?: IntFilter<"EmailStep"> | number
    sequenceId?: StringFilter<"EmailStep"> | string
  }

  export type SequenceTargetUpsertWithWhereUniqueWithoutSequenceInput = {
    where: SequenceTargetWhereUniqueInput
    update: XOR<SequenceTargetUpdateWithoutSequenceInput, SequenceTargetUncheckedUpdateWithoutSequenceInput>
    create: XOR<SequenceTargetCreateWithoutSequenceInput, SequenceTargetUncheckedCreateWithoutSequenceInput>
  }

  export type SequenceTargetUpdateWithWhereUniqueWithoutSequenceInput = {
    where: SequenceTargetWhereUniqueInput
    data: XOR<SequenceTargetUpdateWithoutSequenceInput, SequenceTargetUncheckedUpdateWithoutSequenceInput>
  }

  export type SequenceTargetUpdateManyWithWhereWithoutSequenceInput = {
    where: SequenceTargetScalarWhereInput
    data: XOR<SequenceTargetUpdateManyMutationInput, SequenceTargetUncheckedUpdateManyWithoutSequenceInput>
  }

  export type EmailEventUpsertWithWhereUniqueWithoutSequenceInput = {
    where: EmailEventWhereUniqueInput
    update: XOR<EmailEventUpdateWithoutSequenceInput, EmailEventUncheckedUpdateWithoutSequenceInput>
    create: XOR<EmailEventCreateWithoutSequenceInput, EmailEventUncheckedCreateWithoutSequenceInput>
  }

  export type EmailEventUpdateWithWhereUniqueWithoutSequenceInput = {
    where: EmailEventWhereUniqueInput
    data: XOR<EmailEventUpdateWithoutSequenceInput, EmailEventUncheckedUpdateWithoutSequenceInput>
  }

  export type EmailEventUpdateManyWithWhereWithoutSequenceInput = {
    where: EmailEventScalarWhereInput
    data: XOR<EmailEventUpdateManyMutationInput, EmailEventUncheckedUpdateManyWithoutSequenceInput>
  }

  export type EmailSequenceCreateWithoutStepsInput = {
    id?: string
    name: string
    sent?: number
    opens?: number
    clicks?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutEmailSequencesInput
    targets?: SequenceTargetCreateNestedManyWithoutSequenceInput
    events?: EmailEventCreateNestedManyWithoutSequenceInput
  }

  export type EmailSequenceUncheckedCreateWithoutStepsInput = {
    id?: string
    organizationId: string
    name: string
    sent?: number
    opens?: number
    clicks?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    targets?: SequenceTargetUncheckedCreateNestedManyWithoutSequenceInput
    events?: EmailEventUncheckedCreateNestedManyWithoutSequenceInput
  }

  export type EmailSequenceCreateOrConnectWithoutStepsInput = {
    where: EmailSequenceWhereUniqueInput
    create: XOR<EmailSequenceCreateWithoutStepsInput, EmailSequenceUncheckedCreateWithoutStepsInput>
  }

  export type EmailSequenceUpsertWithoutStepsInput = {
    update: XOR<EmailSequenceUpdateWithoutStepsInput, EmailSequenceUncheckedUpdateWithoutStepsInput>
    create: XOR<EmailSequenceCreateWithoutStepsInput, EmailSequenceUncheckedCreateWithoutStepsInput>
    where?: EmailSequenceWhereInput
  }

  export type EmailSequenceUpdateToOneWithWhereWithoutStepsInput = {
    where?: EmailSequenceWhereInput
    data: XOR<EmailSequenceUpdateWithoutStepsInput, EmailSequenceUncheckedUpdateWithoutStepsInput>
  }

  export type EmailSequenceUpdateWithoutStepsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    sent?: IntFieldUpdateOperationsInput | number
    opens?: IntFieldUpdateOperationsInput | number
    clicks?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutEmailSequencesNestedInput
    targets?: SequenceTargetUpdateManyWithoutSequenceNestedInput
    events?: EmailEventUpdateManyWithoutSequenceNestedInput
  }

  export type EmailSequenceUncheckedUpdateWithoutStepsInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    sent?: IntFieldUpdateOperationsInput | number
    opens?: IntFieldUpdateOperationsInput | number
    clicks?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    targets?: SequenceTargetUncheckedUpdateManyWithoutSequenceNestedInput
    events?: EmailEventUncheckedUpdateManyWithoutSequenceNestedInput
  }

  export type EmailSequenceCreateWithoutTargetsInput = {
    id?: string
    name: string
    sent?: number
    opens?: number
    clicks?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutEmailSequencesInput
    steps?: EmailStepCreateNestedManyWithoutSequenceInput
    events?: EmailEventCreateNestedManyWithoutSequenceInput
  }

  export type EmailSequenceUncheckedCreateWithoutTargetsInput = {
    id?: string
    organizationId: string
    name: string
    sent?: number
    opens?: number
    clicks?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    steps?: EmailStepUncheckedCreateNestedManyWithoutSequenceInput
    events?: EmailEventUncheckedCreateNestedManyWithoutSequenceInput
  }

  export type EmailSequenceCreateOrConnectWithoutTargetsInput = {
    where: EmailSequenceWhereUniqueInput
    create: XOR<EmailSequenceCreateWithoutTargetsInput, EmailSequenceUncheckedCreateWithoutTargetsInput>
  }

  export type ClientCreateWithoutSequencesInput = {
    id?: string
    name: string
    email: string
    phone?: string | null
    company?: string | null
    stage?: $Enums.PipelineStage
    valueUsd?: number
    isPaid?: boolean
    isOnboarded?: boolean
    competitors?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    assignedTo?: OrganizationMembershipCreateNestedOneWithoutClientInput
    assignedUsers?: UserCreateNestedManyWithoutAssignedClientsInput
    organization: OrganizationCreateNestedOneWithoutClientsInput
    interactions?: InteractionCreateNestedManyWithoutClientInput
    invoices?: InvoiceCreateNestedManyWithoutClientInput
    pipelineCards?: PipelineCardCreateNestedManyWithoutClientInput
    campaigns?: CampaignCreateNestedManyWithoutClientInput
    EmailEvent?: EmailEventCreateNestedManyWithoutClientInput
    Subscription?: SubscriptionCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateWithoutSequencesInput = {
    id?: string
    organizationId: string
    name: string
    email: string
    phone?: string | null
    company?: string | null
    stage?: $Enums.PipelineStage
    valueUsd?: number
    isPaid?: boolean
    isOnboarded?: boolean
    competitors?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    assignedToMembershipId?: string | null
    assignedUsers?: UserUncheckedCreateNestedManyWithoutAssignedClientsInput
    interactions?: InteractionUncheckedCreateNestedManyWithoutClientInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutClientInput
    pipelineCards?: PipelineCardUncheckedCreateNestedManyWithoutClientInput
    campaigns?: CampaignUncheckedCreateNestedManyWithoutClientInput
    EmailEvent?: EmailEventUncheckedCreateNestedManyWithoutClientInput
    Subscription?: SubscriptionUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientCreateOrConnectWithoutSequencesInput = {
    where: ClientWhereUniqueInput
    create: XOR<ClientCreateWithoutSequencesInput, ClientUncheckedCreateWithoutSequencesInput>
  }

  export type EmailSequenceUpsertWithoutTargetsInput = {
    update: XOR<EmailSequenceUpdateWithoutTargetsInput, EmailSequenceUncheckedUpdateWithoutTargetsInput>
    create: XOR<EmailSequenceCreateWithoutTargetsInput, EmailSequenceUncheckedCreateWithoutTargetsInput>
    where?: EmailSequenceWhereInput
  }

  export type EmailSequenceUpdateToOneWithWhereWithoutTargetsInput = {
    where?: EmailSequenceWhereInput
    data: XOR<EmailSequenceUpdateWithoutTargetsInput, EmailSequenceUncheckedUpdateWithoutTargetsInput>
  }

  export type EmailSequenceUpdateWithoutTargetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    sent?: IntFieldUpdateOperationsInput | number
    opens?: IntFieldUpdateOperationsInput | number
    clicks?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutEmailSequencesNestedInput
    steps?: EmailStepUpdateManyWithoutSequenceNestedInput
    events?: EmailEventUpdateManyWithoutSequenceNestedInput
  }

  export type EmailSequenceUncheckedUpdateWithoutTargetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    sent?: IntFieldUpdateOperationsInput | number
    opens?: IntFieldUpdateOperationsInput | number
    clicks?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    steps?: EmailStepUncheckedUpdateManyWithoutSequenceNestedInput
    events?: EmailEventUncheckedUpdateManyWithoutSequenceNestedInput
  }

  export type ClientUpsertWithoutSequencesInput = {
    update: XOR<ClientUpdateWithoutSequencesInput, ClientUncheckedUpdateWithoutSequencesInput>
    create: XOR<ClientCreateWithoutSequencesInput, ClientUncheckedCreateWithoutSequencesInput>
    where?: ClientWhereInput
  }

  export type ClientUpdateToOneWithWhereWithoutSequencesInput = {
    where?: ClientWhereInput
    data: XOR<ClientUpdateWithoutSequencesInput, ClientUncheckedUpdateWithoutSequencesInput>
  }

  export type ClientUpdateWithoutSequencesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    stage?: EnumPipelineStageFieldUpdateOperationsInput | $Enums.PipelineStage
    valueUsd?: IntFieldUpdateOperationsInput | number
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    isOnboarded?: BoolFieldUpdateOperationsInput | boolean
    competitors?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedTo?: OrganizationMembershipUpdateOneWithoutClientNestedInput
    assignedUsers?: UserUpdateManyWithoutAssignedClientsNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutClientsNestedInput
    interactions?: InteractionUpdateManyWithoutClientNestedInput
    invoices?: InvoiceUpdateManyWithoutClientNestedInput
    pipelineCards?: PipelineCardUpdateManyWithoutClientNestedInput
    campaigns?: CampaignUpdateManyWithoutClientNestedInput
    EmailEvent?: EmailEventUpdateManyWithoutClientNestedInput
    Subscription?: SubscriptionUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateWithoutSequencesInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    stage?: EnumPipelineStageFieldUpdateOperationsInput | $Enums.PipelineStage
    valueUsd?: IntFieldUpdateOperationsInput | number
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    isOnboarded?: BoolFieldUpdateOperationsInput | boolean
    competitors?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedToMembershipId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedUsers?: UserUncheckedUpdateManyWithoutAssignedClientsNestedInput
    interactions?: InteractionUncheckedUpdateManyWithoutClientNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutClientNestedInput
    pipelineCards?: PipelineCardUncheckedUpdateManyWithoutClientNestedInput
    campaigns?: CampaignUncheckedUpdateManyWithoutClientNestedInput
    EmailEvent?: EmailEventUncheckedUpdateManyWithoutClientNestedInput
    Subscription?: SubscriptionUncheckedUpdateManyWithoutClientNestedInput
  }

  export type EmailSequenceCreateWithoutEventsInput = {
    id?: string
    name: string
    sent?: number
    opens?: number
    clicks?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutEmailSequencesInput
    steps?: EmailStepCreateNestedManyWithoutSequenceInput
    targets?: SequenceTargetCreateNestedManyWithoutSequenceInput
  }

  export type EmailSequenceUncheckedCreateWithoutEventsInput = {
    id?: string
    organizationId: string
    name: string
    sent?: number
    opens?: number
    clicks?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    steps?: EmailStepUncheckedCreateNestedManyWithoutSequenceInput
    targets?: SequenceTargetUncheckedCreateNestedManyWithoutSequenceInput
  }

  export type EmailSequenceCreateOrConnectWithoutEventsInput = {
    where: EmailSequenceWhereUniqueInput
    create: XOR<EmailSequenceCreateWithoutEventsInput, EmailSequenceUncheckedCreateWithoutEventsInput>
  }

  export type ClientCreateWithoutEmailEventInput = {
    id?: string
    name: string
    email: string
    phone?: string | null
    company?: string | null
    stage?: $Enums.PipelineStage
    valueUsd?: number
    isPaid?: boolean
    isOnboarded?: boolean
    competitors?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    assignedTo?: OrganizationMembershipCreateNestedOneWithoutClientInput
    assignedUsers?: UserCreateNestedManyWithoutAssignedClientsInput
    organization: OrganizationCreateNestedOneWithoutClientsInput
    interactions?: InteractionCreateNestedManyWithoutClientInput
    invoices?: InvoiceCreateNestedManyWithoutClientInput
    sequences?: SequenceTargetCreateNestedManyWithoutClientInput
    pipelineCards?: PipelineCardCreateNestedManyWithoutClientInput
    campaigns?: CampaignCreateNestedManyWithoutClientInput
    Subscription?: SubscriptionCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateWithoutEmailEventInput = {
    id?: string
    organizationId: string
    name: string
    email: string
    phone?: string | null
    company?: string | null
    stage?: $Enums.PipelineStage
    valueUsd?: number
    isPaid?: boolean
    isOnboarded?: boolean
    competitors?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    assignedToMembershipId?: string | null
    assignedUsers?: UserUncheckedCreateNestedManyWithoutAssignedClientsInput
    interactions?: InteractionUncheckedCreateNestedManyWithoutClientInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutClientInput
    sequences?: SequenceTargetUncheckedCreateNestedManyWithoutClientInput
    pipelineCards?: PipelineCardUncheckedCreateNestedManyWithoutClientInput
    campaigns?: CampaignUncheckedCreateNestedManyWithoutClientInput
    Subscription?: SubscriptionUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientCreateOrConnectWithoutEmailEventInput = {
    where: ClientWhereUniqueInput
    create: XOR<ClientCreateWithoutEmailEventInput, ClientUncheckedCreateWithoutEmailEventInput>
  }

  export type EmailSequenceUpsertWithoutEventsInput = {
    update: XOR<EmailSequenceUpdateWithoutEventsInput, EmailSequenceUncheckedUpdateWithoutEventsInput>
    create: XOR<EmailSequenceCreateWithoutEventsInput, EmailSequenceUncheckedCreateWithoutEventsInput>
    where?: EmailSequenceWhereInput
  }

  export type EmailSequenceUpdateToOneWithWhereWithoutEventsInput = {
    where?: EmailSequenceWhereInput
    data: XOR<EmailSequenceUpdateWithoutEventsInput, EmailSequenceUncheckedUpdateWithoutEventsInput>
  }

  export type EmailSequenceUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    sent?: IntFieldUpdateOperationsInput | number
    opens?: IntFieldUpdateOperationsInput | number
    clicks?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutEmailSequencesNestedInput
    steps?: EmailStepUpdateManyWithoutSequenceNestedInput
    targets?: SequenceTargetUpdateManyWithoutSequenceNestedInput
  }

  export type EmailSequenceUncheckedUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    sent?: IntFieldUpdateOperationsInput | number
    opens?: IntFieldUpdateOperationsInput | number
    clicks?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    steps?: EmailStepUncheckedUpdateManyWithoutSequenceNestedInput
    targets?: SequenceTargetUncheckedUpdateManyWithoutSequenceNestedInput
  }

  export type ClientUpsertWithoutEmailEventInput = {
    update: XOR<ClientUpdateWithoutEmailEventInput, ClientUncheckedUpdateWithoutEmailEventInput>
    create: XOR<ClientCreateWithoutEmailEventInput, ClientUncheckedCreateWithoutEmailEventInput>
    where?: ClientWhereInput
  }

  export type ClientUpdateToOneWithWhereWithoutEmailEventInput = {
    where?: ClientWhereInput
    data: XOR<ClientUpdateWithoutEmailEventInput, ClientUncheckedUpdateWithoutEmailEventInput>
  }

  export type ClientUpdateWithoutEmailEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    stage?: EnumPipelineStageFieldUpdateOperationsInput | $Enums.PipelineStage
    valueUsd?: IntFieldUpdateOperationsInput | number
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    isOnboarded?: BoolFieldUpdateOperationsInput | boolean
    competitors?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedTo?: OrganizationMembershipUpdateOneWithoutClientNestedInput
    assignedUsers?: UserUpdateManyWithoutAssignedClientsNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutClientsNestedInput
    interactions?: InteractionUpdateManyWithoutClientNestedInput
    invoices?: InvoiceUpdateManyWithoutClientNestedInput
    sequences?: SequenceTargetUpdateManyWithoutClientNestedInput
    pipelineCards?: PipelineCardUpdateManyWithoutClientNestedInput
    campaigns?: CampaignUpdateManyWithoutClientNestedInput
    Subscription?: SubscriptionUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateWithoutEmailEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    stage?: EnumPipelineStageFieldUpdateOperationsInput | $Enums.PipelineStage
    valueUsd?: IntFieldUpdateOperationsInput | number
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    isOnboarded?: BoolFieldUpdateOperationsInput | boolean
    competitors?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedToMembershipId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedUsers?: UserUncheckedUpdateManyWithoutAssignedClientsNestedInput
    interactions?: InteractionUncheckedUpdateManyWithoutClientNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutClientNestedInput
    sequences?: SequenceTargetUncheckedUpdateManyWithoutClientNestedInput
    pipelineCards?: PipelineCardUncheckedUpdateManyWithoutClientNestedInput
    campaigns?: CampaignUncheckedUpdateManyWithoutClientNestedInput
    Subscription?: SubscriptionUncheckedUpdateManyWithoutClientNestedInput
  }

  export type OrganizationCreateWithoutInvoicesInput = {
    id?: string
    name: string
    subdomain?: string | null
    billingPlan?: string | null
    createdAt?: Date | string
    memberships?: OrganizationMembershipCreateNestedManyWithoutOrganizationInput
    clients?: ClientCreateNestedManyWithoutOrganizationInput
    pipelines?: PipelineCreateNestedManyWithoutOrganizationInput
    mindmaps?: MindMapCreateNestedManyWithoutOrganizationInput
    affiliateLinks?: AffiliateLinkCreateNestedManyWithoutOrganizationInput
    pipelineCards?: PipelineCardCreateNestedManyWithoutOrganizationInput
    transactions?: TransactionCreateNestedManyWithoutOrganizationInput
    subscriptions?: SubscriptionCreateNestedManyWithoutOrganizationInput
    emailSequences?: EmailSequenceCreateNestedManyWithoutOrganizationInput
    emailTemplates?: EmailTemplateCreateNestedManyWithoutOrganizationInput
    calendarEvents?: CalendarEventCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutInvoicesInput = {
    id?: string
    name: string
    subdomain?: string | null
    billingPlan?: string | null
    createdAt?: Date | string
    memberships?: OrganizationMembershipUncheckedCreateNestedManyWithoutOrganizationInput
    clients?: ClientUncheckedCreateNestedManyWithoutOrganizationInput
    pipelines?: PipelineUncheckedCreateNestedManyWithoutOrganizationInput
    mindmaps?: MindMapUncheckedCreateNestedManyWithoutOrganizationInput
    affiliateLinks?: AffiliateLinkUncheckedCreateNestedManyWithoutOrganizationInput
    pipelineCards?: PipelineCardUncheckedCreateNestedManyWithoutOrganizationInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutOrganizationInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutOrganizationInput
    emailSequences?: EmailSequenceUncheckedCreateNestedManyWithoutOrganizationInput
    emailTemplates?: EmailTemplateUncheckedCreateNestedManyWithoutOrganizationInput
    calendarEvents?: CalendarEventUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutInvoicesInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutInvoicesInput, OrganizationUncheckedCreateWithoutInvoicesInput>
  }

  export type ClientCreateWithoutInvoicesInput = {
    id?: string
    name: string
    email: string
    phone?: string | null
    company?: string | null
    stage?: $Enums.PipelineStage
    valueUsd?: number
    isPaid?: boolean
    isOnboarded?: boolean
    competitors?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    assignedTo?: OrganizationMembershipCreateNestedOneWithoutClientInput
    assignedUsers?: UserCreateNestedManyWithoutAssignedClientsInput
    organization: OrganizationCreateNestedOneWithoutClientsInput
    interactions?: InteractionCreateNestedManyWithoutClientInput
    sequences?: SequenceTargetCreateNestedManyWithoutClientInput
    pipelineCards?: PipelineCardCreateNestedManyWithoutClientInput
    campaigns?: CampaignCreateNestedManyWithoutClientInput
    EmailEvent?: EmailEventCreateNestedManyWithoutClientInput
    Subscription?: SubscriptionCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateWithoutInvoicesInput = {
    id?: string
    organizationId: string
    name: string
    email: string
    phone?: string | null
    company?: string | null
    stage?: $Enums.PipelineStage
    valueUsd?: number
    isPaid?: boolean
    isOnboarded?: boolean
    competitors?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    assignedToMembershipId?: string | null
    assignedUsers?: UserUncheckedCreateNestedManyWithoutAssignedClientsInput
    interactions?: InteractionUncheckedCreateNestedManyWithoutClientInput
    sequences?: SequenceTargetUncheckedCreateNestedManyWithoutClientInput
    pipelineCards?: PipelineCardUncheckedCreateNestedManyWithoutClientInput
    campaigns?: CampaignUncheckedCreateNestedManyWithoutClientInput
    EmailEvent?: EmailEventUncheckedCreateNestedManyWithoutClientInput
    Subscription?: SubscriptionUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientCreateOrConnectWithoutInvoicesInput = {
    where: ClientWhereUniqueInput
    create: XOR<ClientCreateWithoutInvoicesInput, ClientUncheckedCreateWithoutInvoicesInput>
  }

  export type TransactionCreateWithoutInvoiceInput = {
    id?: string
    amount: number
    currency?: string
    gateway: string
    gatewayPayload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    organization?: OrganizationCreateNestedOneWithoutTransactionsInput
  }

  export type TransactionUncheckedCreateWithoutInvoiceInput = {
    id?: string
    organizationId?: string | null
    amount: number
    currency?: string
    gateway: string
    gatewayPayload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type TransactionCreateOrConnectWithoutInvoiceInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutInvoiceInput, TransactionUncheckedCreateWithoutInvoiceInput>
  }

  export type TransactionCreateManyInvoiceInputEnvelope = {
    data: TransactionCreateManyInvoiceInput | TransactionCreateManyInvoiceInput[]
    skipDuplicates?: boolean
  }

  export type OrganizationUpsertWithoutInvoicesInput = {
    update: XOR<OrganizationUpdateWithoutInvoicesInput, OrganizationUncheckedUpdateWithoutInvoicesInput>
    create: XOR<OrganizationCreateWithoutInvoicesInput, OrganizationUncheckedCreateWithoutInvoicesInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutInvoicesInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutInvoicesInput, OrganizationUncheckedUpdateWithoutInvoicesInput>
  }

  export type OrganizationUpdateWithoutInvoicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: NullableStringFieldUpdateOperationsInput | string | null
    billingPlan?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    memberships?: OrganizationMembershipUpdateManyWithoutOrganizationNestedInput
    clients?: ClientUpdateManyWithoutOrganizationNestedInput
    pipelines?: PipelineUpdateManyWithoutOrganizationNestedInput
    mindmaps?: MindMapUpdateManyWithoutOrganizationNestedInput
    affiliateLinks?: AffiliateLinkUpdateManyWithoutOrganizationNestedInput
    pipelineCards?: PipelineCardUpdateManyWithoutOrganizationNestedInput
    transactions?: TransactionUpdateManyWithoutOrganizationNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutOrganizationNestedInput
    emailSequences?: EmailSequenceUpdateManyWithoutOrganizationNestedInput
    emailTemplates?: EmailTemplateUpdateManyWithoutOrganizationNestedInput
    calendarEvents?: CalendarEventUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutInvoicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: NullableStringFieldUpdateOperationsInput | string | null
    billingPlan?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    memberships?: OrganizationMembershipUncheckedUpdateManyWithoutOrganizationNestedInput
    clients?: ClientUncheckedUpdateManyWithoutOrganizationNestedInput
    pipelines?: PipelineUncheckedUpdateManyWithoutOrganizationNestedInput
    mindmaps?: MindMapUncheckedUpdateManyWithoutOrganizationNestedInput
    affiliateLinks?: AffiliateLinkUncheckedUpdateManyWithoutOrganizationNestedInput
    pipelineCards?: PipelineCardUncheckedUpdateManyWithoutOrganizationNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutOrganizationNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutOrganizationNestedInput
    emailSequences?: EmailSequenceUncheckedUpdateManyWithoutOrganizationNestedInput
    emailTemplates?: EmailTemplateUncheckedUpdateManyWithoutOrganizationNestedInput
    calendarEvents?: CalendarEventUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type ClientUpsertWithoutInvoicesInput = {
    update: XOR<ClientUpdateWithoutInvoicesInput, ClientUncheckedUpdateWithoutInvoicesInput>
    create: XOR<ClientCreateWithoutInvoicesInput, ClientUncheckedCreateWithoutInvoicesInput>
    where?: ClientWhereInput
  }

  export type ClientUpdateToOneWithWhereWithoutInvoicesInput = {
    where?: ClientWhereInput
    data: XOR<ClientUpdateWithoutInvoicesInput, ClientUncheckedUpdateWithoutInvoicesInput>
  }

  export type ClientUpdateWithoutInvoicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    stage?: EnumPipelineStageFieldUpdateOperationsInput | $Enums.PipelineStage
    valueUsd?: IntFieldUpdateOperationsInput | number
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    isOnboarded?: BoolFieldUpdateOperationsInput | boolean
    competitors?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedTo?: OrganizationMembershipUpdateOneWithoutClientNestedInput
    assignedUsers?: UserUpdateManyWithoutAssignedClientsNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutClientsNestedInput
    interactions?: InteractionUpdateManyWithoutClientNestedInput
    sequences?: SequenceTargetUpdateManyWithoutClientNestedInput
    pipelineCards?: PipelineCardUpdateManyWithoutClientNestedInput
    campaigns?: CampaignUpdateManyWithoutClientNestedInput
    EmailEvent?: EmailEventUpdateManyWithoutClientNestedInput
    Subscription?: SubscriptionUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateWithoutInvoicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    stage?: EnumPipelineStageFieldUpdateOperationsInput | $Enums.PipelineStage
    valueUsd?: IntFieldUpdateOperationsInput | number
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    isOnboarded?: BoolFieldUpdateOperationsInput | boolean
    competitors?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedToMembershipId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedUsers?: UserUncheckedUpdateManyWithoutAssignedClientsNestedInput
    interactions?: InteractionUncheckedUpdateManyWithoutClientNestedInput
    sequences?: SequenceTargetUncheckedUpdateManyWithoutClientNestedInput
    pipelineCards?: PipelineCardUncheckedUpdateManyWithoutClientNestedInput
    campaigns?: CampaignUncheckedUpdateManyWithoutClientNestedInput
    EmailEvent?: EmailEventUncheckedUpdateManyWithoutClientNestedInput
    Subscription?: SubscriptionUncheckedUpdateManyWithoutClientNestedInput
  }

  export type TransactionUpsertWithWhereUniqueWithoutInvoiceInput = {
    where: TransactionWhereUniqueInput
    update: XOR<TransactionUpdateWithoutInvoiceInput, TransactionUncheckedUpdateWithoutInvoiceInput>
    create: XOR<TransactionCreateWithoutInvoiceInput, TransactionUncheckedCreateWithoutInvoiceInput>
  }

  export type TransactionUpdateWithWhereUniqueWithoutInvoiceInput = {
    where: TransactionWhereUniqueInput
    data: XOR<TransactionUpdateWithoutInvoiceInput, TransactionUncheckedUpdateWithoutInvoiceInput>
  }

  export type TransactionUpdateManyWithWhereWithoutInvoiceInput = {
    where: TransactionScalarWhereInput
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyWithoutInvoiceInput>
  }

  export type InvoiceCreateWithoutTransactionsInput = {
    id?: string
    amountUsd: number
    status?: $Enums.InvoiceStatus
    dueDate: Date | string
    createdAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutInvoicesInput
    client: ClientCreateNestedOneWithoutInvoicesInput
  }

  export type InvoiceUncheckedCreateWithoutTransactionsInput = {
    id?: string
    organizationId: string
    clientId: string
    amountUsd: number
    status?: $Enums.InvoiceStatus
    dueDate: Date | string
    createdAt?: Date | string
  }

  export type InvoiceCreateOrConnectWithoutTransactionsInput = {
    where: InvoiceWhereUniqueInput
    create: XOR<InvoiceCreateWithoutTransactionsInput, InvoiceUncheckedCreateWithoutTransactionsInput>
  }

  export type OrganizationCreateWithoutTransactionsInput = {
    id?: string
    name: string
    subdomain?: string | null
    billingPlan?: string | null
    createdAt?: Date | string
    memberships?: OrganizationMembershipCreateNestedManyWithoutOrganizationInput
    clients?: ClientCreateNestedManyWithoutOrganizationInput
    pipelines?: PipelineCreateNestedManyWithoutOrganizationInput
    invoices?: InvoiceCreateNestedManyWithoutOrganizationInput
    mindmaps?: MindMapCreateNestedManyWithoutOrganizationInput
    affiliateLinks?: AffiliateLinkCreateNestedManyWithoutOrganizationInput
    pipelineCards?: PipelineCardCreateNestedManyWithoutOrganizationInput
    subscriptions?: SubscriptionCreateNestedManyWithoutOrganizationInput
    emailSequences?: EmailSequenceCreateNestedManyWithoutOrganizationInput
    emailTemplates?: EmailTemplateCreateNestedManyWithoutOrganizationInput
    calendarEvents?: CalendarEventCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutTransactionsInput = {
    id?: string
    name: string
    subdomain?: string | null
    billingPlan?: string | null
    createdAt?: Date | string
    memberships?: OrganizationMembershipUncheckedCreateNestedManyWithoutOrganizationInput
    clients?: ClientUncheckedCreateNestedManyWithoutOrganizationInput
    pipelines?: PipelineUncheckedCreateNestedManyWithoutOrganizationInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutOrganizationInput
    mindmaps?: MindMapUncheckedCreateNestedManyWithoutOrganizationInput
    affiliateLinks?: AffiliateLinkUncheckedCreateNestedManyWithoutOrganizationInput
    pipelineCards?: PipelineCardUncheckedCreateNestedManyWithoutOrganizationInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutOrganizationInput
    emailSequences?: EmailSequenceUncheckedCreateNestedManyWithoutOrganizationInput
    emailTemplates?: EmailTemplateUncheckedCreateNestedManyWithoutOrganizationInput
    calendarEvents?: CalendarEventUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutTransactionsInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutTransactionsInput, OrganizationUncheckedCreateWithoutTransactionsInput>
  }

  export type InvoiceUpsertWithoutTransactionsInput = {
    update: XOR<InvoiceUpdateWithoutTransactionsInput, InvoiceUncheckedUpdateWithoutTransactionsInput>
    create: XOR<InvoiceCreateWithoutTransactionsInput, InvoiceUncheckedCreateWithoutTransactionsInput>
    where?: InvoiceWhereInput
  }

  export type InvoiceUpdateToOneWithWhereWithoutTransactionsInput = {
    where?: InvoiceWhereInput
    data: XOR<InvoiceUpdateWithoutTransactionsInput, InvoiceUncheckedUpdateWithoutTransactionsInput>
  }

  export type InvoiceUpdateWithoutTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    amountUsd?: IntFieldUpdateOperationsInput | number
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | $Enums.InvoiceStatus
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutInvoicesNestedInput
    client?: ClientUpdateOneRequiredWithoutInvoicesNestedInput
  }

  export type InvoiceUncheckedUpdateWithoutTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
    amountUsd?: IntFieldUpdateOperationsInput | number
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | $Enums.InvoiceStatus
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrganizationUpsertWithoutTransactionsInput = {
    update: XOR<OrganizationUpdateWithoutTransactionsInput, OrganizationUncheckedUpdateWithoutTransactionsInput>
    create: XOR<OrganizationCreateWithoutTransactionsInput, OrganizationUncheckedCreateWithoutTransactionsInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutTransactionsInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutTransactionsInput, OrganizationUncheckedUpdateWithoutTransactionsInput>
  }

  export type OrganizationUpdateWithoutTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: NullableStringFieldUpdateOperationsInput | string | null
    billingPlan?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    memberships?: OrganizationMembershipUpdateManyWithoutOrganizationNestedInput
    clients?: ClientUpdateManyWithoutOrganizationNestedInput
    pipelines?: PipelineUpdateManyWithoutOrganizationNestedInput
    invoices?: InvoiceUpdateManyWithoutOrganizationNestedInput
    mindmaps?: MindMapUpdateManyWithoutOrganizationNestedInput
    affiliateLinks?: AffiliateLinkUpdateManyWithoutOrganizationNestedInput
    pipelineCards?: PipelineCardUpdateManyWithoutOrganizationNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutOrganizationNestedInput
    emailSequences?: EmailSequenceUpdateManyWithoutOrganizationNestedInput
    emailTemplates?: EmailTemplateUpdateManyWithoutOrganizationNestedInput
    calendarEvents?: CalendarEventUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: NullableStringFieldUpdateOperationsInput | string | null
    billingPlan?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    memberships?: OrganizationMembershipUncheckedUpdateManyWithoutOrganizationNestedInput
    clients?: ClientUncheckedUpdateManyWithoutOrganizationNestedInput
    pipelines?: PipelineUncheckedUpdateManyWithoutOrganizationNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutOrganizationNestedInput
    mindmaps?: MindMapUncheckedUpdateManyWithoutOrganizationNestedInput
    affiliateLinks?: AffiliateLinkUncheckedUpdateManyWithoutOrganizationNestedInput
    pipelineCards?: PipelineCardUncheckedUpdateManyWithoutOrganizationNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutOrganizationNestedInput
    emailSequences?: EmailSequenceUncheckedUpdateManyWithoutOrganizationNestedInput
    emailTemplates?: EmailTemplateUncheckedUpdateManyWithoutOrganizationNestedInput
    calendarEvents?: CalendarEventUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationCreateWithoutSubscriptionsInput = {
    id?: string
    name: string
    subdomain?: string | null
    billingPlan?: string | null
    createdAt?: Date | string
    memberships?: OrganizationMembershipCreateNestedManyWithoutOrganizationInput
    clients?: ClientCreateNestedManyWithoutOrganizationInput
    pipelines?: PipelineCreateNestedManyWithoutOrganizationInput
    invoices?: InvoiceCreateNestedManyWithoutOrganizationInput
    mindmaps?: MindMapCreateNestedManyWithoutOrganizationInput
    affiliateLinks?: AffiliateLinkCreateNestedManyWithoutOrganizationInput
    pipelineCards?: PipelineCardCreateNestedManyWithoutOrganizationInput
    transactions?: TransactionCreateNestedManyWithoutOrganizationInput
    emailSequences?: EmailSequenceCreateNestedManyWithoutOrganizationInput
    emailTemplates?: EmailTemplateCreateNestedManyWithoutOrganizationInput
    calendarEvents?: CalendarEventCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutSubscriptionsInput = {
    id?: string
    name: string
    subdomain?: string | null
    billingPlan?: string | null
    createdAt?: Date | string
    memberships?: OrganizationMembershipUncheckedCreateNestedManyWithoutOrganizationInput
    clients?: ClientUncheckedCreateNestedManyWithoutOrganizationInput
    pipelines?: PipelineUncheckedCreateNestedManyWithoutOrganizationInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutOrganizationInput
    mindmaps?: MindMapUncheckedCreateNestedManyWithoutOrganizationInput
    affiliateLinks?: AffiliateLinkUncheckedCreateNestedManyWithoutOrganizationInput
    pipelineCards?: PipelineCardUncheckedCreateNestedManyWithoutOrganizationInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutOrganizationInput
    emailSequences?: EmailSequenceUncheckedCreateNestedManyWithoutOrganizationInput
    emailTemplates?: EmailTemplateUncheckedCreateNestedManyWithoutOrganizationInput
    calendarEvents?: CalendarEventUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutSubscriptionsInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutSubscriptionsInput, OrganizationUncheckedCreateWithoutSubscriptionsInput>
  }

  export type ClientCreateWithoutSubscriptionInput = {
    id?: string
    name: string
    email: string
    phone?: string | null
    company?: string | null
    stage?: $Enums.PipelineStage
    valueUsd?: number
    isPaid?: boolean
    isOnboarded?: boolean
    competitors?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    assignedTo?: OrganizationMembershipCreateNestedOneWithoutClientInput
    assignedUsers?: UserCreateNestedManyWithoutAssignedClientsInput
    organization: OrganizationCreateNestedOneWithoutClientsInput
    interactions?: InteractionCreateNestedManyWithoutClientInput
    invoices?: InvoiceCreateNestedManyWithoutClientInput
    sequences?: SequenceTargetCreateNestedManyWithoutClientInput
    pipelineCards?: PipelineCardCreateNestedManyWithoutClientInput
    campaigns?: CampaignCreateNestedManyWithoutClientInput
    EmailEvent?: EmailEventCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateWithoutSubscriptionInput = {
    id?: string
    organizationId: string
    name: string
    email: string
    phone?: string | null
    company?: string | null
    stage?: $Enums.PipelineStage
    valueUsd?: number
    isPaid?: boolean
    isOnboarded?: boolean
    competitors?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    assignedToMembershipId?: string | null
    assignedUsers?: UserUncheckedCreateNestedManyWithoutAssignedClientsInput
    interactions?: InteractionUncheckedCreateNestedManyWithoutClientInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutClientInput
    sequences?: SequenceTargetUncheckedCreateNestedManyWithoutClientInput
    pipelineCards?: PipelineCardUncheckedCreateNestedManyWithoutClientInput
    campaigns?: CampaignUncheckedCreateNestedManyWithoutClientInput
    EmailEvent?: EmailEventUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientCreateOrConnectWithoutSubscriptionInput = {
    where: ClientWhereUniqueInput
    create: XOR<ClientCreateWithoutSubscriptionInput, ClientUncheckedCreateWithoutSubscriptionInput>
  }

  export type OrganizationUpsertWithoutSubscriptionsInput = {
    update: XOR<OrganizationUpdateWithoutSubscriptionsInput, OrganizationUncheckedUpdateWithoutSubscriptionsInput>
    create: XOR<OrganizationCreateWithoutSubscriptionsInput, OrganizationUncheckedCreateWithoutSubscriptionsInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutSubscriptionsInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutSubscriptionsInput, OrganizationUncheckedUpdateWithoutSubscriptionsInput>
  }

  export type OrganizationUpdateWithoutSubscriptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: NullableStringFieldUpdateOperationsInput | string | null
    billingPlan?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    memberships?: OrganizationMembershipUpdateManyWithoutOrganizationNestedInput
    clients?: ClientUpdateManyWithoutOrganizationNestedInput
    pipelines?: PipelineUpdateManyWithoutOrganizationNestedInput
    invoices?: InvoiceUpdateManyWithoutOrganizationNestedInput
    mindmaps?: MindMapUpdateManyWithoutOrganizationNestedInput
    affiliateLinks?: AffiliateLinkUpdateManyWithoutOrganizationNestedInput
    pipelineCards?: PipelineCardUpdateManyWithoutOrganizationNestedInput
    transactions?: TransactionUpdateManyWithoutOrganizationNestedInput
    emailSequences?: EmailSequenceUpdateManyWithoutOrganizationNestedInput
    emailTemplates?: EmailTemplateUpdateManyWithoutOrganizationNestedInput
    calendarEvents?: CalendarEventUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutSubscriptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: NullableStringFieldUpdateOperationsInput | string | null
    billingPlan?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    memberships?: OrganizationMembershipUncheckedUpdateManyWithoutOrganizationNestedInput
    clients?: ClientUncheckedUpdateManyWithoutOrganizationNestedInput
    pipelines?: PipelineUncheckedUpdateManyWithoutOrganizationNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutOrganizationNestedInput
    mindmaps?: MindMapUncheckedUpdateManyWithoutOrganizationNestedInput
    affiliateLinks?: AffiliateLinkUncheckedUpdateManyWithoutOrganizationNestedInput
    pipelineCards?: PipelineCardUncheckedUpdateManyWithoutOrganizationNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutOrganizationNestedInput
    emailSequences?: EmailSequenceUncheckedUpdateManyWithoutOrganizationNestedInput
    emailTemplates?: EmailTemplateUncheckedUpdateManyWithoutOrganizationNestedInput
    calendarEvents?: CalendarEventUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type ClientUpsertWithoutSubscriptionInput = {
    update: XOR<ClientUpdateWithoutSubscriptionInput, ClientUncheckedUpdateWithoutSubscriptionInput>
    create: XOR<ClientCreateWithoutSubscriptionInput, ClientUncheckedCreateWithoutSubscriptionInput>
    where?: ClientWhereInput
  }

  export type ClientUpdateToOneWithWhereWithoutSubscriptionInput = {
    where?: ClientWhereInput
    data: XOR<ClientUpdateWithoutSubscriptionInput, ClientUncheckedUpdateWithoutSubscriptionInput>
  }

  export type ClientUpdateWithoutSubscriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    stage?: EnumPipelineStageFieldUpdateOperationsInput | $Enums.PipelineStage
    valueUsd?: IntFieldUpdateOperationsInput | number
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    isOnboarded?: BoolFieldUpdateOperationsInput | boolean
    competitors?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedTo?: OrganizationMembershipUpdateOneWithoutClientNestedInput
    assignedUsers?: UserUpdateManyWithoutAssignedClientsNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutClientsNestedInput
    interactions?: InteractionUpdateManyWithoutClientNestedInput
    invoices?: InvoiceUpdateManyWithoutClientNestedInput
    sequences?: SequenceTargetUpdateManyWithoutClientNestedInput
    pipelineCards?: PipelineCardUpdateManyWithoutClientNestedInput
    campaigns?: CampaignUpdateManyWithoutClientNestedInput
    EmailEvent?: EmailEventUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateWithoutSubscriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    stage?: EnumPipelineStageFieldUpdateOperationsInput | $Enums.PipelineStage
    valueUsd?: IntFieldUpdateOperationsInput | number
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    isOnboarded?: BoolFieldUpdateOperationsInput | boolean
    competitors?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedToMembershipId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedUsers?: UserUncheckedUpdateManyWithoutAssignedClientsNestedInput
    interactions?: InteractionUncheckedUpdateManyWithoutClientNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutClientNestedInput
    sequences?: SequenceTargetUncheckedUpdateManyWithoutClientNestedInput
    pipelineCards?: PipelineCardUncheckedUpdateManyWithoutClientNestedInput
    campaigns?: CampaignUncheckedUpdateManyWithoutClientNestedInput
    EmailEvent?: EmailEventUncheckedUpdateManyWithoutClientNestedInput
  }

  export type OrganizationCreateWithoutCalendarEventsInput = {
    id?: string
    name: string
    subdomain?: string | null
    billingPlan?: string | null
    createdAt?: Date | string
    memberships?: OrganizationMembershipCreateNestedManyWithoutOrganizationInput
    clients?: ClientCreateNestedManyWithoutOrganizationInput
    pipelines?: PipelineCreateNestedManyWithoutOrganizationInput
    invoices?: InvoiceCreateNestedManyWithoutOrganizationInput
    mindmaps?: MindMapCreateNestedManyWithoutOrganizationInput
    affiliateLinks?: AffiliateLinkCreateNestedManyWithoutOrganizationInput
    pipelineCards?: PipelineCardCreateNestedManyWithoutOrganizationInput
    transactions?: TransactionCreateNestedManyWithoutOrganizationInput
    subscriptions?: SubscriptionCreateNestedManyWithoutOrganizationInput
    emailSequences?: EmailSequenceCreateNestedManyWithoutOrganizationInput
    emailTemplates?: EmailTemplateCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutCalendarEventsInput = {
    id?: string
    name: string
    subdomain?: string | null
    billingPlan?: string | null
    createdAt?: Date | string
    memberships?: OrganizationMembershipUncheckedCreateNestedManyWithoutOrganizationInput
    clients?: ClientUncheckedCreateNestedManyWithoutOrganizationInput
    pipelines?: PipelineUncheckedCreateNestedManyWithoutOrganizationInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutOrganizationInput
    mindmaps?: MindMapUncheckedCreateNestedManyWithoutOrganizationInput
    affiliateLinks?: AffiliateLinkUncheckedCreateNestedManyWithoutOrganizationInput
    pipelineCards?: PipelineCardUncheckedCreateNestedManyWithoutOrganizationInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutOrganizationInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutOrganizationInput
    emailSequences?: EmailSequenceUncheckedCreateNestedManyWithoutOrganizationInput
    emailTemplates?: EmailTemplateUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutCalendarEventsInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutCalendarEventsInput, OrganizationUncheckedCreateWithoutCalendarEventsInput>
  }

  export type UserCreateWithoutCalendarEventsInput = {
    id?: string
    name?: string | null
    email: string
    password?: string | null
    image?: string | null
    emailVerified?: Date | string | null
    role?: $Enums.UserRole
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    memberships?: OrganizationMembershipCreateNestedManyWithoutUserInput
    assignedClients?: ClientCreateNestedManyWithoutAssignedUsersInput
    mindmaps?: MindMapCreateNestedManyWithoutOwnerUserInput
    affiliateLinks?: AffiliateLinkCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCalendarEventsInput = {
    id?: string
    name?: string | null
    email: string
    password?: string | null
    image?: string | null
    emailVerified?: Date | string | null
    role?: $Enums.UserRole
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    memberships?: OrganizationMembershipUncheckedCreateNestedManyWithoutUserInput
    assignedClients?: ClientUncheckedCreateNestedManyWithoutAssignedUsersInput
    mindmaps?: MindMapUncheckedCreateNestedManyWithoutOwnerUserInput
    affiliateLinks?: AffiliateLinkUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCalendarEventsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCalendarEventsInput, UserUncheckedCreateWithoutCalendarEventsInput>
  }

  export type OrganizationUpsertWithoutCalendarEventsInput = {
    update: XOR<OrganizationUpdateWithoutCalendarEventsInput, OrganizationUncheckedUpdateWithoutCalendarEventsInput>
    create: XOR<OrganizationCreateWithoutCalendarEventsInput, OrganizationUncheckedCreateWithoutCalendarEventsInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutCalendarEventsInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutCalendarEventsInput, OrganizationUncheckedUpdateWithoutCalendarEventsInput>
  }

  export type OrganizationUpdateWithoutCalendarEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: NullableStringFieldUpdateOperationsInput | string | null
    billingPlan?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    memberships?: OrganizationMembershipUpdateManyWithoutOrganizationNestedInput
    clients?: ClientUpdateManyWithoutOrganizationNestedInput
    pipelines?: PipelineUpdateManyWithoutOrganizationNestedInput
    invoices?: InvoiceUpdateManyWithoutOrganizationNestedInput
    mindmaps?: MindMapUpdateManyWithoutOrganizationNestedInput
    affiliateLinks?: AffiliateLinkUpdateManyWithoutOrganizationNestedInput
    pipelineCards?: PipelineCardUpdateManyWithoutOrganizationNestedInput
    transactions?: TransactionUpdateManyWithoutOrganizationNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutOrganizationNestedInput
    emailSequences?: EmailSequenceUpdateManyWithoutOrganizationNestedInput
    emailTemplates?: EmailTemplateUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutCalendarEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: NullableStringFieldUpdateOperationsInput | string | null
    billingPlan?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    memberships?: OrganizationMembershipUncheckedUpdateManyWithoutOrganizationNestedInput
    clients?: ClientUncheckedUpdateManyWithoutOrganizationNestedInput
    pipelines?: PipelineUncheckedUpdateManyWithoutOrganizationNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutOrganizationNestedInput
    mindmaps?: MindMapUncheckedUpdateManyWithoutOrganizationNestedInput
    affiliateLinks?: AffiliateLinkUncheckedUpdateManyWithoutOrganizationNestedInput
    pipelineCards?: PipelineCardUncheckedUpdateManyWithoutOrganizationNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutOrganizationNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutOrganizationNestedInput
    emailSequences?: EmailSequenceUncheckedUpdateManyWithoutOrganizationNestedInput
    emailTemplates?: EmailTemplateUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type UserUpsertWithoutCalendarEventsInput = {
    update: XOR<UserUpdateWithoutCalendarEventsInput, UserUncheckedUpdateWithoutCalendarEventsInput>
    create: XOR<UserCreateWithoutCalendarEventsInput, UserUncheckedCreateWithoutCalendarEventsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCalendarEventsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCalendarEventsInput, UserUncheckedUpdateWithoutCalendarEventsInput>
  }

  export type UserUpdateWithoutCalendarEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    memberships?: OrganizationMembershipUpdateManyWithoutUserNestedInput
    assignedClients?: ClientUpdateManyWithoutAssignedUsersNestedInput
    mindmaps?: MindMapUpdateManyWithoutOwnerUserNestedInput
    affiliateLinks?: AffiliateLinkUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCalendarEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    memberships?: OrganizationMembershipUncheckedUpdateManyWithoutUserNestedInput
    assignedClients?: ClientUncheckedUpdateManyWithoutAssignedUsersNestedInput
    mindmaps?: MindMapUncheckedUpdateManyWithoutOwnerUserNestedInput
    affiliateLinks?: AffiliateLinkUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ClientCreateWithoutCampaignsInput = {
    id?: string
    name: string
    email: string
    phone?: string | null
    company?: string | null
    stage?: $Enums.PipelineStage
    valueUsd?: number
    isPaid?: boolean
    isOnboarded?: boolean
    competitors?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    assignedTo?: OrganizationMembershipCreateNestedOneWithoutClientInput
    assignedUsers?: UserCreateNestedManyWithoutAssignedClientsInput
    organization: OrganizationCreateNestedOneWithoutClientsInput
    interactions?: InteractionCreateNestedManyWithoutClientInput
    invoices?: InvoiceCreateNestedManyWithoutClientInput
    sequences?: SequenceTargetCreateNestedManyWithoutClientInput
    pipelineCards?: PipelineCardCreateNestedManyWithoutClientInput
    EmailEvent?: EmailEventCreateNestedManyWithoutClientInput
    Subscription?: SubscriptionCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateWithoutCampaignsInput = {
    id?: string
    organizationId: string
    name: string
    email: string
    phone?: string | null
    company?: string | null
    stage?: $Enums.PipelineStage
    valueUsd?: number
    isPaid?: boolean
    isOnboarded?: boolean
    competitors?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    assignedToMembershipId?: string | null
    assignedUsers?: UserUncheckedCreateNestedManyWithoutAssignedClientsInput
    interactions?: InteractionUncheckedCreateNestedManyWithoutClientInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutClientInput
    sequences?: SequenceTargetUncheckedCreateNestedManyWithoutClientInput
    pipelineCards?: PipelineCardUncheckedCreateNestedManyWithoutClientInput
    EmailEvent?: EmailEventUncheckedCreateNestedManyWithoutClientInput
    Subscription?: SubscriptionUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientCreateOrConnectWithoutCampaignsInput = {
    where: ClientWhereUniqueInput
    create: XOR<ClientCreateWithoutCampaignsInput, ClientUncheckedCreateWithoutCampaignsInput>
  }

  export type ClientUpsertWithoutCampaignsInput = {
    update: XOR<ClientUpdateWithoutCampaignsInput, ClientUncheckedUpdateWithoutCampaignsInput>
    create: XOR<ClientCreateWithoutCampaignsInput, ClientUncheckedCreateWithoutCampaignsInput>
    where?: ClientWhereInput
  }

  export type ClientUpdateToOneWithWhereWithoutCampaignsInput = {
    where?: ClientWhereInput
    data: XOR<ClientUpdateWithoutCampaignsInput, ClientUncheckedUpdateWithoutCampaignsInput>
  }

  export type ClientUpdateWithoutCampaignsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    stage?: EnumPipelineStageFieldUpdateOperationsInput | $Enums.PipelineStage
    valueUsd?: IntFieldUpdateOperationsInput | number
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    isOnboarded?: BoolFieldUpdateOperationsInput | boolean
    competitors?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedTo?: OrganizationMembershipUpdateOneWithoutClientNestedInput
    assignedUsers?: UserUpdateManyWithoutAssignedClientsNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutClientsNestedInput
    interactions?: InteractionUpdateManyWithoutClientNestedInput
    invoices?: InvoiceUpdateManyWithoutClientNestedInput
    sequences?: SequenceTargetUpdateManyWithoutClientNestedInput
    pipelineCards?: PipelineCardUpdateManyWithoutClientNestedInput
    EmailEvent?: EmailEventUpdateManyWithoutClientNestedInput
    Subscription?: SubscriptionUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateWithoutCampaignsInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    stage?: EnumPipelineStageFieldUpdateOperationsInput | $Enums.PipelineStage
    valueUsd?: IntFieldUpdateOperationsInput | number
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    isOnboarded?: BoolFieldUpdateOperationsInput | boolean
    competitors?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedToMembershipId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedUsers?: UserUncheckedUpdateManyWithoutAssignedClientsNestedInput
    interactions?: InteractionUncheckedUpdateManyWithoutClientNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutClientNestedInput
    sequences?: SequenceTargetUncheckedUpdateManyWithoutClientNestedInput
    pipelineCards?: PipelineCardUncheckedUpdateManyWithoutClientNestedInput
    EmailEvent?: EmailEventUncheckedUpdateManyWithoutClientNestedInput
    Subscription?: SubscriptionUncheckedUpdateManyWithoutClientNestedInput
  }

  export type OrganizationCreateWithoutMindmapsInput = {
    id?: string
    name: string
    subdomain?: string | null
    billingPlan?: string | null
    createdAt?: Date | string
    memberships?: OrganizationMembershipCreateNestedManyWithoutOrganizationInput
    clients?: ClientCreateNestedManyWithoutOrganizationInput
    pipelines?: PipelineCreateNestedManyWithoutOrganizationInput
    invoices?: InvoiceCreateNestedManyWithoutOrganizationInput
    affiliateLinks?: AffiliateLinkCreateNestedManyWithoutOrganizationInput
    pipelineCards?: PipelineCardCreateNestedManyWithoutOrganizationInput
    transactions?: TransactionCreateNestedManyWithoutOrganizationInput
    subscriptions?: SubscriptionCreateNestedManyWithoutOrganizationInput
    emailSequences?: EmailSequenceCreateNestedManyWithoutOrganizationInput
    emailTemplates?: EmailTemplateCreateNestedManyWithoutOrganizationInput
    calendarEvents?: CalendarEventCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutMindmapsInput = {
    id?: string
    name: string
    subdomain?: string | null
    billingPlan?: string | null
    createdAt?: Date | string
    memberships?: OrganizationMembershipUncheckedCreateNestedManyWithoutOrganizationInput
    clients?: ClientUncheckedCreateNestedManyWithoutOrganizationInput
    pipelines?: PipelineUncheckedCreateNestedManyWithoutOrganizationInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutOrganizationInput
    affiliateLinks?: AffiliateLinkUncheckedCreateNestedManyWithoutOrganizationInput
    pipelineCards?: PipelineCardUncheckedCreateNestedManyWithoutOrganizationInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutOrganizationInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutOrganizationInput
    emailSequences?: EmailSequenceUncheckedCreateNestedManyWithoutOrganizationInput
    emailTemplates?: EmailTemplateUncheckedCreateNestedManyWithoutOrganizationInput
    calendarEvents?: CalendarEventUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutMindmapsInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutMindmapsInput, OrganizationUncheckedCreateWithoutMindmapsInput>
  }

  export type UserCreateWithoutMindmapsInput = {
    id?: string
    name?: string | null
    email: string
    password?: string | null
    image?: string | null
    emailVerified?: Date | string | null
    role?: $Enums.UserRole
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    memberships?: OrganizationMembershipCreateNestedManyWithoutUserInput
    assignedClients?: ClientCreateNestedManyWithoutAssignedUsersInput
    affiliateLinks?: AffiliateLinkCreateNestedManyWithoutUserInput
    calendarEvents?: CalendarEventCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutMindmapsInput = {
    id?: string
    name?: string | null
    email: string
    password?: string | null
    image?: string | null
    emailVerified?: Date | string | null
    role?: $Enums.UserRole
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    memberships?: OrganizationMembershipUncheckedCreateNestedManyWithoutUserInput
    assignedClients?: ClientUncheckedCreateNestedManyWithoutAssignedUsersInput
    affiliateLinks?: AffiliateLinkUncheckedCreateNestedManyWithoutUserInput
    calendarEvents?: CalendarEventUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutMindmapsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMindmapsInput, UserUncheckedCreateWithoutMindmapsInput>
  }

  export type OrganizationUpsertWithoutMindmapsInput = {
    update: XOR<OrganizationUpdateWithoutMindmapsInput, OrganizationUncheckedUpdateWithoutMindmapsInput>
    create: XOR<OrganizationCreateWithoutMindmapsInput, OrganizationUncheckedCreateWithoutMindmapsInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutMindmapsInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutMindmapsInput, OrganizationUncheckedUpdateWithoutMindmapsInput>
  }

  export type OrganizationUpdateWithoutMindmapsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: NullableStringFieldUpdateOperationsInput | string | null
    billingPlan?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    memberships?: OrganizationMembershipUpdateManyWithoutOrganizationNestedInput
    clients?: ClientUpdateManyWithoutOrganizationNestedInput
    pipelines?: PipelineUpdateManyWithoutOrganizationNestedInput
    invoices?: InvoiceUpdateManyWithoutOrganizationNestedInput
    affiliateLinks?: AffiliateLinkUpdateManyWithoutOrganizationNestedInput
    pipelineCards?: PipelineCardUpdateManyWithoutOrganizationNestedInput
    transactions?: TransactionUpdateManyWithoutOrganizationNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutOrganizationNestedInput
    emailSequences?: EmailSequenceUpdateManyWithoutOrganizationNestedInput
    emailTemplates?: EmailTemplateUpdateManyWithoutOrganizationNestedInput
    calendarEvents?: CalendarEventUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutMindmapsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: NullableStringFieldUpdateOperationsInput | string | null
    billingPlan?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    memberships?: OrganizationMembershipUncheckedUpdateManyWithoutOrganizationNestedInput
    clients?: ClientUncheckedUpdateManyWithoutOrganizationNestedInput
    pipelines?: PipelineUncheckedUpdateManyWithoutOrganizationNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutOrganizationNestedInput
    affiliateLinks?: AffiliateLinkUncheckedUpdateManyWithoutOrganizationNestedInput
    pipelineCards?: PipelineCardUncheckedUpdateManyWithoutOrganizationNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutOrganizationNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutOrganizationNestedInput
    emailSequences?: EmailSequenceUncheckedUpdateManyWithoutOrganizationNestedInput
    emailTemplates?: EmailTemplateUncheckedUpdateManyWithoutOrganizationNestedInput
    calendarEvents?: CalendarEventUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type UserUpsertWithoutMindmapsInput = {
    update: XOR<UserUpdateWithoutMindmapsInput, UserUncheckedUpdateWithoutMindmapsInput>
    create: XOR<UserCreateWithoutMindmapsInput, UserUncheckedCreateWithoutMindmapsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMindmapsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMindmapsInput, UserUncheckedUpdateWithoutMindmapsInput>
  }

  export type UserUpdateWithoutMindmapsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    memberships?: OrganizationMembershipUpdateManyWithoutUserNestedInput
    assignedClients?: ClientUpdateManyWithoutAssignedUsersNestedInput
    affiliateLinks?: AffiliateLinkUpdateManyWithoutUserNestedInput
    calendarEvents?: CalendarEventUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutMindmapsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    memberships?: OrganizationMembershipUncheckedUpdateManyWithoutUserNestedInput
    assignedClients?: ClientUncheckedUpdateManyWithoutAssignedUsersNestedInput
    affiliateLinks?: AffiliateLinkUncheckedUpdateManyWithoutUserNestedInput
    calendarEvents?: CalendarEventUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type OrganizationCreateWithoutAffiliateLinksInput = {
    id?: string
    name: string
    subdomain?: string | null
    billingPlan?: string | null
    createdAt?: Date | string
    memberships?: OrganizationMembershipCreateNestedManyWithoutOrganizationInput
    clients?: ClientCreateNestedManyWithoutOrganizationInput
    pipelines?: PipelineCreateNestedManyWithoutOrganizationInput
    invoices?: InvoiceCreateNestedManyWithoutOrganizationInput
    mindmaps?: MindMapCreateNestedManyWithoutOrganizationInput
    pipelineCards?: PipelineCardCreateNestedManyWithoutOrganizationInput
    transactions?: TransactionCreateNestedManyWithoutOrganizationInput
    subscriptions?: SubscriptionCreateNestedManyWithoutOrganizationInput
    emailSequences?: EmailSequenceCreateNestedManyWithoutOrganizationInput
    emailTemplates?: EmailTemplateCreateNestedManyWithoutOrganizationInput
    calendarEvents?: CalendarEventCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutAffiliateLinksInput = {
    id?: string
    name: string
    subdomain?: string | null
    billingPlan?: string | null
    createdAt?: Date | string
    memberships?: OrganizationMembershipUncheckedCreateNestedManyWithoutOrganizationInput
    clients?: ClientUncheckedCreateNestedManyWithoutOrganizationInput
    pipelines?: PipelineUncheckedCreateNestedManyWithoutOrganizationInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutOrganizationInput
    mindmaps?: MindMapUncheckedCreateNestedManyWithoutOrganizationInput
    pipelineCards?: PipelineCardUncheckedCreateNestedManyWithoutOrganizationInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutOrganizationInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutOrganizationInput
    emailSequences?: EmailSequenceUncheckedCreateNestedManyWithoutOrganizationInput
    emailTemplates?: EmailTemplateUncheckedCreateNestedManyWithoutOrganizationInput
    calendarEvents?: CalendarEventUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutAffiliateLinksInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutAffiliateLinksInput, OrganizationUncheckedCreateWithoutAffiliateLinksInput>
  }

  export type UserCreateWithoutAffiliateLinksInput = {
    id?: string
    name?: string | null
    email: string
    password?: string | null
    image?: string | null
    emailVerified?: Date | string | null
    role?: $Enums.UserRole
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    memberships?: OrganizationMembershipCreateNestedManyWithoutUserInput
    assignedClients?: ClientCreateNestedManyWithoutAssignedUsersInput
    mindmaps?: MindMapCreateNestedManyWithoutOwnerUserInput
    calendarEvents?: CalendarEventCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutAffiliateLinksInput = {
    id?: string
    name?: string | null
    email: string
    password?: string | null
    image?: string | null
    emailVerified?: Date | string | null
    role?: $Enums.UserRole
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    memberships?: OrganizationMembershipUncheckedCreateNestedManyWithoutUserInput
    assignedClients?: ClientUncheckedCreateNestedManyWithoutAssignedUsersInput
    mindmaps?: MindMapUncheckedCreateNestedManyWithoutOwnerUserInput
    calendarEvents?: CalendarEventUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutAffiliateLinksInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAffiliateLinksInput, UserUncheckedCreateWithoutAffiliateLinksInput>
  }

  export type AffiliateClickCreateWithoutAffiliateInput = {
    id?: string
    visitorIp?: string | null
    userAgent?: string | null
    campaign?: string | null
    createdAt?: Date | string
  }

  export type AffiliateClickUncheckedCreateWithoutAffiliateInput = {
    id?: string
    visitorIp?: string | null
    userAgent?: string | null
    campaign?: string | null
    createdAt?: Date | string
  }

  export type AffiliateClickCreateOrConnectWithoutAffiliateInput = {
    where: AffiliateClickWhereUniqueInput
    create: XOR<AffiliateClickCreateWithoutAffiliateInput, AffiliateClickUncheckedCreateWithoutAffiliateInput>
  }

  export type AffiliateClickCreateManyAffiliateInputEnvelope = {
    data: AffiliateClickCreateManyAffiliateInput | AffiliateClickCreateManyAffiliateInput[]
    skipDuplicates?: boolean
  }

  export type OrganizationUpsertWithoutAffiliateLinksInput = {
    update: XOR<OrganizationUpdateWithoutAffiliateLinksInput, OrganizationUncheckedUpdateWithoutAffiliateLinksInput>
    create: XOR<OrganizationCreateWithoutAffiliateLinksInput, OrganizationUncheckedCreateWithoutAffiliateLinksInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutAffiliateLinksInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutAffiliateLinksInput, OrganizationUncheckedUpdateWithoutAffiliateLinksInput>
  }

  export type OrganizationUpdateWithoutAffiliateLinksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: NullableStringFieldUpdateOperationsInput | string | null
    billingPlan?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    memberships?: OrganizationMembershipUpdateManyWithoutOrganizationNestedInput
    clients?: ClientUpdateManyWithoutOrganizationNestedInput
    pipelines?: PipelineUpdateManyWithoutOrganizationNestedInput
    invoices?: InvoiceUpdateManyWithoutOrganizationNestedInput
    mindmaps?: MindMapUpdateManyWithoutOrganizationNestedInput
    pipelineCards?: PipelineCardUpdateManyWithoutOrganizationNestedInput
    transactions?: TransactionUpdateManyWithoutOrganizationNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutOrganizationNestedInput
    emailSequences?: EmailSequenceUpdateManyWithoutOrganizationNestedInput
    emailTemplates?: EmailTemplateUpdateManyWithoutOrganizationNestedInput
    calendarEvents?: CalendarEventUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutAffiliateLinksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: NullableStringFieldUpdateOperationsInput | string | null
    billingPlan?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    memberships?: OrganizationMembershipUncheckedUpdateManyWithoutOrganizationNestedInput
    clients?: ClientUncheckedUpdateManyWithoutOrganizationNestedInput
    pipelines?: PipelineUncheckedUpdateManyWithoutOrganizationNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutOrganizationNestedInput
    mindmaps?: MindMapUncheckedUpdateManyWithoutOrganizationNestedInput
    pipelineCards?: PipelineCardUncheckedUpdateManyWithoutOrganizationNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutOrganizationNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutOrganizationNestedInput
    emailSequences?: EmailSequenceUncheckedUpdateManyWithoutOrganizationNestedInput
    emailTemplates?: EmailTemplateUncheckedUpdateManyWithoutOrganizationNestedInput
    calendarEvents?: CalendarEventUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type UserUpsertWithoutAffiliateLinksInput = {
    update: XOR<UserUpdateWithoutAffiliateLinksInput, UserUncheckedUpdateWithoutAffiliateLinksInput>
    create: XOR<UserCreateWithoutAffiliateLinksInput, UserUncheckedCreateWithoutAffiliateLinksInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAffiliateLinksInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAffiliateLinksInput, UserUncheckedUpdateWithoutAffiliateLinksInput>
  }

  export type UserUpdateWithoutAffiliateLinksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    memberships?: OrganizationMembershipUpdateManyWithoutUserNestedInput
    assignedClients?: ClientUpdateManyWithoutAssignedUsersNestedInput
    mindmaps?: MindMapUpdateManyWithoutOwnerUserNestedInput
    calendarEvents?: CalendarEventUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutAffiliateLinksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    memberships?: OrganizationMembershipUncheckedUpdateManyWithoutUserNestedInput
    assignedClients?: ClientUncheckedUpdateManyWithoutAssignedUsersNestedInput
    mindmaps?: MindMapUncheckedUpdateManyWithoutOwnerUserNestedInput
    calendarEvents?: CalendarEventUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type AffiliateClickUpsertWithWhereUniqueWithoutAffiliateInput = {
    where: AffiliateClickWhereUniqueInput
    update: XOR<AffiliateClickUpdateWithoutAffiliateInput, AffiliateClickUncheckedUpdateWithoutAffiliateInput>
    create: XOR<AffiliateClickCreateWithoutAffiliateInput, AffiliateClickUncheckedCreateWithoutAffiliateInput>
  }

  export type AffiliateClickUpdateWithWhereUniqueWithoutAffiliateInput = {
    where: AffiliateClickWhereUniqueInput
    data: XOR<AffiliateClickUpdateWithoutAffiliateInput, AffiliateClickUncheckedUpdateWithoutAffiliateInput>
  }

  export type AffiliateClickUpdateManyWithWhereWithoutAffiliateInput = {
    where: AffiliateClickScalarWhereInput
    data: XOR<AffiliateClickUpdateManyMutationInput, AffiliateClickUncheckedUpdateManyWithoutAffiliateInput>
  }

  export type AffiliateClickScalarWhereInput = {
    AND?: AffiliateClickScalarWhereInput | AffiliateClickScalarWhereInput[]
    OR?: AffiliateClickScalarWhereInput[]
    NOT?: AffiliateClickScalarWhereInput | AffiliateClickScalarWhereInput[]
    id?: StringFilter<"AffiliateClick"> | string
    affiliateId?: StringFilter<"AffiliateClick"> | string
    visitorIp?: StringNullableFilter<"AffiliateClick"> | string | null
    userAgent?: StringNullableFilter<"AffiliateClick"> | string | null
    campaign?: StringNullableFilter<"AffiliateClick"> | string | null
    createdAt?: DateTimeFilter<"AffiliateClick"> | Date | string
  }

  export type AffiliateLinkCreateWithoutClicksInput = {
    id?: string
    code: string
    commissionRate?: number
    createdAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutAffiliateLinksInput
    user: UserCreateNestedOneWithoutAffiliateLinksInput
  }

  export type AffiliateLinkUncheckedCreateWithoutClicksInput = {
    id?: string
    organizationId: string
    userId: string
    code: string
    commissionRate?: number
    createdAt?: Date | string
  }

  export type AffiliateLinkCreateOrConnectWithoutClicksInput = {
    where: AffiliateLinkWhereUniqueInput
    create: XOR<AffiliateLinkCreateWithoutClicksInput, AffiliateLinkUncheckedCreateWithoutClicksInput>
  }

  export type AffiliateLinkUpsertWithoutClicksInput = {
    update: XOR<AffiliateLinkUpdateWithoutClicksInput, AffiliateLinkUncheckedUpdateWithoutClicksInput>
    create: XOR<AffiliateLinkCreateWithoutClicksInput, AffiliateLinkUncheckedCreateWithoutClicksInput>
    where?: AffiliateLinkWhereInput
  }

  export type AffiliateLinkUpdateToOneWithWhereWithoutClicksInput = {
    where?: AffiliateLinkWhereInput
    data: XOR<AffiliateLinkUpdateWithoutClicksInput, AffiliateLinkUncheckedUpdateWithoutClicksInput>
  }

  export type AffiliateLinkUpdateWithoutClicksInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    commissionRate?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutAffiliateLinksNestedInput
    user?: UserUpdateOneRequiredWithoutAffiliateLinksNestedInput
  }

  export type AffiliateLinkUncheckedUpdateWithoutClicksInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    commissionRate?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutAccountsInput = {
    id?: string
    name?: string | null
    email: string
    password?: string | null
    image?: string | null
    emailVerified?: Date | string | null
    role?: $Enums.UserRole
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    sessions?: SessionCreateNestedManyWithoutUserInput
    memberships?: OrganizationMembershipCreateNestedManyWithoutUserInput
    assignedClients?: ClientCreateNestedManyWithoutAssignedUsersInput
    mindmaps?: MindMapCreateNestedManyWithoutOwnerUserInput
    affiliateLinks?: AffiliateLinkCreateNestedManyWithoutUserInput
    calendarEvents?: CalendarEventCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutAccountsInput = {
    id?: string
    name?: string | null
    email: string
    password?: string | null
    image?: string | null
    emailVerified?: Date | string | null
    role?: $Enums.UserRole
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    memberships?: OrganizationMembershipUncheckedCreateNestedManyWithoutUserInput
    assignedClients?: ClientUncheckedCreateNestedManyWithoutAssignedUsersInput
    mindmaps?: MindMapUncheckedCreateNestedManyWithoutOwnerUserInput
    affiliateLinks?: AffiliateLinkUncheckedCreateNestedManyWithoutUserInput
    calendarEvents?: CalendarEventUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutAccountsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
  }

  export type UserUpsertWithoutAccountsInput = {
    update: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAccountsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUpdateManyWithoutUserNestedInput
    memberships?: OrganizationMembershipUpdateManyWithoutUserNestedInput
    assignedClients?: ClientUpdateManyWithoutAssignedUsersNestedInput
    mindmaps?: MindMapUpdateManyWithoutOwnerUserNestedInput
    affiliateLinks?: AffiliateLinkUpdateManyWithoutUserNestedInput
    calendarEvents?: CalendarEventUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    memberships?: OrganizationMembershipUncheckedUpdateManyWithoutUserNestedInput
    assignedClients?: ClientUncheckedUpdateManyWithoutAssignedUsersNestedInput
    mindmaps?: MindMapUncheckedUpdateManyWithoutOwnerUserNestedInput
    affiliateLinks?: AffiliateLinkUncheckedUpdateManyWithoutUserNestedInput
    calendarEvents?: CalendarEventUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type UserCreateWithoutSessionsInput = {
    id?: string
    name?: string | null
    email: string
    password?: string | null
    image?: string | null
    emailVerified?: Date | string | null
    role?: $Enums.UserRole
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    memberships?: OrganizationMembershipCreateNestedManyWithoutUserInput
    assignedClients?: ClientCreateNestedManyWithoutAssignedUsersInput
    mindmaps?: MindMapCreateNestedManyWithoutOwnerUserInput
    affiliateLinks?: AffiliateLinkCreateNestedManyWithoutUserInput
    calendarEvents?: CalendarEventCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: string
    name?: string | null
    email: string
    password?: string | null
    image?: string | null
    emailVerified?: Date | string | null
    role?: $Enums.UserRole
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    memberships?: OrganizationMembershipUncheckedCreateNestedManyWithoutUserInput
    assignedClients?: ClientUncheckedCreateNestedManyWithoutAssignedUsersInput
    mindmaps?: MindMapUncheckedCreateNestedManyWithoutOwnerUserInput
    affiliateLinks?: AffiliateLinkUncheckedCreateNestedManyWithoutUserInput
    calendarEvents?: CalendarEventUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    memberships?: OrganizationMembershipUpdateManyWithoutUserNestedInput
    assignedClients?: ClientUpdateManyWithoutAssignedUsersNestedInput
    mindmaps?: MindMapUpdateManyWithoutOwnerUserNestedInput
    affiliateLinks?: AffiliateLinkUpdateManyWithoutUserNestedInput
    calendarEvents?: CalendarEventUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    memberships?: OrganizationMembershipUncheckedUpdateManyWithoutUserNestedInput
    assignedClients?: ClientUncheckedUpdateManyWithoutAssignedUsersNestedInput
    mindmaps?: MindMapUncheckedUpdateManyWithoutOwnerUserNestedInput
    affiliateLinks?: AffiliateLinkUncheckedUpdateManyWithoutUserNestedInput
    calendarEvents?: CalendarEventUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type AccountCreateManyUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type SessionCreateManyUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
  }

  export type OrganizationMembershipCreateManyUserInput = {
    id?: string
    organizationId: string
    role?: $Enums.OrgRole
  }

  export type MindMapCreateManyOwnerUserInput = {
    id?: string
    organizationId?: string | null
    data: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type AffiliateLinkCreateManyUserInput = {
    id?: string
    organizationId: string
    code: string
    commissionRate?: number
    createdAt?: Date | string
  }

  export type CalendarEventCreateManyCreatedByInput = {
    id?: string
    organizationId: string
    title: string
    start: Date | string
    end?: Date | string | null
    level?: string | null
    description?: string | null
    createdAt?: Date | string
    type?: $Enums.CalendarItemType
    allDay?: boolean
    location?: string | null
    reminders?: CalendarEventCreateremindersInput | number[]
    completed?: boolean
    seriesId?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type AccountUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrganizationMembershipUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumOrgRoleFieldUpdateOperationsInput | $Enums.OrgRole
    organization?: OrganizationUpdateOneRequiredWithoutMembershipsNestedInput
    Client?: ClientUpdateManyWithoutAssignedToNestedInput
  }

  export type OrganizationMembershipUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    role?: EnumOrgRoleFieldUpdateOperationsInput | $Enums.OrgRole
    Client?: ClientUncheckedUpdateManyWithoutAssignedToNestedInput
  }

  export type OrganizationMembershipUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    role?: EnumOrgRoleFieldUpdateOperationsInput | $Enums.OrgRole
  }

  export type ClientUpdateWithoutAssignedUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    stage?: EnumPipelineStageFieldUpdateOperationsInput | $Enums.PipelineStage
    valueUsd?: IntFieldUpdateOperationsInput | number
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    isOnboarded?: BoolFieldUpdateOperationsInput | boolean
    competitors?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedTo?: OrganizationMembershipUpdateOneWithoutClientNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutClientsNestedInput
    interactions?: InteractionUpdateManyWithoutClientNestedInput
    invoices?: InvoiceUpdateManyWithoutClientNestedInput
    sequences?: SequenceTargetUpdateManyWithoutClientNestedInput
    pipelineCards?: PipelineCardUpdateManyWithoutClientNestedInput
    campaigns?: CampaignUpdateManyWithoutClientNestedInput
    EmailEvent?: EmailEventUpdateManyWithoutClientNestedInput
    Subscription?: SubscriptionUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateWithoutAssignedUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    stage?: EnumPipelineStageFieldUpdateOperationsInput | $Enums.PipelineStage
    valueUsd?: IntFieldUpdateOperationsInput | number
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    isOnboarded?: BoolFieldUpdateOperationsInput | boolean
    competitors?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedToMembershipId?: NullableStringFieldUpdateOperationsInput | string | null
    interactions?: InteractionUncheckedUpdateManyWithoutClientNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutClientNestedInput
    sequences?: SequenceTargetUncheckedUpdateManyWithoutClientNestedInput
    pipelineCards?: PipelineCardUncheckedUpdateManyWithoutClientNestedInput
    campaigns?: CampaignUncheckedUpdateManyWithoutClientNestedInput
    EmailEvent?: EmailEventUncheckedUpdateManyWithoutClientNestedInput
    Subscription?: SubscriptionUncheckedUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateManyWithoutAssignedUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    stage?: EnumPipelineStageFieldUpdateOperationsInput | $Enums.PipelineStage
    valueUsd?: IntFieldUpdateOperationsInput | number
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    isOnboarded?: BoolFieldUpdateOperationsInput | boolean
    competitors?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedToMembershipId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MindMapUpdateWithoutOwnerUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneWithoutMindmapsNestedInput
  }

  export type MindMapUncheckedUpdateWithoutOwnerUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    data?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MindMapUncheckedUpdateManyWithoutOwnerUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    data?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AffiliateLinkUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    commissionRate?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutAffiliateLinksNestedInput
    clicks?: AffiliateClickUpdateManyWithoutAffiliateNestedInput
  }

  export type AffiliateLinkUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    commissionRate?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clicks?: AffiliateClickUncheckedUpdateManyWithoutAffiliateNestedInput
  }

  export type AffiliateLinkUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    commissionRate?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CalendarEventUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    level?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumCalendarItemTypeFieldUpdateOperationsInput | $Enums.CalendarItemType
    allDay?: BoolFieldUpdateOperationsInput | boolean
    location?: NullableStringFieldUpdateOperationsInput | string | null
    reminders?: CalendarEventUpdateremindersInput | number[]
    completed?: BoolFieldUpdateOperationsInput | boolean
    seriesId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    organization?: OrganizationUpdateOneRequiredWithoutCalendarEventsNestedInput
  }

  export type CalendarEventUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    level?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumCalendarItemTypeFieldUpdateOperationsInput | $Enums.CalendarItemType
    allDay?: BoolFieldUpdateOperationsInput | boolean
    location?: NullableStringFieldUpdateOperationsInput | string | null
    reminders?: CalendarEventUpdateremindersInput | number[]
    completed?: BoolFieldUpdateOperationsInput | boolean
    seriesId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type CalendarEventUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    level?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumCalendarItemTypeFieldUpdateOperationsInput | $Enums.CalendarItemType
    allDay?: BoolFieldUpdateOperationsInput | boolean
    location?: NullableStringFieldUpdateOperationsInput | string | null
    reminders?: CalendarEventUpdateremindersInput | number[]
    completed?: BoolFieldUpdateOperationsInput | boolean
    seriesId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type OrganizationMembershipCreateManyOrganizationInput = {
    id?: string
    userId: string
    role?: $Enums.OrgRole
  }

  export type ClientCreateManyOrganizationInput = {
    id?: string
    name: string
    email: string
    phone?: string | null
    company?: string | null
    stage?: $Enums.PipelineStage
    valueUsd?: number
    isPaid?: boolean
    isOnboarded?: boolean
    competitors?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    assignedToMembershipId?: string | null
  }

  export type PipelineCreateManyOrganizationInput = {
    id?: string
    name: string
    createdAt?: Date | string
  }

  export type InvoiceCreateManyOrganizationInput = {
    id?: string
    clientId: string
    amountUsd: number
    status?: $Enums.InvoiceStatus
    dueDate: Date | string
    createdAt?: Date | string
  }

  export type MindMapCreateManyOrganizationInput = {
    id?: string
    ownerUserId?: string | null
    data: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type AffiliateLinkCreateManyOrganizationInput = {
    id?: string
    userId: string
    code: string
    commissionRate?: number
    createdAt?: Date | string
  }

  export type PipelineCardCreateManyOrganizationInput = {
    id?: string
    pipelineId: string
    stageId: string
    clientId: string
    title: string
    value?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionCreateManyOrganizationInput = {
    id?: string
    invoiceId: string
    amount: number
    currency?: string
    gateway: string
    gatewayPayload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type SubscriptionCreateManyOrganizationInput = {
    id?: string
    clientId?: string | null
    status: string
    priceId?: string | null
    subscriptionId?: string | null
    currentPeriodEnd?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmailSequenceCreateManyOrganizationInput = {
    id?: string
    name: string
    sent?: number
    opens?: number
    clicks?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmailTemplateCreateManyOrganizationInput = {
    id?: string
    name: string
    subject: string
    html: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CalendarEventCreateManyOrganizationInput = {
    id?: string
    title: string
    start: Date | string
    end?: Date | string | null
    level?: string | null
    description?: string | null
    createdById?: string | null
    createdAt?: Date | string
    type?: $Enums.CalendarItemType
    allDay?: boolean
    location?: string | null
    reminders?: CalendarEventCreateremindersInput | number[]
    completed?: boolean
    seriesId?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type OrganizationMembershipUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumOrgRoleFieldUpdateOperationsInput | $Enums.OrgRole
    user?: UserUpdateOneRequiredWithoutMembershipsNestedInput
    Client?: ClientUpdateManyWithoutAssignedToNestedInput
  }

  export type OrganizationMembershipUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumOrgRoleFieldUpdateOperationsInput | $Enums.OrgRole
    Client?: ClientUncheckedUpdateManyWithoutAssignedToNestedInput
  }

  export type OrganizationMembershipUncheckedUpdateManyWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumOrgRoleFieldUpdateOperationsInput | $Enums.OrgRole
  }

  export type ClientUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    stage?: EnumPipelineStageFieldUpdateOperationsInput | $Enums.PipelineStage
    valueUsd?: IntFieldUpdateOperationsInput | number
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    isOnboarded?: BoolFieldUpdateOperationsInput | boolean
    competitors?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedTo?: OrganizationMembershipUpdateOneWithoutClientNestedInput
    assignedUsers?: UserUpdateManyWithoutAssignedClientsNestedInput
    interactions?: InteractionUpdateManyWithoutClientNestedInput
    invoices?: InvoiceUpdateManyWithoutClientNestedInput
    sequences?: SequenceTargetUpdateManyWithoutClientNestedInput
    pipelineCards?: PipelineCardUpdateManyWithoutClientNestedInput
    campaigns?: CampaignUpdateManyWithoutClientNestedInput
    EmailEvent?: EmailEventUpdateManyWithoutClientNestedInput
    Subscription?: SubscriptionUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    stage?: EnumPipelineStageFieldUpdateOperationsInput | $Enums.PipelineStage
    valueUsd?: IntFieldUpdateOperationsInput | number
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    isOnboarded?: BoolFieldUpdateOperationsInput | boolean
    competitors?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedToMembershipId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedUsers?: UserUncheckedUpdateManyWithoutAssignedClientsNestedInput
    interactions?: InteractionUncheckedUpdateManyWithoutClientNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutClientNestedInput
    sequences?: SequenceTargetUncheckedUpdateManyWithoutClientNestedInput
    pipelineCards?: PipelineCardUncheckedUpdateManyWithoutClientNestedInput
    campaigns?: CampaignUncheckedUpdateManyWithoutClientNestedInput
    EmailEvent?: EmailEventUncheckedUpdateManyWithoutClientNestedInput
    Subscription?: SubscriptionUncheckedUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateManyWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    stage?: EnumPipelineStageFieldUpdateOperationsInput | $Enums.PipelineStage
    valueUsd?: IntFieldUpdateOperationsInput | number
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    isOnboarded?: BoolFieldUpdateOperationsInput | boolean
    competitors?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedToMembershipId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PipelineUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stages?: PipelineStageModelUpdateManyWithoutPipelineNestedInput
    pipelineCards?: PipelineCardUpdateManyWithoutPipelineNestedInput
  }

  export type PipelineUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stages?: PipelineStageModelUncheckedUpdateManyWithoutPipelineNestedInput
    pipelineCards?: PipelineCardUncheckedUpdateManyWithoutPipelineNestedInput
  }

  export type PipelineUncheckedUpdateManyWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvoiceUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    amountUsd?: IntFieldUpdateOperationsInput | number
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | $Enums.InvoiceStatus
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    client?: ClientUpdateOneRequiredWithoutInvoicesNestedInput
    transactions?: TransactionUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
    amountUsd?: IntFieldUpdateOperationsInput | number
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | $Enums.InvoiceStatus
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions?: TransactionUncheckedUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceUncheckedUpdateManyWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
    amountUsd?: IntFieldUpdateOperationsInput | number
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | $Enums.InvoiceStatus
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MindMapUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownerUser?: UserUpdateOneWithoutMindmapsNestedInput
  }

  export type MindMapUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    ownerUserId?: NullableStringFieldUpdateOperationsInput | string | null
    data?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MindMapUncheckedUpdateManyWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    ownerUserId?: NullableStringFieldUpdateOperationsInput | string | null
    data?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AffiliateLinkUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    commissionRate?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAffiliateLinksNestedInput
    clicks?: AffiliateClickUpdateManyWithoutAffiliateNestedInput
  }

  export type AffiliateLinkUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    commissionRate?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clicks?: AffiliateClickUncheckedUpdateManyWithoutAffiliateNestedInput
  }

  export type AffiliateLinkUncheckedUpdateManyWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    commissionRate?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PipelineCardUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    value?: NullableFloatFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pipeline?: PipelineUpdateOneRequiredWithoutPipelineCardsNestedInput
    stage?: PipelineStageModelUpdateOneRequiredWithoutCardsNestedInput
    client?: ClientUpdateOneRequiredWithoutPipelineCardsNestedInput
  }

  export type PipelineCardUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    pipelineId?: StringFieldUpdateOperationsInput | string
    stageId?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    value?: NullableFloatFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PipelineCardUncheckedUpdateManyWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    pipelineId?: StringFieldUpdateOperationsInput | string
    stageId?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    value?: NullableFloatFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    gateway?: StringFieldUpdateOperationsInput | string
    gatewayPayload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invoice?: InvoiceUpdateOneRequiredWithoutTransactionsNestedInput
  }

  export type TransactionUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    invoiceId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    gateway?: StringFieldUpdateOperationsInput | string
    gatewayPayload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUncheckedUpdateManyWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    invoiceId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    gateway?: StringFieldUpdateOperationsInput | string
    gatewayPayload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    priceId?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    currentPeriodEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    client?: ClientUpdateOneWithoutSubscriptionNestedInput
  }

  export type SubscriptionUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    priceId?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    currentPeriodEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionUncheckedUpdateManyWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    priceId?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    currentPeriodEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailSequenceUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    sent?: IntFieldUpdateOperationsInput | number
    opens?: IntFieldUpdateOperationsInput | number
    clicks?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    steps?: EmailStepUpdateManyWithoutSequenceNestedInput
    targets?: SequenceTargetUpdateManyWithoutSequenceNestedInput
    events?: EmailEventUpdateManyWithoutSequenceNestedInput
  }

  export type EmailSequenceUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    sent?: IntFieldUpdateOperationsInput | number
    opens?: IntFieldUpdateOperationsInput | number
    clicks?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    steps?: EmailStepUncheckedUpdateManyWithoutSequenceNestedInput
    targets?: SequenceTargetUncheckedUpdateManyWithoutSequenceNestedInput
    events?: EmailEventUncheckedUpdateManyWithoutSequenceNestedInput
  }

  export type EmailSequenceUncheckedUpdateManyWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    sent?: IntFieldUpdateOperationsInput | number
    opens?: IntFieldUpdateOperationsInput | number
    clicks?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailTemplateUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    html?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailTemplateUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    html?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailTemplateUncheckedUpdateManyWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    html?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CalendarEventUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    level?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumCalendarItemTypeFieldUpdateOperationsInput | $Enums.CalendarItemType
    allDay?: BoolFieldUpdateOperationsInput | boolean
    location?: NullableStringFieldUpdateOperationsInput | string | null
    reminders?: CalendarEventUpdateremindersInput | number[]
    completed?: BoolFieldUpdateOperationsInput | boolean
    seriesId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdBy?: UserUpdateOneWithoutCalendarEventsNestedInput
  }

  export type CalendarEventUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    level?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumCalendarItemTypeFieldUpdateOperationsInput | $Enums.CalendarItemType
    allDay?: BoolFieldUpdateOperationsInput | boolean
    location?: NullableStringFieldUpdateOperationsInput | string | null
    reminders?: CalendarEventUpdateremindersInput | number[]
    completed?: BoolFieldUpdateOperationsInput | boolean
    seriesId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type CalendarEventUncheckedUpdateManyWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    level?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumCalendarItemTypeFieldUpdateOperationsInput | $Enums.CalendarItemType
    allDay?: BoolFieldUpdateOperationsInput | boolean
    location?: NullableStringFieldUpdateOperationsInput | string | null
    reminders?: CalendarEventUpdateremindersInput | number[]
    completed?: BoolFieldUpdateOperationsInput | boolean
    seriesId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ClientCreateManyAssignedToInput = {
    id?: string
    organizationId: string
    name: string
    email: string
    phone?: string | null
    company?: string | null
    stage?: $Enums.PipelineStage
    valueUsd?: number
    isPaid?: boolean
    isOnboarded?: boolean
    competitors?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type ClientUpdateWithoutAssignedToInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    stage?: EnumPipelineStageFieldUpdateOperationsInput | $Enums.PipelineStage
    valueUsd?: IntFieldUpdateOperationsInput | number
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    isOnboarded?: BoolFieldUpdateOperationsInput | boolean
    competitors?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedUsers?: UserUpdateManyWithoutAssignedClientsNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutClientsNestedInput
    interactions?: InteractionUpdateManyWithoutClientNestedInput
    invoices?: InvoiceUpdateManyWithoutClientNestedInput
    sequences?: SequenceTargetUpdateManyWithoutClientNestedInput
    pipelineCards?: PipelineCardUpdateManyWithoutClientNestedInput
    campaigns?: CampaignUpdateManyWithoutClientNestedInput
    EmailEvent?: EmailEventUpdateManyWithoutClientNestedInput
    Subscription?: SubscriptionUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateWithoutAssignedToInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    stage?: EnumPipelineStageFieldUpdateOperationsInput | $Enums.PipelineStage
    valueUsd?: IntFieldUpdateOperationsInput | number
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    isOnboarded?: BoolFieldUpdateOperationsInput | boolean
    competitors?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedUsers?: UserUncheckedUpdateManyWithoutAssignedClientsNestedInput
    interactions?: InteractionUncheckedUpdateManyWithoutClientNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutClientNestedInput
    sequences?: SequenceTargetUncheckedUpdateManyWithoutClientNestedInput
    pipelineCards?: PipelineCardUncheckedUpdateManyWithoutClientNestedInput
    campaigns?: CampaignUncheckedUpdateManyWithoutClientNestedInput
    EmailEvent?: EmailEventUncheckedUpdateManyWithoutClientNestedInput
    Subscription?: SubscriptionUncheckedUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateManyWithoutAssignedToInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    stage?: EnumPipelineStageFieldUpdateOperationsInput | $Enums.PipelineStage
    valueUsd?: IntFieldUpdateOperationsInput | number
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    isOnboarded?: BoolFieldUpdateOperationsInput | boolean
    competitors?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InteractionCreateManyClientInput = {
    id?: string
    date?: Date | string
    type: $Enums.InteractionType
    summary: string
  }

  export type InvoiceCreateManyClientInput = {
    id?: string
    organizationId: string
    amountUsd: number
    status?: $Enums.InvoiceStatus
    dueDate: Date | string
    createdAt?: Date | string
  }

  export type SequenceTargetCreateManyClientInput = {
    sequenceId: string
  }

  export type PipelineCardCreateManyClientInput = {
    id?: string
    organizationId: string
    pipelineId: string
    stageId: string
    title: string
    value?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CampaignCreateManyClientInput = {
    id?: string
    name: string
    startDate?: Date | string | null
    endDate?: Date | string | null
    status?: $Enums.CampaignStatus
    metrics?: NullableJsonNullValueInput | InputJsonValue
  }

  export type EmailEventCreateManyClientInput = {
    id?: string
    sequenceId?: string | null
    type: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type SubscriptionCreateManyClientInput = {
    id?: string
    organizationId: string
    status: string
    priceId?: string | null
    subscriptionId?: string | null
    currentPeriodEnd?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateWithoutAssignedClientsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    memberships?: OrganizationMembershipUpdateManyWithoutUserNestedInput
    mindmaps?: MindMapUpdateManyWithoutOwnerUserNestedInput
    affiliateLinks?: AffiliateLinkUpdateManyWithoutUserNestedInput
    calendarEvents?: CalendarEventUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutAssignedClientsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    memberships?: OrganizationMembershipUncheckedUpdateManyWithoutUserNestedInput
    mindmaps?: MindMapUncheckedUpdateManyWithoutOwnerUserNestedInput
    affiliateLinks?: AffiliateLinkUncheckedUpdateManyWithoutUserNestedInput
    calendarEvents?: CalendarEventUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateManyWithoutAssignedClientsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InteractionUpdateWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumInteractionTypeFieldUpdateOperationsInput | $Enums.InteractionType
    summary?: StringFieldUpdateOperationsInput | string
  }

  export type InteractionUncheckedUpdateWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumInteractionTypeFieldUpdateOperationsInput | $Enums.InteractionType
    summary?: StringFieldUpdateOperationsInput | string
  }

  export type InteractionUncheckedUpdateManyWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumInteractionTypeFieldUpdateOperationsInput | $Enums.InteractionType
    summary?: StringFieldUpdateOperationsInput | string
  }

  export type InvoiceUpdateWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    amountUsd?: IntFieldUpdateOperationsInput | number
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | $Enums.InvoiceStatus
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutInvoicesNestedInput
    transactions?: TransactionUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceUncheckedUpdateWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    amountUsd?: IntFieldUpdateOperationsInput | number
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | $Enums.InvoiceStatus
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions?: TransactionUncheckedUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceUncheckedUpdateManyWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    amountUsd?: IntFieldUpdateOperationsInput | number
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | $Enums.InvoiceStatus
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SequenceTargetUpdateWithoutClientInput = {
    sequence?: EmailSequenceUpdateOneRequiredWithoutTargetsNestedInput
  }

  export type SequenceTargetUncheckedUpdateWithoutClientInput = {
    sequenceId?: StringFieldUpdateOperationsInput | string
  }

  export type SequenceTargetUncheckedUpdateManyWithoutClientInput = {
    sequenceId?: StringFieldUpdateOperationsInput | string
  }

  export type PipelineCardUpdateWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    value?: NullableFloatFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutPipelineCardsNestedInput
    pipeline?: PipelineUpdateOneRequiredWithoutPipelineCardsNestedInput
    stage?: PipelineStageModelUpdateOneRequiredWithoutCardsNestedInput
  }

  export type PipelineCardUncheckedUpdateWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    pipelineId?: StringFieldUpdateOperationsInput | string
    stageId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    value?: NullableFloatFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PipelineCardUncheckedUpdateManyWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    pipelineId?: StringFieldUpdateOperationsInput | string
    stageId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    value?: NullableFloatFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CampaignUpdateWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumCampaignStatusFieldUpdateOperationsInput | $Enums.CampaignStatus
    metrics?: NullableJsonNullValueInput | InputJsonValue
  }

  export type CampaignUncheckedUpdateWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumCampaignStatusFieldUpdateOperationsInput | $Enums.CampaignStatus
    metrics?: NullableJsonNullValueInput | InputJsonValue
  }

  export type CampaignUncheckedUpdateManyWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumCampaignStatusFieldUpdateOperationsInput | $Enums.CampaignStatus
    metrics?: NullableJsonNullValueInput | InputJsonValue
  }

  export type EmailEventUpdateWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sequence?: EmailSequenceUpdateOneWithoutEventsNestedInput
  }

  export type EmailEventUncheckedUpdateWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    sequenceId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailEventUncheckedUpdateManyWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    sequenceId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionUpdateWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    priceId?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    currentPeriodEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutSubscriptionsNestedInput
  }

  export type SubscriptionUncheckedUpdateWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    priceId?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    currentPeriodEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionUncheckedUpdateManyWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    priceId?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    currentPeriodEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PipelineStageModelCreateManyPipelineInput = {
    id?: string
    name: string
    position: number
  }

  export type PipelineCardCreateManyPipelineInput = {
    id?: string
    organizationId: string
    stageId: string
    clientId: string
    title: string
    value?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PipelineStageModelUpdateWithoutPipelineInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    cards?: PipelineCardUpdateManyWithoutStageNestedInput
  }

  export type PipelineStageModelUncheckedUpdateWithoutPipelineInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    cards?: PipelineCardUncheckedUpdateManyWithoutStageNestedInput
  }

  export type PipelineStageModelUncheckedUpdateManyWithoutPipelineInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
  }

  export type PipelineCardUpdateWithoutPipelineInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    value?: NullableFloatFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutPipelineCardsNestedInput
    stage?: PipelineStageModelUpdateOneRequiredWithoutCardsNestedInput
    client?: ClientUpdateOneRequiredWithoutPipelineCardsNestedInput
  }

  export type PipelineCardUncheckedUpdateWithoutPipelineInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    stageId?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    value?: NullableFloatFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PipelineCardUncheckedUpdateManyWithoutPipelineInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    stageId?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    value?: NullableFloatFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PipelineCardCreateManyStageInput = {
    id?: string
    organizationId: string
    pipelineId: string
    clientId: string
    title: string
    value?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PipelineCardUpdateWithoutStageInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    value?: NullableFloatFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutPipelineCardsNestedInput
    pipeline?: PipelineUpdateOneRequiredWithoutPipelineCardsNestedInput
    client?: ClientUpdateOneRequiredWithoutPipelineCardsNestedInput
  }

  export type PipelineCardUncheckedUpdateWithoutStageInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    pipelineId?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    value?: NullableFloatFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PipelineCardUncheckedUpdateManyWithoutStageInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    pipelineId?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    value?: NullableFloatFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailStepCreateManySequenceInput = {
    id?: string
    subject: string
    body: string
    delayDays?: number
  }

  export type SequenceTargetCreateManySequenceInput = {
    clientId: string
  }

  export type EmailEventCreateManySequenceInput = {
    id?: string
    clientId?: string | null
    type: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type EmailStepUpdateWithoutSequenceInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    delayDays?: IntFieldUpdateOperationsInput | number
  }

  export type EmailStepUncheckedUpdateWithoutSequenceInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    delayDays?: IntFieldUpdateOperationsInput | number
  }

  export type EmailStepUncheckedUpdateManyWithoutSequenceInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    delayDays?: IntFieldUpdateOperationsInput | number
  }

  export type SequenceTargetUpdateWithoutSequenceInput = {
    client?: ClientUpdateOneRequiredWithoutSequencesNestedInput
  }

  export type SequenceTargetUncheckedUpdateWithoutSequenceInput = {
    clientId?: StringFieldUpdateOperationsInput | string
  }

  export type SequenceTargetUncheckedUpdateManyWithoutSequenceInput = {
    clientId?: StringFieldUpdateOperationsInput | string
  }

  export type EmailEventUpdateWithoutSequenceInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    client?: ClientUpdateOneWithoutEmailEventNestedInput
  }

  export type EmailEventUncheckedUpdateWithoutSequenceInput = {
    id?: StringFieldUpdateOperationsInput | string
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailEventUncheckedUpdateManyWithoutSequenceInput = {
    id?: StringFieldUpdateOperationsInput | string
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionCreateManyInvoiceInput = {
    id?: string
    organizationId?: string | null
    amount: number
    currency?: string
    gateway: string
    gatewayPayload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type TransactionUpdateWithoutInvoiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    gateway?: StringFieldUpdateOperationsInput | string
    gatewayPayload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneWithoutTransactionsNestedInput
  }

  export type TransactionUncheckedUpdateWithoutInvoiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    gateway?: StringFieldUpdateOperationsInput | string
    gatewayPayload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUncheckedUpdateManyWithoutInvoiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    gateway?: StringFieldUpdateOperationsInput | string
    gatewayPayload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AffiliateClickCreateManyAffiliateInput = {
    id?: string
    visitorIp?: string | null
    userAgent?: string | null
    campaign?: string | null
    createdAt?: Date | string
  }

  export type AffiliateClickUpdateWithoutAffiliateInput = {
    id?: StringFieldUpdateOperationsInput | string
    visitorIp?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    campaign?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AffiliateClickUncheckedUpdateWithoutAffiliateInput = {
    id?: StringFieldUpdateOperationsInput | string
    visitorIp?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    campaign?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AffiliateClickUncheckedUpdateManyWithoutAffiliateInput = {
    id?: StringFieldUpdateOperationsInput | string
    visitorIp?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    campaign?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}