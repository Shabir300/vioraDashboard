// Prisma schema for Viora MVP foundation (merged: your proposal + ours)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Global user role (platform-wide)
enum UserRole {
  SUPER_ADMIN
  ORG_ADMIN
  MANAGER
  STAFF
  AMBASSADOR
}

// Per-organization role
enum OrgRole {
  Owner
  Admin
  Advertiser
  Pipeline
  EmailMarketer
  Viewer
}

enum PipelineStage {
  Lead
  Contacted
  Negotiation
  Closed
}

enum InteractionType {
  call
  email
  meeting
  note
}

enum InvoiceStatus {
  paid
  unpaid
}

enum CampaignStatus {
  ACTIVE
  PAUSED
  COMPLETED
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  image         String?
  emailVerified DateTime?
  role          UserRole  @default(ORG_ADMIN)
  metadata      Json?
  createdAt     DateTime  @default(now())

  accounts        Account[]
  sessions        Session[]
  memberships     OrganizationMembership[]
  assignedClients Client[]                 @relation("ClientAssignedUsers")
  mindmaps        MindMap[]
  affiliateLinks  AffiliateLink[]
  calendarEvents  CalendarEvent[]          @relation("UserCreatedEvents")
}

model Organization {
  id          String   @id @default(cuid())
  name        String
  subdomain   String?  @unique
  billingPlan String?
  createdAt   DateTime @default(now())

  memberships    OrganizationMembership[]
  clients        Client[]
  pipelines      Pipeline[]
  invoices       Invoice[]
  mindmaps       MindMap[]
  affiliateLinks AffiliateLink[]
  pipelineCards  PipelineCard[]
  transactions   Transaction[]
  subscriptions  Subscription[]
  emailSequences EmailSequence[]
  emailTemplates EmailTemplate[]
  calendarEvents CalendarEvent[]
}

model OrganizationMembership {
  id             String  @id @default(cuid())
  organizationId String
  userId         String
  role           OrgRole @default(Viewer)

  organization Organization @relation(fields: [organizationId], references: [id])
  user         User         @relation(fields: [userId], references: [id])
  Client       Client[]

  @@unique([organizationId, userId])
}

model Client {
  id             String        @id @default(cuid())
  organizationId String
  name           String
  email          String
  phone          String?
  company        String?
  stage          PipelineStage @default(Lead)
  valueUsd       Int           @default(0)
  isPaid         Boolean       @default(false)
  isOnboarded    Boolean       @default(false)
  competitors    Json?
  notes          Json?
  createdAt      DateTime      @default(now())

  // Primary assignee (optional)
  assignedToMembershipId String?
  assignedTo             OrganizationMembership? @relation(fields: [assignedToMembershipId], references: [id])

  // Additional assignees (many-to-many with User)
  assignedUsers User[] @relation("ClientAssignedUsers")

  organization  Organization     @relation(fields: [organizationId], references: [id])
  interactions  Interaction[]
  invoices      Invoice[]
  sequences     SequenceTarget[]
  pipelineCards PipelineCard[]
  campaigns     Campaign[]
  EmailEvent    EmailEvent[]
  Subscription  Subscription[]
}

model Interaction {
  id       String          @id @default(cuid())
  date     DateTime        @default(now())
  type     InteractionType
  summary  String
  clientId String
  client   Client          @relation(fields: [clientId], references: [id])
}

model Pipeline {
  id             String   @id @default(cuid())
  organizationId String
  name           String
  createdAt      DateTime @default(now())

  organization  Organization         @relation(fields: [organizationId], references: [id])
  stages        PipelineStageModel[]
  pipelineCards PipelineCard[]
}

model PipelineStageModel {
  id         String @id @default(cuid())
  pipelineId String
  name       String
  position   Int

  pipeline Pipeline       @relation(fields: [pipelineId], references: [id])
  cards    PipelineCard[]
}

model PipelineCard {
  id             String   @id @default(cuid())
  organizationId String
  pipelineId     String
  stageId        String
  clientId       String
  title          String
  value          Float?
  metadata       Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization       @relation(fields: [organizationId], references: [id])
  pipeline     Pipeline           @relation(fields: [pipelineId], references: [id])
  stage        PipelineStageModel @relation(fields: [stageId], references: [id])
  client       Client             @relation(fields: [clientId], references: [id])
}

model EmailTemplate {
  id             String   @id @default(cuid())
  organizationId String
  name           String
  subject        String
  html           String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id])
}

model EmailSequence {
  id             String   @id @default(cuid())
  organizationId String
  name           String
  sent           Int      @default(0)
  opens          Int      @default(0)
  clicks         Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization     @relation(fields: [organizationId], references: [id])
  steps        EmailStep[]
  targets      SequenceTarget[]
  events       EmailEvent[]
}

model EmailStep {
  id         String        @id @default(cuid())
  subject    String
  body       String
  delayDays  Int           @default(0)
  sequenceId String
  sequence   EmailSequence @relation(fields: [sequenceId], references: [id])
}

model SequenceTarget {
  sequenceId String
  clientId   String
  sequence   EmailSequence @relation(fields: [sequenceId], references: [id])
  client     Client        @relation(fields: [clientId], references: [id])

  @@id([sequenceId, clientId])
}

model EmailEvent {
  id         String   @id @default(cuid())
  sequenceId String?
  clientId   String?
  type       String
  metadata   Json?
  createdAt  DateTime @default(now())

  sequence EmailSequence? @relation(fields: [sequenceId], references: [id])
  client   Client?        @relation(fields: [clientId], references: [id])
}

model Invoice {
  id             String        @id @default(cuid())
  organizationId String
  clientId       String
  amountUsd      Int
  status         InvoiceStatus @default(unpaid)
  dueDate        DateTime
  createdAt      DateTime      @default(now())

  organization Organization  @relation(fields: [organizationId], references: [id])
  client       Client        @relation(fields: [clientId], references: [id])
  transactions Transaction[]
}

model Transaction {
  id             String   @id @default(cuid())
  invoiceId      String
  organizationId String?
  amount         Float
  currency       String   @default("USD")
  gateway        String
  gatewayPayload Json?
  createdAt      DateTime @default(now())

  invoice      Invoice       @relation(fields: [invoiceId], references: [id])
  organization Organization? @relation(fields: [organizationId], references: [id])
}

model Subscription {
  id               String    @id @default(cuid())
  organizationId   String
  clientId         String?
  status           String
  priceId          String?
  subscriptionId   String?
  currentPeriodEnd DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id])
  client       Client?      @relation(fields: [clientId], references: [id])
}

model CalendarEvent {
  id             String    @id @default(cuid())
  organizationId String
  title          String
  start          DateTime
  end            DateTime?
  level          String?
  description    String?
  createdById    String?
  createdAt      DateTime  @default(now())
  // New fields for richer calendar features
  type           CalendarItemType @default(EVENT)
  allDay         Boolean          @default(false)
  location       String?
  reminders      Int[]
  completed      Boolean          @default(false)
  seriesId       String?
  metadata       Json?

  organization Organization @relation(fields: [organizationId], references: [id])
  createdBy    User?        @relation("UserCreatedEvents", fields: [createdById], references: [id])
}

enum CalendarItemType {
  EVENT
  TASK
  APPOINTMENT
}

model Campaign {
  id        String         @id @default(cuid())
  clientId  String
  name      String
  startDate DateTime?
  endDate   DateTime?
  status    CampaignStatus @default(ACTIVE)
  metrics   Json?

  client Client @relation(fields: [clientId], references: [id])
}

model MindMap {
  id             String   @id @default(cuid())
  organizationId String?
  ownerUserId    String?
  data           Json
  createdAt      DateTime @default(now())

  organization Organization? @relation(fields: [organizationId], references: [id])
  ownerUser    User?         @relation(fields: [ownerUserId], references: [id])
}

model AffiliateLink {
  id             String   @id @default(cuid())
  organizationId String
  userId         String
  code           String   @unique
  commissionRate Float    @default(0.45)
  createdAt      DateTime @default(now())

  organization Organization     @relation(fields: [organizationId], references: [id])
  user         User             @relation(fields: [userId], references: [id])
  clicks       AffiliateClick[]
}

model AffiliateClick {
  id          String   @id @default(cuid())
  affiliateId String
  visitorIp   String?
  userAgent   String?
  campaign    String?
  createdAt   DateTime @default(now())

  affiliate AffiliateLink @relation(fields: [affiliateId], references: [id])
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
